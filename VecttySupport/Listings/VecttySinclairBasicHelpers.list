
; File #0: C:\Users\geniw\source\repos\Vectty\VecttySupport\Z80CodeFiles\VecttySinclairBasicHelpers.z80asm

8000             0 1 ; Put your Z80 assembly code into code files
8000             0 2 Start:
8000             0 4 .org #EA00
EA00 00          0 6 X_FLOOD: .defb 0
EA01 00          0 7 Y_FLOOD: .defb 0
EA02             0 9 ;----------------------------------- Flood Fill
EA02 3A 00 EA    0 11 ld a, (X_FLOOD)
EA05 57          0 12 ld d, a
EA06 3A 01 EA    0 13 ld a, (Y_FLOOD)
EA09 5F          0 14 ld e, a
EA0A             0 16 ; scanline fill by John Metcalf
EA0A             0 17 ; call with d=x-coord, e=y-coord
EA0A             0 19 ; set end marker
EA0A             0 21 fill:
EA0A 2E FF       0 22 ld l,255
EA0C E5          0 23 push hl
EA0D             0 25 ; calculate bit position of pixel
EA0D             0 27 nextrun:
EA0D 7A          0 28 ld a,d
EA0E E6 07       0 29 and 7
EA10 3C          0 30 inc a
EA11 47          0 31 ld b,a
EA12 3E 01       0 32 ld a,1
EA14             0 33 bitpos:
EA14 0F          0 34 rrca
EA15 10 FD       0 35 djnz bitpos
EA17 48          0 36 ld c,b
EA18 47          0 37 ld b,a
EA19             0 39 ; move left until hitting a set pixel or the screen edge
EA19             0 41 seekleft:
EA19 7A          0 42 ld a,d
EA1A B7          0 43 or a
EA1B 28 0D       0 44 jr z,goright
EA1D 15          0 45 dec d
EA1E CB 00       0 46 rlc b
EA20 CD 42 EA    0 47 call scrpos
EA23 20 F4       0 48 jr nz,seekleft
EA25             0 50 ; move right until hitting a set pixel or the screen edge,
EA25             0 51 ; setting pixels as we go. Check rows above and below and
EA25             0 52 ; save their coordinates to fill later if necessary
EA25             0 54 seekright:
EA25 CB 08       0 55 rrc b
EA27 14          0 56 inc d
EA28 28 12       0 57 jr z,rightedge
EA2A             0 58 goright:
EA2A CD 42 EA    0 59 call scrpos
EA2D 28 0D       0 60 jr z,rightedge
EA2F 77          0 61 ld (hl),a
EA30 1C          0 62 inc e
EA31 CD 5C EA    0 63 call checkadj
EA34 1D          0 64 dec e
EA35 1D          0 65 dec e
EA36 CD 5C EA    0 66 call checkadj
EA39 1C          0 67 inc e
EA3A 18 E9       0 68 jr seekright
EA3C             0 70 ; check to see if there's another row waiting to be filled
EA3C             0 72 rightedge:
EA3C D1          0 73 pop de
EA3D 7B          0 74 ld a,e
EA3E 3C          0 75 inc a
EA3F 20 CC       0 76 jr nz,nextrun
EA41 C9          0 77 ret
EA42             0 79 ; calculate the pixel address and whether or not it's set
EA42             0 81 scrpos:
EA42 7B          0 82 ld a,e
EA43 E6 F8       0 83 and 248
EA45 1F          0 84 rra
EA46 37          0 85 scf
EA47 1F          0 86 rra
EA48 1F          0 87 rra
EA49 6F          0 88 ld l,a
EA4A AB          0 89 xor e
EA4B E6 F8       0 90 and 248
EA4D AB          0 91 xor e
EA4E 67          0 92 ld h,a
EA4F 7D          0 93 ld a,l
EA50 AA          0 94 xor d
EA51 E6 07       0 95 and 7
EA53 AA          0 96 xor d
EA54 0F          0 97 rrca
EA55 0F          0 98 rrca
EA56 0F          0 99 rrca
EA57 6F          0 100 ld l,a
EA58 78          0 101 ld a,b
EA59 B6          0 102 or (hl)
EA5A BE          0 103 cp (hl)
EA5B C9          0 104 ret
EA5C             0 106 ; check and save the coordinates of an adjacent row
EA5C             0 108 checkadj:
EA5C CB 21       0 109 sla c
EA5E 7B          0 110 ld a,e
EA5F FE C0       0 111 cp 192
EA61 D0          0 112 ret nc
EA62 CD 43 EA    0 113 call scrpos+1
EA65 C8          0 114 ret z
EA66 0C          0 115 inc c
EA67 CB 51       0 116 bit 2,c
EA69 C0          0 117 ret nz
EA6A E1          0 118 pop hl
EA6B D5          0 119 push de
EA6C E9          0 120 jp (hl)
EA70 00 00       0 124 ATTR_ADDRESS:   .DEFW 0
EA72 00          0 125 ATTR_VALUE:     .DEFB 0
EA73 00          0 126 ATTR_REP:       .DEFB 0
EA74 ED 4B 73 EA 0 128 LD BC, (ATTR_REP)        ;Load repeats in HL
EA78 06 00       0 129 LD B, 0
EA7A 03          0 131 INC BC                  ;Add one (repeats are N + 2)
EA7B 3A 72 EA    0 133 LD A, (ATTR_VALUE)      ;Load the attribute value
EA7E 2A 70 EA    0 135 LD HL, (ATTR_ADDRESS)   ;Load target address of the attribute
EA81 77          0 136 LD (HL), A              ;Set first attribute value
EA82 E5          0 137 PUSH HL                 ;Copy this address to DE
EA83 D1          0 138 POP DE
EA84 13          0 139 INC DE                  ;Increase DE (target) one
EA85 ED B0       0 141 LDIR                    ;Copy!
EA87 C9          0 143 RET                     ;We're done ;)
