
; File #0: C:\Users\geniw\source\repos\Vectty\VecttyTest\ZxBasicFiles\Program.zxbas.z80asm

8000             0 2 org 24000
5DC0             0 3 ; Defines HEAP SIZE
5DC0             0 4 ZXBASIC_HEAP_SIZE EQU 1024
5DC0             0 5 __START_PROGRAM:
5DC0 F3          0 6 di
5DC1 DD E5       0 7 push ix
5DC3 FD E5       0 8 push iy
5DC5 D9          0 9 exx
5DC6 E5          0 10 push hl
5DC7 D9          0 11 exx
5DC8 21 00 00    0 12 ld hl, 0
5DCB 39          0 13 add hl, sp
5DCC 22 F0 5D    0 14 ld (__CALL_BACK__), hl
5DCF FB          0 15 ei
5DD0 CD C0 6C    0 16 call __MEM_INIT
5DD3 CD 80 6A    0 17 call __PRINT_INIT
5DD6 21 F0 6D    0 18 ld hl, _vectImg.__DATA__
5DD9 E5          0 19 push hl
5DDA CD F2 5D    0 20 call _Dibujar
5DDD 21 00 00    0 21 ld hl, 0
5DE0 44          0 22 ld b, h
5DE1 4D          0 23 ld c, l
5DE2             0 24 __END_PROGRAM:
5DE2 F3          0 25 di
5DE3 2A F0 5D    0 26 ld hl, (__CALL_BACK__)
5DE6 F9          0 27 ld sp, hl
5DE7 D9          0 28 exx
5DE8 E1          0 29 pop hl
5DE9 D9          0 30 exx
5DEA FD E1       0 31 pop iy
5DEC DD E1       0 32 pop ix
5DEE FB          0 33 ei
5DEF C9          0 34 ret
5DF0             0 35 __CALL_BACK__:
5DF0 00 00       0 36 DEFW 0
5DF2             0 37 _Dibujar:
5DF2 DD E5       0 38 push ix
5DF4 DD 21 00 00 0 39 ld ix, 0
5DF8 DD 39       0 40 add ix, sp
5DFA 21 E6 FF    0 41 ld hl, -26
5DFD 39          0 42 add hl, sp
5DFE F9          0 43 ld sp, hl
5DFF 36 00       0 44 ld (hl), 0
5E01 01 19 00    0 45 ld bc, 25
5E04 54          0 46 ld d, h
5E05 5D          0 47 ld e, l
5E06 13          0 48 inc de
5E07 ED B0       0 49 ldir
5E09 DD E5       0 50 push ix
5E0B E1          0 51 pop hl
5E0C 01 F9 FF    0 52 ld bc, -7
5E0F 09          0 53 add hl, bc
5E10 EB          0 54 ex de, hl
5E11 21 42 70    0 55 ld hl, __LABEL33
5E14 01 02 00    0 56 ld bc, 2
5E17 ED B0       0 57 ldir
5E19 DD 6E 04    0 58 ld l, (ix+4)
5E1C DD 66 05    0 59 ld h, (ix+5)
5E1F DD 75 FB    0 60 ld (ix-5), l
5E22 DD 74 FC    0 61 ld (ix-4), h
5E25             0 62 __LABEL0:
5E25 DD 7E FD    0 63 ld a, (ix-3)
5E28 D6 FF       0 64 sub 255
5E2A CA 1A 63    0 65 jp z, __LABEL1
5E2D DD 6E FB    0 66 ld l, (ix-5)
5E30 DD 66 FC    0 67 ld h, (ix-4)
5E33 7E          0 68 ld a, (hl)
5E34 DD 77 FF    0 69 ld (ix-1), a
5E37 F5          0 70 push af
5E38 3E BF       0 71 ld a, 191
5E3A E1          0 72 pop hl
5E3B BC          0 73 cp h
5E3C D2 52 5E    0 74 jp nc, __LABEL3
5E3F DD 7E FF    0 75 ld a, (ix-1)
5E42 DD 77 FD    0 76 ld (ix-3), a
5E45 DD 6E FB    0 77 ld l, (ix-5)
5E48 DD 66 FC    0 78 ld h, (ix-4)
5E4B 23          0 79 inc hl
5E4C DD 75 FB    0 80 ld (ix-5), l
5E4F DD 74 FC    0 81 ld (ix-4), h
5E52             0 82 __LABEL3:
5E52 DD 7E FD    0 83 ld a, (ix-3)
5E55 D6 C8       0 84 sub 200
5E57 D6 01       0 85 sub 1
5E59 9F          0 86 sbc a, a
5E5A F5          0 87 push af
5E5B DD 7E FD    0 88 ld a, (ix-3)
5E5E D6 FA       0 89 sub 250
5E60 D6 01       0 90 sub 1
5E62 9F          0 91 sbc a, a
5E63 D1          0 92 pop de
5E64 B2          0 93 or d
5E65 CA 99 5F    0 94 jp z, __LABEL4
5E68 DD 6E FB    0 95 ld l, (ix-5)
5E6B DD 66 FC    0 96 ld h, (ix-4)
5E6E 7E          0 97 ld a, (hl)
5E6F 6F          0 98 ld l, a
5E70 26 00       0 99 ld h, 0
5E72 DD 75 F1    0 100 ld (ix-15), l
5E75 DD 74 F2    0 101 ld (ix-14), h
5E78 DD 6E FB    0 102 ld l, (ix-5)
5E7B DD 66 FC    0 103 ld h, (ix-4)
5E7E 23          0 104 inc hl
5E7F 7E          0 105 ld a, (hl)
5E80 6F          0 106 ld l, a
5E81 26 00       0 107 ld h, 0
5E83 DD 75 F3    0 108 ld (ix-13), l
5E86 DD 74 F4    0 109 ld (ix-12), h
5E89 DD 6E FB    0 110 ld l, (ix-5)
5E8C DD 66 FC    0 111 ld h, (ix-4)
5E8F 23          0 112 inc hl
5E90 23          0 113 inc hl
5E91 7E          0 114 ld a, (hl)
5E92 6F          0 115 ld l, a
5E93 26 00       0 116 ld h, 0
5E95 DD 75 ED    0 117 ld (ix-19), l
5E98 DD 74 EE    0 118 ld (ix-18), h
5E9B DD 6E FB    0 119 ld l, (ix-5)
5E9E DD 66 FC    0 120 ld h, (ix-4)
5EA1 23          0 121 inc hl
5EA2 23          0 122 inc hl
5EA3 23          0 123 inc hl
5EA4 7E          0 124 ld a, (hl)
5EA5 6F          0 125 ld l, a
5EA6 26 00       0 126 ld h, 0
5EA8 DD 75 EF    0 127 ld (ix-17), l
5EAB DD 74 F0    0 128 ld (ix-16), h
5EAE DD 6E FB    0 129 ld l, (ix-5)
5EB1 DD 66 FC    0 130 ld h, (ix-4)
5EB4 11 04 00    0 131 ld de, 4
5EB7 19          0 132 add hl, de
5EB8 DD 75 FB    0 133 ld (ix-5), l
5EBB DD 74 FC    0 134 ld (ix-4), h
5EBE DD 6E F3    0 135 ld l, (ix-13)
5EC1 DD 66 F4    0 136 ld h, (ix-12)
5EC4 7D          0 137 ld a, l
5EC5 F5          0 138 push af
5EC6 DD 6E F1    0 139 ld l, (ix-15)
5EC9 DD 66 F2    0 140 ld h, (ix-14)
5ECC 7D          0 141 ld a, l
5ECD CD 3F 65    0 142 call PLOT
5ED0 DD 6E EF    0 143 ld l, (ix-17)
5ED3 DD 66 F0    0 144 ld h, (ix-16)
5ED6 E5          0 145 push hl
5ED7 DD 6E F3    0 146 ld l, (ix-13)
5EDA DD 66 F4    0 147 ld h, (ix-12)
5EDD EB          0 148 ex de, hl
5EDE E1          0 149 pop hl
5EDF B7          0 150 or a
5EE0 ED 52       0 151 sbc hl, de
5EE2 E5          0 152 push hl
5EE3 DD 6E ED    0 153 ld l, (ix-19)
5EE6 DD 66 EE    0 154 ld h, (ix-18)
5EE9 E5          0 155 push hl
5EEA DD 6E F1    0 156 ld l, (ix-15)
5EED DD 66 F2    0 157 ld h, (ix-14)
5EF0 EB          0 158 ex de, hl
5EF1 E1          0 159 pop hl
5EF2 B7          0 160 or a
5EF3 ED 52       0 161 sbc hl, de
5EF5 CD D2 66    0 162 call DRAW
5EF8 DD 7E FD    0 163 ld a, (ix-3)
5EFB D6 FA       0 164 sub 250
5EFD C2 96 5F    0 165 jp nz, __LABEL7
5F00             0 166 __LABEL8:
5F00 DD 6E ED    0 167 ld l, (ix-19)
5F03 DD 66 EE    0 168 ld h, (ix-18)
5F06 E5          0 169 push hl
5F07 11 C8 00    0 170 ld de, 200
5F0A E1          0 171 pop hl
5F0B CD 0C 69    0 172 call __LTI16
5F0E B7          0 173 or a
5F0F CA 96 5F    0 174 jp z, __LABEL9
5F12 DD 6E EF    0 175 ld l, (ix-17)
5F15 DD 66 F0    0 176 ld h, (ix-16)
5F18 DD 75 F3    0 177 ld (ix-13), l
5F1B DD 74 F4    0 178 ld (ix-12), h
5F1E DD 6E ED    0 179 ld l, (ix-19)
5F21 DD 66 EE    0 180 ld h, (ix-18)
5F24 DD 75 F1    0 181 ld (ix-15), l
5F27 DD 74 F2    0 182 ld (ix-14), h
5F2A DD 6E FB    0 183 ld l, (ix-5)
5F2D DD 66 FC    0 184 ld h, (ix-4)
5F30 7E          0 185 ld a, (hl)
5F31 6F          0 186 ld l, a
5F32 26 00       0 187 ld h, 0
5F34 DD 75 ED    0 188 ld (ix-19), l
5F37 DD 74 EE    0 189 ld (ix-18), h
5F3A DD 6E ED    0 190 ld l, (ix-19)
5F3D DD 66 EE    0 191 ld h, (ix-18)
5F40 E5          0 192 push hl
5F41 11 C8 00    0 193 ld de, 200
5F44 E1          0 194 pop hl
5F45 CD 0C 69    0 195 call __LTI16
5F48 B7          0 196 or a
5F49 CA 93 5F    0 197 jp z, __LABEL11
5F4C DD 6E FB    0 198 ld l, (ix-5)
5F4F DD 66 FC    0 199 ld h, (ix-4)
5F52 23          0 200 inc hl
5F53 7E          0 201 ld a, (hl)
5F54 6F          0 202 ld l, a
5F55 26 00       0 203 ld h, 0
5F57 DD 75 EF    0 204 ld (ix-17), l
5F5A DD 74 F0    0 205 ld (ix-16), h
5F5D DD 6E FB    0 206 ld l, (ix-5)
5F60 DD 66 FC    0 207 ld h, (ix-4)
5F63 23          0 208 inc hl
5F64 23          0 209 inc hl
5F65 DD 75 FB    0 210 ld (ix-5), l
5F68 DD 74 FC    0 211 ld (ix-4), h
5F6B DD 6E EF    0 212 ld l, (ix-17)
5F6E DD 66 F0    0 213 ld h, (ix-16)
5F71 E5          0 214 push hl
5F72 DD 6E F3    0 215 ld l, (ix-13)
5F75 DD 66 F4    0 216 ld h, (ix-12)
5F78 EB          0 217 ex de, hl
5F79 E1          0 218 pop hl
5F7A B7          0 219 or a
5F7B ED 52       0 220 sbc hl, de
5F7D E5          0 221 push hl
5F7E DD 6E ED    0 222 ld l, (ix-19)
5F81 DD 66 EE    0 223 ld h, (ix-18)
5F84 E5          0 224 push hl
5F85 DD 6E F1    0 225 ld l, (ix-15)
5F88 DD 66 F2    0 226 ld h, (ix-14)
5F8B EB          0 227 ex de, hl
5F8C E1          0 228 pop hl
5F8D B7          0 229 or a
5F8E ED 52       0 230 sbc hl, de
5F90 CD D2 66    0 231 call DRAW
5F93             0 232 __LABEL11:
5F93 C3 00 5F    0 233 jp __LABEL8
5F96             0 234 __LABEL9:
5F96             0 235 __LABEL7:
5F96 C3 17 63    0 236 jp __LABEL5
5F99             0 237 __LABEL4:
5F99 DD 7E FD    0 238 ld a, (ix-3)
5F9C D6 C9       0 239 sub 201
5F9E C2 70 60    0 240 jp nz, __LABEL12
5FA1 DD 6E FB    0 241 ld l, (ix-5)
5FA4 DD 66 FC    0 242 ld h, (ix-4)
5FA7 7E          0 243 ld a, (hl)
5FA8 6F          0 244 ld l, a
5FA9 26 00       0 245 ld h, 0
5FAB DD 75 F1    0 246 ld (ix-15), l
5FAE DD 74 F2    0 247 ld (ix-14), h
5FB1 DD 6E FB    0 248 ld l, (ix-5)
5FB4 DD 66 FC    0 249 ld h, (ix-4)
5FB7 23          0 250 inc hl
5FB8 7E          0 251 ld a, (hl)
5FB9 6F          0 252 ld l, a
5FBA 26 00       0 253 ld h, 0
5FBC DD 75 F3    0 254 ld (ix-13), l
5FBF DD 74 F4    0 255 ld (ix-12), h
5FC2 DD 6E FB    0 256 ld l, (ix-5)
5FC5 DD 66 FC    0 257 ld h, (ix-4)
5FC8 23          0 258 inc hl
5FC9 23          0 259 inc hl
5FCA 7E          0 260 ld a, (hl)
5FCB 6F          0 261 ld l, a
5FCC 26 00       0 262 ld h, 0
5FCE DD 75 ED    0 263 ld (ix-19), l
5FD1 DD 74 EE    0 264 ld (ix-18), h
5FD4 DD 6E FB    0 265 ld l, (ix-5)
5FD7 DD 66 FC    0 266 ld h, (ix-4)
5FDA 23          0 267 inc hl
5FDB 23          0 268 inc hl
5FDC 23          0 269 inc hl
5FDD 7E          0 270 ld a, (hl)
5FDE 6F          0 271 ld l, a
5FDF 26 00       0 272 ld h, 0
5FE1 DD 75 EF    0 273 ld (ix-17), l
5FE4 DD 74 F0    0 274 ld (ix-16), h
5FE7 DD 6E FB    0 275 ld l, (ix-5)
5FEA DD 66 FC    0 276 ld h, (ix-4)
5FED 11 04 00    0 277 ld de, 4
5FF0 19          0 278 add hl, de
5FF1 DD 75 FB    0 279 ld (ix-5), l
5FF4 DD 74 FC    0 280 ld (ix-4), h
5FF7 DD 6E F3    0 281 ld l, (ix-13)
5FFA DD 66 F4    0 282 ld h, (ix-12)
5FFD 7D          0 283 ld a, l
5FFE F5          0 284 push af
5FFF DD 6E F1    0 285 ld l, (ix-15)
6002 DD 66 F2    0 286 ld h, (ix-14)
6005 7D          0 287 ld a, l
6006 CD 3F 65    0 288 call PLOT
6009 DD 6E EF    0 289 ld l, (ix-17)
600C DD 66 F0    0 290 ld h, (ix-16)
600F E5          0 291 push hl
6010 DD 6E F3    0 292 ld l, (ix-13)
6013 DD 66 F4    0 293 ld h, (ix-12)
6016 EB          0 294 ex de, hl
6017 E1          0 295 pop hl
6018 B7          0 296 or a
6019 ED 52       0 297 sbc hl, de
601B E5          0 298 push hl
601C 21 00 00    0 299 ld hl, 0
601F CD D2 66    0 300 call DRAW
6022 21 00 00    0 301 ld hl, 0
6025 E5          0 302 push hl
6026 DD 6E ED    0 303 ld l, (ix-19)
6029 DD 66 EE    0 304 ld h, (ix-18)
602C E5          0 305 push hl
602D DD 6E F1    0 306 ld l, (ix-15)
6030 DD 66 F2    0 307 ld h, (ix-14)
6033 EB          0 308 ex de, hl
6034 E1          0 309 pop hl
6035 B7          0 310 or a
6036 ED 52       0 311 sbc hl, de
6038 CD D2 66    0 312 call DRAW
603B DD 6E F3    0 313 ld l, (ix-13)
603E DD 66 F4    0 314 ld h, (ix-12)
6041 E5          0 315 push hl
6042 DD 6E EF    0 316 ld l, (ix-17)
6045 DD 66 F0    0 317 ld h, (ix-16)
6048 EB          0 318 ex de, hl
6049 E1          0 319 pop hl
604A B7          0 320 or a
604B ED 52       0 321 sbc hl, de
604D E5          0 322 push hl
604E 21 00 00    0 323 ld hl, 0
6051 CD D2 66    0 324 call DRAW
6054 21 00 00    0 325 ld hl, 0
6057 E5          0 326 push hl
6058 DD 6E F1    0 327 ld l, (ix-15)
605B DD 66 F2    0 328 ld h, (ix-14)
605E E5          0 329 push hl
605F DD 6E ED    0 330 ld l, (ix-19)
6062 DD 66 EE    0 331 ld h, (ix-18)
6065 EB          0 332 ex de, hl
6066 E1          0 333 pop hl
6067 B7          0 334 or a
6068 ED 52       0 335 sbc hl, de
606A CD D2 66    0 336 call DRAW
606D C3 17 63    0 337 jp __LABEL13
6070             0 338 __LABEL12:
6070 DD 7E FD    0 339 ld a, (ix-3)
6073 D6 CA       0 340 sub 202
6075 C2 D7 60    0 341 jp nz, __LABEL14
6078 DD 6E FB    0 342 ld l, (ix-5)
607B DD 66 FC    0 343 ld h, (ix-4)
607E 7E          0 344 ld a, (hl)
607F 6F          0 345 ld l, a
6080 26 00       0 346 ld h, 0
6082 DD 75 F1    0 347 ld (ix-15), l
6085 DD 74 F2    0 348 ld (ix-14), h
6088 DD 6E FB    0 349 ld l, (ix-5)
608B DD 66 FC    0 350 ld h, (ix-4)
608E 23          0 351 inc hl
608F 7E          0 352 ld a, (hl)
6090 6F          0 353 ld l, a
6091 26 00       0 354 ld h, 0
6093 DD 75 F3    0 355 ld (ix-13), l
6096 DD 74 F4    0 356 ld (ix-12), h
6099 DD 6E FB    0 357 ld l, (ix-5)
609C DD 66 FC    0 358 ld h, (ix-4)
609F 23          0 359 inc hl
60A0 23          0 360 inc hl
60A1 7E          0 361 ld a, (hl)
60A2 6F          0 362 ld l, a
60A3 26 00       0 363 ld h, 0
60A5 DD 75 EB    0 364 ld (ix-21), l
60A8 DD 74 EC    0 365 ld (ix-20), h
60AB DD 6E FB    0 366 ld l, (ix-5)
60AE DD 66 FC    0 367 ld h, (ix-4)
60B1 23          0 368 inc hl
60B2 23          0 369 inc hl
60B3 23          0 370 inc hl
60B4 DD 75 FB    0 371 ld (ix-5), l
60B7 DD 74 FC    0 372 ld (ix-4), h
60BA DD 6E F3    0 373 ld l, (ix-13)
60BD DD 66 F4    0 374 ld h, (ix-12)
60C0 7D          0 375 ld a, l
60C1 F5          0 376 push af
60C2 DD 6E F1    0 377 ld l, (ix-15)
60C5 DD 66 F2    0 378 ld h, (ix-14)
60C8 7D          0 379 ld a, l
60C9 F5          0 380 push af
60CA DD 6E EB    0 381 ld l, (ix-21)
60CD DD 66 EC    0 382 ld h, (ix-20)
60D0 7D          0 383 ld a, l
60D1 CD 7A 65    0 384 call CIRCLE
60D4 C3 17 63    0 385 jp __LABEL15
60D7             0 386 __LABEL14:
60D7 DD 7E FD    0 387 ld a, (ix-3)
60DA D6 CB       0 388 sub 203
60DC C2 77 62    0 389 jp nz, __LABEL16
60DF DD 6E FB    0 390 ld l, (ix-5)
60E2 DD 66 FC    0 391 ld h, (ix-4)
60E5 7E          0 392 ld a, (hl)
60E6 6F          0 393 ld l, a
60E7 26 00       0 394 ld h, 0
60E9 DD 75 F1    0 395 ld (ix-15), l
60EC DD 74 F2    0 396 ld (ix-14), h
60EF DD 6E FB    0 397 ld l, (ix-5)
60F2 DD 66 FC    0 398 ld h, (ix-4)
60F5 23          0 399 inc hl
60F6 7E          0 400 ld a, (hl)
60F7 6F          0 401 ld l, a
60F8 26 00       0 402 ld h, 0
60FA DD 75 F3    0 403 ld (ix-13), l
60FD DD 74 F4    0 404 ld (ix-12), h
6100 DD 6E FB    0 405 ld l, (ix-5)
6103 DD 66 FC    0 406 ld h, (ix-4)
6106 23          0 407 inc hl
6107 23          0 408 inc hl
6108 7E          0 409 ld a, (hl)
6109 6F          0 410 ld l, a
610A 26 00       0 411 ld h, 0
610C DD 75 ED    0 412 ld (ix-19), l
610F DD 74 EE    0 413 ld (ix-18), h
6112 DD 6E FB    0 414 ld l, (ix-5)
6115 DD 66 FC    0 415 ld h, (ix-4)
6118 23          0 416 inc hl
6119 23          0 417 inc hl
611A 23          0 418 inc hl
611B 7E          0 419 ld a, (hl)
611C 6F          0 420 ld l, a
611D 26 00       0 421 ld h, 0
611F DD 75 EF    0 422 ld (ix-17), l
6122 DD 74 F0    0 423 ld (ix-16), h
6125 DD 6E FB    0 424 ld l, (ix-5)
6128 DD 66 FC    0 425 ld h, (ix-4)
612B 11 04 00    0 426 ld de, 4
612E 19          0 427 add hl, de
612F 7E          0 428 ld a, (hl)
6130 6F          0 429 ld l, a
6131 26 00       0 430 ld h, 0
6133 DD 75 EB    0 431 ld (ix-21), l
6136 DD 74 EC    0 432 ld (ix-20), h
6139 DD 6E EB    0 433 ld l, (ix-21)
613C DD 66 EC    0 434 ld h, (ix-20)
613F 06 08       0 435 ld b, 8
6141             0 436 __LABEL34:
6141 29          0 437 add hl, hl
6142 10 FD       0 438 djnz __LABEL34
6144 DD 75 EB    0 439 ld (ix-21), l
6147 DD 74 EC    0 440 ld (ix-20), h
614A DD 6E EB    0 441 ld l, (ix-21)
614D DD 66 EC    0 442 ld h, (ix-20)
6150 E5          0 443 push hl
6151 DD 6E FB    0 444 ld l, (ix-5)
6154 DD 66 FC    0 445 ld h, (ix-4)
6157 11 05 00    0 446 ld de, 5
615A 19          0 447 add hl, de
615B 7E          0 448 ld a, (hl)
615C 6F          0 449 ld l, a
615D 26 00       0 450 ld h, 0
615F EB          0 451 ex de, hl
6160 E1          0 452 pop hl
6161 CD AE 64    0 453 call __BOR16
6164 DD 75 EB    0 454 ld (ix-21), l
6167 DD 74 EC    0 455 ld (ix-20), h
616A DD 6E FB    0 456 ld l, (ix-5)
616D DD 66 FC    0 457 ld h, (ix-4)
6170 11 06 00    0 458 ld de, 6
6173 19          0 459 add hl, de
6174 DD 75 FB    0 460 ld (ix-5), l
6177 DD 74 FC    0 461 ld (ix-4), h
617A DD 6E EB    0 462 ld l, (ix-21)
617D DD 66 EC    0 463 ld h, (ix-20)
6180 E5          0 464 push hl
6181 11 00 80    0 465 ld de, 32768
6184 E1          0 466 pop hl
6185 B7          0 467 or a
6186 ED 52       0 468 sbc hl, de
6188 3F          0 469 ccf
6189 D2 C3 61    0 470 jp nc, __LABEL18
618C DD 6E EB    0 471 ld l, (ix-21)
618F DD 66 EC    0 472 ld h, (ix-20)
6192 11 00 80    0 473 ld de, -32768
6195 19          0 474 add hl, de
6196 11 00 00    0 475 ld de, 0
6199 CD A7 6D    0 476 call __U32TOFREG
619C 21 E6 FF    0 477 ld hl, -26
619F CD 6F 6D    0 478 call __PSTOREF
61A2 DD E5       0 479 push ix
61A4 E1          0 480 pop hl
61A5 11 E6 FF    0 481 ld de, -26
61A8 19          0 482 add hl, de
61A9 CD 31 69    0 483 call __PLOADF
61AC C5          0 484 push bc
61AD D5          0 485 push de
61AE F5          0 486 push af
61AF 3E 84       0 487 ld a, 084h
61B1 11 20 00    0 488 ld de, 00020h
61B4 01 00 00    0 489 ld bc, 00000h
61B7 CD 53 66    0 490 call __DIVF
61BA 21 E6 FF    0 491 ld hl, -26
61BD CD 6F 6D    0 492 call __PSTOREF
61C0 C3 11 62    0 493 jp __LABEL19
61C3             0 494 __LABEL18:
61C3 DD 6E EB    0 495 ld l, (ix-21)
61C6 DD 66 EC    0 496 ld h, (ix-20)
61C9 11 00 00    0 497 ld de, 0
61CC CD A7 6D    0 498 call __U32TOFREG
61CF 21 E6 FF    0 499 ld hl, -26
61D2 CD 6F 6D    0 500 call __PSTOREF
61D5 DD E5       0 501 push ix
61D7 E1          0 502 pop hl
61D8 11 E6 FF    0 503 ld de, -26
61DB 19          0 504 add hl, de
61DC CD 31 69    0 505 call __PLOADF
61DF C5          0 506 push bc
61E0 D5          0 507 push de
61E1 F5          0 508 push af
61E2 3E 84       0 509 ld a, 084h
61E4 11 20 00    0 510 ld de, 00020h
61E7 01 00 00    0 511 ld bc, 00000h
61EA CD 53 66    0 512 call __DIVF
61ED 21 E6 FF    0 513 ld hl, -26
61F0 CD 6F 6D    0 514 call __PSTOREF
61F3 DD E5       0 515 push ix
61F5 E1          0 516 pop hl
61F6 11 E6 FF    0 517 ld de, -26
61F9 19          0 518 add hl, de
61FA CD 31 69    0 519 call __PLOADF
61FD C5          0 520 push bc
61FE D5          0 521 push de
61FF F5          0 522 push af
6200 3E 81       0 523 ld a, 081h
6202 11 80 00    0 524 ld de, 00080h
6205 01 00 00    0 525 ld bc, 00000h
6208 CD 1A 69    0 526 call __MULF
620B 21 E6 FF    0 527 ld hl, -26
620E CD 6F 6D    0 528 call __PSTOREF
6211             0 529 __LABEL19:
6211 DD E5       0 530 push ix
6213 E1          0 531 pop hl
6214 11 E6 FF    0 532 ld de, -26
6217 19          0 533 add hl, de
6218 CD 31 69    0 534 call __PLOADF
621B 21 35 12    0 535 ld hl, 01235h
621E E5          0 536 push hl
621F 21 0E FA    0 537 ld hl, 0FA0Eh
6222 E5          0 538 push hl
6223 26 7B       0 539 ld h, 07Bh
6225 E5          0 540 push hl
6226 CD 1A 69    0 541 call __MULF
6229 21 E6 FF    0 542 ld hl, -26
622C CD 6F 6D    0 543 call __PSTOREF
622F DD 6E F3    0 544 ld l, (ix-13)
6232 DD 66 F4    0 545 ld h, (ix-12)
6235 7D          0 546 ld a, l
6236 F5          0 547 push af
6237 DD 6E F1    0 548 ld l, (ix-15)
623A DD 66 F2    0 549 ld h, (ix-14)
623D 7D          0 550 ld a, l
623E CD 3F 65    0 551 call PLOT
6241 DD 6E EF    0 552 ld l, (ix-17)
6244 DD 66 F0    0 553 ld h, (ix-16)
6247 E5          0 554 push hl
6248 DD 6E F3    0 555 ld l, (ix-13)
624B DD 66 F4    0 556 ld h, (ix-12)
624E EB          0 557 ex de, hl
624F E1          0 558 pop hl
6250 B7          0 559 or a
6251 ED 52       0 560 sbc hl, de
6253 E5          0 561 push hl
6254 DD 6E ED    0 562 ld l, (ix-19)
6257 DD 66 EE    0 563 ld h, (ix-18)
625A E5          0 564 push hl
625B DD 6E F1    0 565 ld l, (ix-15)
625E DD 66 F2    0 566 ld h, (ix-14)
6261 EB          0 567 ex de, hl
6262 E1          0 568 pop hl
6263 B7          0 569 or a
6264 ED 52       0 570 sbc hl, de
6266 E5          0 571 push hl
6267 DD E5       0 572 push ix
6269 E1          0 573 pop hl
626A 11 E6 FF    0 574 ld de, -26
626D 19          0 575 add hl, de
626E CD 31 69    0 576 call __PLOADF
6271 CD EE 67    0 577 call DRAW3
6274 C3 17 63    0 578 jp __LABEL17
6277             0 579 __LABEL16:
6277 DD 7E FD    0 580 ld a, (ix-3)
627A D6 CC       0 581 sub 204
627C C2 C7 62    0 582 jp nz, __LABEL20
627F DD 6E FB    0 583 ld l, (ix-5)
6282 DD 66 FC    0 584 ld h, (ix-4)
6285 7E          0 585 ld a, (hl)
6286 6F          0 586 ld l, a
6287 26 00       0 587 ld h, 0
6289 DD 75 F1    0 588 ld (ix-15), l
628C DD 74 F2    0 589 ld (ix-14), h
628F DD 6E FB    0 590 ld l, (ix-5)
6292 DD 66 FC    0 591 ld h, (ix-4)
6295 23          0 592 inc hl
6296 7E          0 593 ld a, (hl)
6297 6F          0 594 ld l, a
6298 26 00       0 595 ld h, 0
629A DD 75 F3    0 596 ld (ix-13), l
629D DD 74 F4    0 597 ld (ix-12), h
62A0 DD 6E FB    0 598 ld l, (ix-5)
62A3 DD 66 FC    0 599 ld h, (ix-4)
62A6 23          0 600 inc hl
62A7 23          0 601 inc hl
62A8 DD 75 FB    0 602 ld (ix-5), l
62AB DD 74 FC    0 603 ld (ix-4), h
62AE 3A E1 6D    0 604 ld a, (_pattern.__DATA__ + 0)
62B1 F5          0 605 push af
62B2 DD 6E F1    0 606 ld l, (ix-15)
62B5 DD 66 F2    0 607 ld h, (ix-14)
62B8 7D          0 608 ld a, l
62B9 F5          0 609 push af
62BA DD 6E F3    0 610 ld l, (ix-13)
62BD DD 66 F4    0 611 ld h, (ix-12)
62C0 7D          0 612 ld a, l
62C1 CD 2B 64    0 613 call _FloodFill
62C4 C3 17 63    0 614 jp __LABEL21
62C7             0 615 __LABEL20:
62C7 DD 7E FD    0 616 ld a, (ix-3)
62CA D6 CD       0 617 sub 205
62CC C2 17 63    0 618 jp nz, __LABEL23
62CF DD 6E FB    0 619 ld l, (ix-5)
62D2 DD 66 FC    0 620 ld h, (ix-4)
62D5 7E          0 621 ld a, (hl)
62D6 6F          0 622 ld l, a
62D7 26 00       0 623 ld h, 0
62D9 DD 75 F1    0 624 ld (ix-15), l
62DC DD 74 F2    0 625 ld (ix-14), h
62DF DD 6E FB    0 626 ld l, (ix-5)
62E2 DD 66 FC    0 627 ld h, (ix-4)
62E5 23          0 628 inc hl
62E6 7E          0 629 ld a, (hl)
62E7 6F          0 630 ld l, a
62E8 26 00       0 631 ld h, 0
62EA DD 75 F3    0 632 ld (ix-13), l
62ED DD 74 F4    0 633 ld (ix-12), h
62F0 DD 6E FB    0 634 ld l, (ix-5)
62F3 DD 66 FC    0 635 ld h, (ix-4)
62F6 23          0 636 inc hl
62F7 23          0 637 inc hl
62F8 DD 75 FB    0 638 ld (ix-5), l
62FB DD 74 FC    0 639 ld (ix-4), h
62FE DD 6E F1    0 640 ld l, (ix-15)
6301 DD 66 F2    0 641 ld h, (ix-14)
6304 7D          0 642 ld a, l
6305 F5          0 643 push af
6306 DD 6E F3    0 644 ld l, (ix-13)
6309 DD 66 F4    0 645 ld h, (ix-12)
630C 7D          0 646 ld a, l
630D CD 80 6C    0 647 call PRINT_AT
6310 21 AB 64    0 648 ld hl, __LABEL24
6313 AF          0 649 xor a
6314 CD 36 6D    0 650 call __PRINTSTR
6317             0 651 __LABEL23:
6317             0 652 __LABEL21:
6317             0 653 __LABEL17:
6317             0 654 __LABEL15:
6317             0 655 __LABEL13:
6317             0 656 __LABEL5:
6317 C3 25 5E    0 657 jp __LABEL0
631A             0 658 __LABEL1:
631A             0 659 __LABEL25:
631A DD 6E F9    0 660 ld l, (ix-7)
631D DD 66 FA    0 661 ld h, (ix-6)
6320 E5          0 662 push hl
6321 11 00 5B    0 663 ld de, 23296
6324 E1          0 664 pop hl
6325 B7          0 665 or a
6326 ED 52       0 666 sbc hl, de
6328 D2 22 64    0 667 jp nc, __LABEL26
632B DD 6E FB    0 668 ld l, (ix-5)
632E DD 66 FC    0 669 ld h, (ix-4)
6331 7E          0 670 ld a, (hl)
6332 DD 77 FF    0 671 ld (ix-1), a
6335 DD 6E F9    0 672 ld l, (ix-7)
6338 DD 66 FA    0 673 ld h, (ix-6)
633B 23          0 674 inc hl
633C E5          0 675 push hl
633D 11 00 5B    0 676 ld de, 23296
6340 E1          0 677 pop hl
6341 B7          0 678 or a
6342 ED 52       0 679 sbc hl, de
6344 D2 F9 63    0 680 jp nc, __LABEL27
6347 DD 6E FB    0 681 ld l, (ix-5)
634A DD 66 FC    0 682 ld h, (ix-4)
634D 23          0 683 inc hl
634E 7E          0 684 ld a, (hl)
634F DD 77 FE    0 685 ld (ix-2), a
6352 DD 96 FF    0 686 sub (ix-1)
6355 C2 D0 63    0 687 jp nz, __LABEL29
6358 DD 6E FB    0 688 ld l, (ix-5)
635B DD 66 FC    0 689 ld h, (ix-4)
635E 23          0 690 inc hl
635F 23          0 691 inc hl
6360 7E          0 692 ld a, (hl)
6361 6F          0 693 ld l, a
6362 26 00       0 694 ld h, 0
6364 DD 75 F7    0 695 ld (ix-9), l
6367 DD 74 F8    0 696 ld (ix-8), h
636A DD 6E F7    0 697 ld l, (ix-9)
636D DD 66 F8    0 698 ld h, (ix-8)
6370 23          0 699 inc hl
6371 23          0 700 inc hl
6372 DD 75 F7    0 701 ld (ix-9), l
6375 DD 74 F8    0 702 ld (ix-8), h
6378 DD 6E F7    0 703 ld l, (ix-9)
637B DD 66 F8    0 704 ld h, (ix-8)
637E DD 75 F5    0 705 ld (ix-11), l
6381 DD 74 F6    0 706 ld (ix-10), h
6384             0 707 __LABEL31:
6384 DD 6E F7    0 708 ld l, (ix-9)
6387 DD 66 F8    0 709 ld h, (ix-8)
638A E5          0 710 push hl
638B 21 00 00    0 711 ld hl, 0
638E D1          0 712 pop de
638F B7          0 713 or a
6390 ED 52       0 714 sbc hl, de
6392 D2 BE 63    0 715 jp nc, __LABEL32
6395 DD 6E F9    0 716 ld l, (ix-7)
6398 DD 66 FA    0 717 ld h, (ix-6)
639B E5          0 718 push hl
639C DD 7E FF    0 719 ld a, (ix-1)
639F E1          0 720 pop hl
63A0 77          0 721 ld (hl), a
63A1 DD 6E F7    0 722 ld l, (ix-9)
63A4 DD 66 F8    0 723 ld h, (ix-8)
63A7 2B          0 724 dec hl
63A8 DD 75 F7    0 725 ld (ix-9), l
63AB DD 74 F8    0 726 ld (ix-8), h
63AE DD 6E F9    0 727 ld l, (ix-7)
63B1 DD 66 FA    0 728 ld h, (ix-6)
63B4 23          0 729 inc hl
63B5 DD 75 F9    0 730 ld (ix-7), l
63B8 DD 74 FA    0 731 ld (ix-6), h
63BB C3 84 63    0 732 jp __LABEL31
63BE             0 733 __LABEL32:
63BE DD 6E FB    0 734 ld l, (ix-5)
63C1 DD 66 FC    0 735 ld h, (ix-4)
63C4 23          0 736 inc hl
63C5 23          0 737 inc hl
63C6 23          0 738 inc hl
63C7 DD 75 FB    0 739 ld (ix-5), l
63CA DD 74 FC    0 740 ld (ix-4), h
63CD C3 F6 63    0 741 jp __LABEL30
63D0             0 742 __LABEL29:
63D0 DD 6E F9    0 743 ld l, (ix-7)
63D3 DD 66 FA    0 744 ld h, (ix-6)
63D6 E5          0 745 push hl
63D7 DD 7E FF    0 746 ld a, (ix-1)
63DA E1          0 747 pop hl
63DB 77          0 748 ld (hl), a
63DC DD 6E F9    0 749 ld l, (ix-7)
63DF DD 66 FA    0 750 ld h, (ix-6)
63E2 23          0 751 inc hl
63E3 DD 75 F9    0 752 ld (ix-7), l
63E6 DD 74 FA    0 753 ld (ix-6), h
63E9 DD 6E FB    0 754 ld l, (ix-5)
63EC DD 66 FC    0 755 ld h, (ix-4)
63EF 23          0 756 inc hl
63F0 DD 75 FB    0 757 ld (ix-5), l
63F3 DD 74 FC    0 758 ld (ix-4), h
63F6             0 759 __LABEL30:
63F6 C3 1F 64    0 760 jp __LABEL28
63F9             0 761 __LABEL27:
63F9 DD 6E F9    0 762 ld l, (ix-7)
63FC DD 66 FA    0 763 ld h, (ix-6)
63FF E5          0 764 push hl
6400 DD 7E FF    0 765 ld a, (ix-1)
6403 E1          0 766 pop hl
6404 77          0 767 ld (hl), a
6405 DD 6E F9    0 768 ld l, (ix-7)
6408 DD 66 FA    0 769 ld h, (ix-6)
640B 23          0 770 inc hl
640C DD 75 F9    0 771 ld (ix-7), l
640F DD 74 FA    0 772 ld (ix-6), h
6412 DD 6E FB    0 773 ld l, (ix-5)
6415 DD 66 FC    0 774 ld h, (ix-4)
6418 23          0 775 inc hl
6419 DD 75 FB    0 776 ld (ix-5), l
641C DD 74 FC    0 777 ld (ix-4), h
641F             0 778 __LABEL28:
641F C3 1A 63    0 779 jp __LABEL25
6422             0 780 __LABEL26:
6422             0 781 _Dibujar__leave:
6422 DD F9       0 782 ld sp, ix
6424 DD E1       0 783 pop ix
6426 D9          0 784 exx
6427 E1          0 785 pop hl
6428 E3          0 786 ex (sp), hl
6429 D9          0 787 exx
642A C9          0 788 ret
642B             0 789 _FloodFill:
642B 57          0 791 ld d, a
642C E1          0 792 pop hl
642D C1          0 793 pop bc
642E 58          0 794 ld e, b
642F C1          0 795 pop bc
6430 E5          0 796 push hl
6431 C5          0 797 push bc
6432             0 798 fill:
6432 2E FF       0 799 ld l,255
6434 E5          0 800 push hl
6435             0 801 nextrun:
6435 7A          0 802 ld a,d
6436 E6 07       0 803 and 7
6438 3C          0 804 inc a
6439 47          0 805 ld b,a
643A 3E 01       0 806 ld a,1
643C             0 807 bitpos:
643C 0F          0 808 rrca
643D 10 FD       0 809 djnz bitpos
643F 48          0 810 ld c,b
6440 47          0 811 ld b,a
6441             0 812 seekleft:
6441 7A          0 813 ld a,d
6442 B7          0 814 or a
6443 28 0D       0 815 jr z,goright
6445 15          0 816 dec d
6446 CB 00       0 817 rlc b
6448 CD 7F 64    0 818 call scrpos
644B 20 F4       0 819 jr nz,seekleft
644D             0 820 seekright:
644D CB 08       0 821 rrc b
644F 14          0 822 inc d
6450 28 26       0 823 jr z,rightedge
6452             0 824 goright:
6452 CD 7F 64    0 825 call scrpos
6455 28 21       0 826 jr z,rightedge
6457 D5          0 827 push de
6458 DD E1       0 828 pop ix
645A D1          0 829 pop de
645B D5          0 830 push de
645C F5          0 831 push af
645D 7C          0 832 ld a, h
645E E6 07       0 833 and 7
6460 E5          0 834 push hl
6461 6F          0 835 ld l, a
6462 67          0 836 ld h, a
6463 19          0 837 add hl, de
6464 7E          0 838 ld a, (hl)
6465 E1          0 839 pop hl
6466 D1          0 840 pop de
6467 A2          0 841 and a, d
6468 77          0 842 ld (hl), a
6469 DD E5       0 843 push ix
646B D1          0 844 pop de
646C 1C          0 845 inc e
646D CD 99 64    0 846 call checkadj
6470 1D          0 847 dec e
6471 1D          0 848 dec e
6472 CD 99 64    0 849 call checkadj
6475 1C          0 850 inc e
6476 18 D5       0 851 jr seekright
6478             0 852 rightedge:
6478 D1          0 853 pop de
6479 7B          0 854 ld a,e
647A 3C          0 855 inc a
647B 20 B8       0 856 jr nz,nextrun
647D C1          0 857 pop bc
647E C9          0 858 ret
647F             0 859 scrpos:
647F 7B          0 860 ld a,e
6480 E6 F8       0 861 and 248
6482 1F          0 862 rra
6483 37          0 863 scf
6484 1F          0 864 rra
6485 1F          0 865 rra
6486 6F          0 866 ld l,a
6487 AB          0 867 xor e
6488 E6 F8       0 868 and 248
648A AB          0 869 xor e
648B 67          0 870 ld h,a
648C 7D          0 871 ld a,l
648D AA          0 872 xor d
648E E6 07       0 873 and 7
6490 AA          0 874 xor d
6491 0F          0 875 rrca
6492 0F          0 876 rrca
6493 0F          0 877 rrca
6494 6F          0 878 ld l,a
6495 78          0 879 ld a,b
6496 B6          0 880 or (hl)
6497 BE          0 881 cp (hl)
6498 C9          0 882 ret
6499             0 883 checkadj:
6499 CB 21       0 884 sla c
649B 7B          0 885 ld a,e
649C FE C0       0 886 cp 192
649E D0          0 887 ret nc
649F CD 80 64    0 888 call scrpos+1
64A2 C8          0 889 ret z
64A3 0C          0 890 inc c
64A4 CB 51       0 891 bit 2,c
64A6 C0          0 892 ret nz
64A7 E1          0 893 pop hl
64A8 D5          0 894 push de
64A9 E9          0 895 jp (hl)
64AA             0 897 _FloodFill__leave:
64AA C9          0 898 ret
64AB             0 899 __LABEL24:
64AB 01 00       0 900 DEFW 0001h
64AD 20          0 901 DEFB 20h
64AE             0 904 ; vim:ts=4:et:
64AE             0 905 ; FASTCALL bitwise or 16 version.
64AE             0 906 ; result in HL
64AE             0 907 ; __FASTCALL__ version (operands: A, H)
64AE             0 908 ; Performs 16bit or 16bit and returns the boolean
64AE             0 909 ; Input: HL, DE
64AE             0 910 ; Output: HL <- HL OR DE
64AE             0 912 __BOR16:
64AE 7C          0 913 ld a, h
64AF B2          0 914 or d
64B0 67          0 915 ld h, a
64B1 7D          0 917 ld a, l
64B2 B3          0 918 or e
64B3 6F          0 919 ld l, a
64B4 C9          0 921 ret
64B5             0 926 ; Bresenham's like circle algorithm
64B5             0 927 ; best known as Middle Point Circle drawing algorithm
64B5             0 931 ; Simple error control routines
64B5             0 932 ; vim:ts=4:et:
64B5             0 934 ERR_NR    EQU    23610    ; Error code system variable
64B5             0 937 ; Error code definitions (as in ZX spectrum manual)
64B5             0 939 ; Set error code with:
64B5             0 940 ;    ld a, ERROR_CODE
64B5             0 941 ;    ld (ERR_NR), a
64B5             0 944 ERROR_Ok                EQU    -1
64B5             0 945 ERROR_SubscriptWrong    EQU     2
64B5             0 946 ERROR_OutOfMemory       EQU     3
64B5             0 947 ERROR_OutOfScreen       EQU     4
64B5             0 948 ERROR_NumberTooBig      EQU     5
64B5             0 949 ERROR_InvalidArg        EQU     9
64B5             0 950 ERROR_IntOutOfRange     EQU    10
64B5             0 951 ERROR_NonsenseInBasic   EQU    11
64B5             0 952 ERROR_InvalidFileName   EQU    14
64B5             0 953 ERROR_InvalidColour     EQU    19
64B5             0 954 ERROR_BreakIntoProgram  EQU    20
64B5             0 955 ERROR_TapeLoadingErr    EQU    26
64B5             0 958 ; Raises error using RST #8
64B5             0 959 __ERROR:
64B5 32 B9 64    0 960 ld (__ERROR_CODE), a
64B8 CF          0 961 rst 8
64B9             0 962 __ERROR_CODE:
64B9 00          0 963 nop
64BA C9          0 964 ret
64BB             0 966 ; Sets the error system variable, but keeps running.
64BB             0 967 ; Usually this instruction if followed by the END intermediate instruction.
64BB             0 968 __STOP:
64BB 32 3A 5C    0 969 ld (ERR_NR), a
64BE C9          0 970 ret
64BF             0 974 ; MIXED __FASTCAL__ / __CALLE__ PLOT Function
64BF             0 975 ; Plots a point into the screen calling the ZX ROM PLOT routine
64BF             0 977 ; Y in A (accumulator)
64BF             0 978 ; X in top of the stack
64BF             0 985 ; Printing positioning library.
64BF             0 989 __LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
64BF ED 5B 88 5C 0 990 ld de, (S_POSN)
64C3 2A 82 5C    0 991 ld hl, (MAXX)
64C6 B7          0 992 or a
64C7 ED 52       0 993 sbc hl, de
64C9 EB          0 994 ex de, hl
64CA C9          0 995 ret
64CB             0 998 __SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
64CB 2A 82 5C    0 999 ld hl, (MAXX)
64CE B7          0 1000 or a
64CF ED 52       0 1001 sbc hl, de
64D1 22 88 5C    0 1002 ld (S_POSN), hl ; saves it again
64D4 C9          0 1003 ret
64D5             0 1006 ECHO_E	EQU 23682
64D5             0 1007 MAXX	EQU ECHO_E   ; Max X position + 1
64D5             0 1008 MAXY	EQU MAXX + 1 ; Max Y position + 1
64D5             0 1010 S_POSN	EQU 23688
64D5             0 1011 POSX	EQU S_POSN		; Current POS X
64D5             0 1012 POSY	EQU S_POSN + 1	; Current POS Y
64D5             0 1019 __IN_SCREEN:
64D5             0 1020 ; Returns NO carry if current coords (D, E)
64D5             0 1021 ; are OUT of the screen limits (MAXX, MAXY)
64D5 21 82 5C    0 1026 ld hl, MAXX
64D8 7B          0 1027 ld a, e
64D9 BE          0 1028 cp (hl)
64DA 30 04       0 1029 jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
64DC 7A          0 1031 ld a, d
64DD 23          0 1032 inc hl
64DE BE          0 1033 cp (hl)
64DF             0 1034 ;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
64DF             0 1035 ;; ret
64DF D8          0 1036 ret c                       ; Return if carry (OK)
64E0             0 1038 __IN_SCREEN_ERR:
64E0             0 1039 __OUT_OF_SCREEN_ERR:
64E0             0 1040 ; Jumps here if out of screen
64E0 3E 04       0 1041 ld a, ERROR_OutOfScreen
64E2 C3 BB 64    0 1042 jp __STOP   ; Saves error code and exits
64E5             0 1048 ; JUMPS directly to spectrum CLS
64E5             0 1049 ; This routine does not clear lower screen
64E5             0 1051 ;CLS	EQU	0DAFh
64E5             0 1053 ; Our faster implementation
64E5             0 1057 CLS:
64E5 21 00 00    0 1065 ld hl, 0
64E8 22 7D 5C    0 1066 ld (COORDS), hl
64EB 21 21 18    0 1067 ld hl, 1821h
64EE 22 88 5C    0 1068 ld (S_POSN), hl
64F1             0 1069 __CLS_SCR:
64F1 21 00 40    0 1070 ld hl, SCREEN
64F4 36 00       0 1071 ld (hl), 0
64F6 54          0 1072 ld d, h
64F7 5D          0 1073 ld e, l
64F8 13          0 1074 inc de
64F9 01 00 18    0 1075 ld bc, 6144
64FC ED B0       0 1076 ldir
64FE             0 1078 ; Now clear attributes
64FE 3A 8D 5C    0 1080 ld a, (ATTR_P)
6501 77          0 1081 ld (hl), a
6502 01 FF 02    0 1082 ld bc, 767
6505 ED B0       0 1083 ldir
6507 C9          0 1084 ret
6508             0 1086 COORDS	EQU	23677
6508             0 1087 SCREEN	EQU 16384 ; Default start of the screen (can be changed)
6508             0 1088 ATTR_P	EQU 23693
6508             0 1089 ;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address
6508             0 1091 SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
6508             0 1092 ; to get the start of the screen
6508             0 1098 ; Attribute routines
6508             0 1099 ; vim:ts=4:et:sw:
6508             0 1106 ; Global constants
6508             0 1108 P_FLAG	EQU 23697
6508             0 1109 FLAGS2	EQU 23681
6508             0 1110 ATTR_P	EQU 23693	; permanet ATTRIBUTES
6508             0 1111 ATTR_T	EQU 23695	; temporary ATTRIBUTES
6508             0 1112 CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
6508             0 1113 UDG	EQU 23675 ; Pointer to UDG Charset
6508             0 1114 MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars
6508             0 1119 __ATTR_ADDR:
6508             0 1120 ; calc start address in DE (as (32 * d) + e)
6508             0 1121 ; Contributed by Santiago Romero at http://www.speccy.org
6508 26 00       0 1122 ld h, 0                     ;  7 T-States
650A 7A          0 1123 ld a, d                     ;  4 T-States
650B 87          0 1124 add a, a     ; a * 2        ;  4 T-States
650C 87          0 1125 add a, a     ; a * 4        ;  4 T-States
650D 6F          0 1126 ld l, a      ; HL = A * 4   ;  4 T-States
650E 29          0 1128 add hl, hl   ; HL = A * 8   ; 15 T-States
650F 29          0 1129 add hl, hl   ; HL = A * 16  ; 15 T-States
6510 29          0 1130 add hl, hl   ; HL = A * 32  ; 15 T-States
6511 16 18       0 1132 ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
6513 19          0 1133 add hl, de
6514 ED 5B F2 64 0 1135 ld de, (SCREEN_ADDR)    ; Adds the screen address
6518 19          0 1136 add hl, de
6519             0 1138 ; Return current screen address in HL
6519 C9          0 1139 ret
651A             0 1142 ; Sets the attribute at a given screen coordinate (D, E).
651A             0 1143 ; The attribute is taken from the ATTR_T memory variable
651A             0 1144 ; Used by PRINT routines
651A             0 1145 SET_ATTR:
651A             0 1147 ; Checks for valid coords
651A CD D5 64    0 1148 call __IN_SCREEN
651D D0          0 1149 ret nc
651E             0 1151 __SET_ATTR:
651E             0 1152 ; Internal __FASTCALL__ Entry used by printing routines
651E CD 08 65    0 1155 call __ATTR_ADDR
6521             0 1157 __SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
6521 ED 5B 8F 5C 0 1158 ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T
6525 7A          0 1160 ld a, d
6526 A6          0 1161 and (hl)
6527 4F          0 1162 ld c, a    ; C = current screen color, masked
6528 7A          0 1164 ld a, d
6529 2F          0 1165 cpl        ; Negate mask
652A A3          0 1166 and e    ; Mask current attributes
652B B1          0 1167 or c    ; Mix them
652C 77          0 1168 ld (hl), a ; Store result in screen
652D C9          0 1170 ret
652E             0 1175 ; Sets the attribute at a given screen pixel address in hl
652E             0 1176 ; HL contains the address in RAM for a given pixel (not a coordinate)
652E             0 1177 SET_PIXEL_ADDR_ATTR:
652E             0 1178 ;; gets ATTR position with offset given in SCREEN_ADDR
652E 7C          0 1179 ld a, h
652F 0F          0 1180 rrca
6530 0F          0 1181 rrca
6531 0F          0 1182 rrca
6532 E6 03       0 1183 and 3
6534 F6 18       0 1184 or 18h
6536 67          0 1185 ld h, a
6537 ED 5B F2 64 0 1186 ld de, (SCREEN_ADDR)
653B 19          0 1187 add hl, de  ;; Final screen addr
653C C3 21 65    0 1188 jp __SET_ATTR2
653F             0 1191 PLOT:
653F             0 1201 P_FLAG EQU 23697
653F E1          0 1203 pop hl
6540 E3          0 1204 ex (sp), hl ; Callee
6541 47          0 1206 ld b, a
6542 4C          0 1207 ld c, h
6543 3E BF       0 1209 ld a, 191
6545 B8          0 1210 cp b
6546 38 2C       0 1211 jr c, __PLOT_ERR ; jr is faster here (#1)
6548             0 1213 __PLOT:			; __FASTCALL__ entry (b, c) = pixel coords (y, x)
6548 ED 43 7D 5C 0 1214 ld (COORDS), bc	; Saves current point
654C 3E BF       0 1215 ld a, 191 ; Max y coord
654E CD AC 22    0 1216 call PIXEL_ADDR
6551 CB B4       0 1217 res 6, h    ; Starts from 0
6553 ED 4B F2 64 0 1218 ld bc, (SCREEN_ADDR)
6557 09          0 1219 add hl, bc  ; Now current offset
6558 47          0 1221 ld b, a
6559 04          0 1222 inc b
655A 3E FE       0 1223 ld a, 0FEh
655C             0 1225 __PLOT_LOOP:
655C 0F          0 1226 rrca
655D 10 FD       0 1227 djnz __PLOT_LOOP
655F 47          0 1229 ld b, a
6560 3A 91 5C    0 1230 ld a, (P_FLAG)
6563 4F          0 1231 ld c, a
6564 7E          0 1232 ld a, (hl)
6565 CB 41       0 1233 bit 0, c        ; is it OVER 1
6567 20 01       0 1234 jr nz, __PLOT_OVER1
6569 A0          0 1235 and b
656A             0 1237 __PLOT_OVER1:
656A CB 51       0 1238 bit 2, c        ; is it inverse 1
656C 20 02       0 1239 jr nz, __PLOT_END
656E A8          0 1241 xor b
656F 2F          0 1242 cpl
6570             0 1245 __PLOT_END:
6570 77          0 1246 ld (hl), a
6571 C3 2E 65    0 1247 jp SET_PIXEL_ADDR_ATTR
6574             0 1249 __PLOT_ERR:
6574 C3 E0 64    0 1250 jp __OUT_OF_SCREEN_ERR ; Spent 3 bytes, but saves 3 T-States at (#1)
6577             0 1252 PLOT_SUB EQU 22ECh
6577             0 1253 PIXEL_ADDR EQU 22ACh
6577             0 1254 COORDS EQU 5C7Dh
6577             0 1259 ; Draws a circle at X, Y of radius R
6577             0 1260 ; X, Y on the Stack, R in accumulator (Byte)
6577             0 1267 __CIRCLE_ERROR:
6577 C3 E0 64    0 1268 jp __OUT_OF_SCREEN_ERR
657A             0 1269 ;; __CIRCLE_ERROR EQU __OUT_OF_SCREEN_ERR
657A             0 1270 ;; __CIRCLE_ERROR:
657A             0 1271 ;; 		; Jumps here if out of screen
657A             0 1272 ;; 		scf ; Always sets carry Flag
657A             0 1273 ;;
657A             0 1274 ;; 		ld a, ERROR_OutOfScreen
657A             0 1275 ;; 		ld (ERR_NR), a
657A             0 1276 ;; 		ret
657A             0 1277 CIRCLE:
657A             0 1278 ;; Entry point
657A E1          0 1279 pop hl	; Return Address
657B D1          0 1280 pop de	; D = Y
657C E3          0 1281 ex (sp), hl ; __CALLEE__ convention
657D 5C          0 1282 ld e, h ; E = X
657E 67          0 1285 ld h, a ; H = R
657F 82          0 1286 add a, d
6580 D6 C0       0 1287 sub 192
6582 30 F3       0 1288 jr nc, __CIRCLE_ERROR
6584 7A          0 1290 ld a, d
6585 94          0 1291 sub h
6586 38 EF       0 1292 jr c, __CIRCLE_ERROR
6588 7B          0 1294 ld a, e
6589 94          0 1295 sub h
658A 38 EB       0 1296 jr c, __CIRCLE_ERROR
658C 7C          0 1298 ld a, h
658D 83          0 1299 add a, e
658E 38 E7       0 1300 jr c, __CIRCLE_ERROR
6590             0 1303 ; __FASTCALL__ Entry: D, E = Y, X point of the center
6590             0 1304 ; A = Radious
6590             0 1305 __CIRCLE:
6590 D5          0 1306 push de
6591 7C          0 1307 ld a, h
6592 D9          0 1308 exx
6593 D1          0 1309 pop de		; D'E' = x0, y0
6594 67          0 1310 ld h, a		; H' = r
6595 4B          0 1312 ld c, e
6596 7C          0 1313 ld a, h
6597 82          0 1314 add a, d
6598 47          0 1315 ld b, a
6599 CD 2F 66    0 1316 call __CIRCLE_PLOT	; PLOT (x0, y0 + r)
659C 42          0 1318 ld b, d
659D 7C          0 1319 ld a, h
659E 83          0 1320 add a, e
659F 4F          0 1321 ld c, a
65A0 CD 2F 66    0 1322 call __CIRCLE_PLOT	; PLOT (x0 + r, y0)
65A3 4B          0 1324 ld c, e
65A4 7A          0 1325 ld a, d
65A5 94          0 1326 sub h
65A6 47          0 1327 ld b, a
65A7 CD 2F 66    0 1328 call __CIRCLE_PLOT ; PLOT (x0, y0 - r)
65AA 42          0 1330 ld b, d
65AB 7B          0 1331 ld a, e
65AC 94          0 1332 sub h
65AD 4F          0 1333 ld c, a
65AE CD 2F 66    0 1334 call __CIRCLE_PLOT ; PLOT (x0 - r, y0)
65B1 D9          0 1336 exx
65B2 06 00       0 1337 ld b, 0		; B = x = 0
65B4 4C          0 1338 ld c, h		; C = y = Radius
65B5 21 01 00    0 1339 ld hl, 1
65B8 B7          0 1340 or a
65B9 ED 42       0 1341 sbc hl, bc	; HL = f = 1 - radius
65BB EB          0 1343 ex de, hl
65BC 21 00 00    0 1344 ld hl, 0
65BF B7          0 1345 or a
65C0 ED 42       0 1346 sbc hl, bc  ; HL = -radius
65C2 29          0 1347 add hl, hl	; HL = -2 * radius
65C3 EB          0 1348 ex de, hl	; DE = -2 * radius = ddF_y, HL = f
65C4 AF          0 1350 xor a		; A = ddF_x = 0
65C5 08          0 1351 ex af, af'	; Saves it
65C6             0 1353 __CIRCLE_LOOP:
65C6 78          0 1354 ld a, b
65C7 B9          0 1355 cp c
65C8 D0          0 1356 ret nc		; Returns when x >= y
65C9 CB 7C       0 1358 bit 7, h	; HL >= 0? : if (f >= 0)...
65CB C2 D2 65    0 1359 jp nz, __CIRCLE_NEXT
65CE 0D          0 1361 dec c		; y--
65CF 13          0 1362 inc de
65D0 13          0 1363 inc de		; ddF_y += 2
65D1 19          0 1365 add hl, de	; f += ddF_y
65D2             0 1367 __CIRCLE_NEXT:
65D2 04          0 1368 inc b		; x++
65D3 08          0 1369 ex af, af'
65D4 C6 02       0 1370 add a, 2	; 1 Cycle faster than inc a, inc a
65D6 23          0 1372 inc hl		; f++
65D7 F5          0 1373 push af
65D8 85          0 1374 add a, l
65D9 6F          0 1375 ld l, a
65DA 7C          0 1376 ld a, h
65DB CE 00       0 1377 adc a, 0	; f = f + ddF_x
65DD 67          0 1378 ld h, a
65DE F1          0 1379 pop af
65DF 08          0 1380 ex af, af'
65E0 C5          0 1382 push bc
65E1 D9          0 1383 exx
65E2 E1          0 1384 pop hl		; H'L' = Y, X
65E3 7A          0 1386 ld a, d
65E4 84          0 1387 add a, h
65E5 47          0 1388 ld b, a		; B = y0 + y
65E6 7B          0 1389 ld a, e
65E7 85          0 1390 add a, l
65E8 4F          0 1391 ld c, a		; C = x0 + x
65E9 CD 2F 66    0 1392 call __CIRCLE_PLOT ; plot(x0 + x, y0 + y)
65EC 7A          0 1394 ld a, d
65ED 84          0 1395 add a, h
65EE 47          0 1396 ld b, a		; B = y0 + y
65EF 7B          0 1397 ld a, e
65F0 95          0 1398 sub l
65F1 4F          0 1399 ld c, a		; C = x0 - x
65F2 CD 2F 66    0 1400 call __CIRCLE_PLOT ; plot(x0 - x, y0 + y)
65F5 7A          0 1402 ld a, d
65F6 94          0 1403 sub h
65F7 47          0 1404 ld b, a		; B = y0 - y
65F8 7B          0 1405 ld a, e
65F9 85          0 1406 add a, l
65FA 4F          0 1407 ld c, a		; C = x0 + x
65FB CD 2F 66    0 1408 call __CIRCLE_PLOT ; plot(x0 + x, y0 - y)
65FE 7A          0 1410 ld a, d
65FF 94          0 1411 sub h
6600 47          0 1412 ld b, a		; B = y0 - y
6601 7B          0 1413 ld a, e
6602 95          0 1414 sub l
6603 4F          0 1415 ld c, a		; C = x0 - x
6604 CD 2F 66    0 1416 call __CIRCLE_PLOT ; plot(x0 - x, y0 - y)
6607 7A          0 1418 ld a, d
6608 85          0 1419 add a, l
6609 47          0 1420 ld b, a		; B = y0 + x
660A 7B          0 1421 ld a, e
660B 84          0 1422 add a, h
660C 4F          0 1423 ld c, a		; C = x0 + y
660D CD 2F 66    0 1424 call __CIRCLE_PLOT ; plot(x0 + y, y0 + x)
6610 7A          0 1426 ld a, d
6611 85          0 1427 add a, l
6612 47          0 1428 ld b, a		; B = y0 + x
6613 7B          0 1429 ld a, e
6614 94          0 1430 sub h
6615 4F          0 1431 ld c, a		; C = x0 - y
6616 CD 2F 66    0 1432 call __CIRCLE_PLOT ; plot(x0 - y, y0 + x)
6619 7A          0 1434 ld a, d
661A 95          0 1435 sub l
661B 47          0 1436 ld b, a		; B = y0 - x
661C 7B          0 1437 ld a, e
661D 84          0 1438 add a, h
661E 4F          0 1439 ld c, a		; C = x0 + y
661F CD 2F 66    0 1440 call __CIRCLE_PLOT ; plot(x0 + y, y0 - x)
6622 7A          0 1442 ld a, d
6623 95          0 1443 sub l
6624 47          0 1444 ld b, a		; B = y0 - x
6625 7B          0 1445 ld a, e
6626 94          0 1446 sub h
6627 4F          0 1447 ld c, a		; C = x0 + y
6628 CD 2F 66    0 1448 call __CIRCLE_PLOT ; plot(x0 - y, y0 - x)
662B D9          0 1450 exx
662C C3 C6 65    0 1451 jp __CIRCLE_LOOP
662F             0 1455 __CIRCLE_PLOT:
662F             0 1456 ; Plots a point of the circle, preserving HL and DE
662F E5          0 1457 push hl
6630 D5          0 1458 push de
6631 CD 48 65    0 1459 call __PLOT
6634 D1          0 1460 pop de
6635 E1          0 1461 pop hl
6636 C9          0 1462 ret
6637             0 1470 ; -------------------------------------------------------------
6637             0 1471 ; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
6637             0 1472 ; -------------------------------------------------------------
6637             0 1475 __FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
6637             0 1476 __FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)
6637             0 1478 __FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
6637             0 1479 ; Second argument to push into the stack calculator is popped out of the stack
6637             0 1480 ; Since the caller routine also receives the parameters into the top of the stack
6637             0 1481 ; four bytes must be removed from SP before pop them out
6637 CD B6 2A    0 1483 call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
663A D9          0 1484 exx
663B E1          0 1485 pop hl       ; Caller-Caller return addr
663C D9          0 1486 exx
663D E1          0 1487 pop hl       ; Caller return addr
663E F1          0 1489 pop af
663F D1          0 1490 pop de
6640 C1          0 1491 pop bc
6641 E5          0 1493 push hl      ; Caller return addr
6642 D9          0 1494 exx
6643 E5          0 1495 push hl      ; Caller-Caller return addr
6644 D9          0 1496 exx
6645 C3 B6 2A    0 1498 jp __FPSTACK_PUSH
6648             0 1501 __FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
6648             0 1502 ; This format is specified in the ZX 48K Manual
6648             0 1503 ; You can push a 16 bit signed integer as
6648             0 1504 ; 0 SS LL HH 0, being SS the sign and LL HH the low
6648             0 1505 ; and High byte respectively
6648 7C          0 1506 ld a, h
6649 17          0 1507 rla			; sign to Carry
664A 9F          0 1508 sbc	a, a	; 0 if positive, FF if negative
664B 5F          0 1509 ld e, a
664C 55          0 1510 ld d, l
664D 4C          0 1511 ld c, h
664E AF          0 1512 xor a
664F 47          0 1513 ld b, a
6650 C3 B6 2A    0 1514 jp __FPSTACK_PUSH
6653             0 1518 ; -------------------------------------------------------------
6653             0 1519 ; Floating point library using the FP ROM Calculator (ZX 48K)
6653             0 1521 ; All of them uses C EDHL registers as 1st paramter.
6653             0 1522 ; For binary operators, the 2n operator must be pushed into the
6653             0 1523 ; stack, in the order BC DE HL (B not used).
6653             0 1524 ;
6653             0 1525 ; Uses CALLEE convention
6653             0 1526 ; -------------------------------------------------------------
6653             0 1528 __DIVF:	; Division
6653             0 1533 TMP         EQU 23629 ;(DEST)
6653             0 1534 ERR_SP      EQU 23613
6653 CD 37 66    0 1536 call __FPSTACK_PUSH2
6656 2A 3D 5C    0 1538 ld hl, (ERR_SP)
6659 22 4D 5C    0 1539 ld (TMP), hl
665C 21 75 66    0 1540 ld hl, __DIVBYZERO
665F E5          0 1541 push hl
6660 21 00 00    0 1542 ld hl, 0
6663 39          0 1543 add hl, sp
6664 22 3D 5C    0 1544 ld (ERR_SP), hl
6667             0 1546 ; ------------- ROM DIV
6667 EF          0 1547 rst 28h
6668 01          0 1548 defb 01h	; EXCHANGE
6669 05          0 1549 defb 05h	; DIV
666A 38          0 1550 defb 38h;   ; END CALC
666B E1          0 1552 pop hl
666C 2A 4D 5C    0 1553 ld hl, (TMP)
666F 22 3D 5C    0 1554 ld (ERR_SP), hl
6672 C3 F1 2B    0 1556 jp __FPSTACK_POP
6675             0 1558 __DIVBYZERO:
6675 2A 4D 5C    0 1559 ld hl, (TMP)
6678 22 3D 5C    0 1560 ld (ERR_SP), hl
667B 3E 05       0 1562 ld a, ERROR_NumberTooBig
667D 32 3A 5C    0 1563 ld (ERR_NR), a
6680             0 1565 ; Returns 0 on DIV BY ZERO error
6680 AF          0 1566 xor a
6681 47          0 1567 ld b, a
6682 4F          0 1568 ld c, a
6683 57          0 1569 ld d, a
6684 5F          0 1570 ld e, a
6685 C9          0 1571 ret
6686             0 1578 ; DRAW using bresenhams algorithm and screen positioning
6686             0 1579 ; Copyleft (k) 2010 by J. Rodriguez (a.k.a. Boriel) http://www.boriel.com
6686             0 1580 ; vim:ts=4:et:sw=4:
6686             0 1582 ; Y parameter in A
6686             0 1583 ; X parameter in high byte on top of the stack
6686             0 1593 ;
6686             0 1594 ; PixelDown
6686             0 1595 ; Alvin Albrecht 2002
6686             0 1596 ;
6686             0 1598 ; Pixel Down
6686             0 1599 ;
6686             0 1600 ; Adjusts screen address HL to move one pixel down in the display.
6686             0 1601 ; (0,0) is located at the top left corner of the screen.
6686             0 1602 ;
6686             0 1603 ; enter: HL = valid screen address
6686             0 1604 ; exit : Carry = moved off screen
6686             0 1605 ;        Carry'= moved off current cell (needs ATTR update)
6686             0 1606 ;        HL = moves one pixel down
6686             0 1607 ; used : AF, HL
6686             0 1609 SP.PixelDown:
6686 24          0 1610 inc h
6687 7C          0 1611 ld a,h
6688 E6 07       0 1612 and $07
668A C0          0 1613 ret nz
668B 08          0 1614 ex af, af'  ; Sets carry on F'
668C 37          0 1615 scf         ; which flags ATTR must be updated
668D 08          0 1616 ex af, af'
668E 7C          0 1617 ld a,h
668F D6 08       0 1618 sub $08
6691 67          0 1619 ld h,a
6692 7D          0 1620 ld a,l
6693 C6 20       0 1621 add a,$20
6695 6F          0 1622 ld l,a
6696 D0          0 1623 ret nc
6697 7C          0 1624 ld a,h
6698 C6 08       0 1625 add a,$08
669A 67          0 1626 ld h,a
669B             0 1627 ;IF DISP_HIRES
669B             0 1628 ;   and $18
669B             0 1629 ;   cp $18
669B             0 1630 ;ELSE
669B FE 58       0 1631 cp $58
669D             0 1632 ;ENDIF
669D 3F          0 1633 ccf
669E C9          0 1634 ret
669F             0 1638 ;
669F             0 1639 ; PixelUp
669F             0 1640 ; Alvin Albrecht 2002
669F             0 1641 ;
669F             0 1643 ; Pixel Up
669F             0 1644 ;
669F             0 1645 ; Adjusts screen address HL to move one pixel up in the display.
669F             0 1646 ; (0,0) is located at the top left corner of the screen.
669F             0 1647 ;
669F             0 1648 ; enter: HL = valid screen address
669F             0 1649 ; exit : Carry = moved off screen
669F             0 1650 ;        HL = moves one pixel up
669F             0 1651 ; used : AF, HL
669F             0 1653 SP.PixelUp:
669F 7C          0 1654 ld a,h
66A0 25          0 1655 dec h
66A1 E6 07       0 1656 and $07
66A3 C0          0 1657 ret nz
66A4 08          0 1658 ex af, af'
66A5 37          0 1659 scf
66A6 08          0 1660 ex af, af'
66A7 3E 08       0 1661 ld a,$08
66A9 84          0 1662 add a,h
66AA 67          0 1663 ld h,a
66AB 7D          0 1664 ld a,l
66AC D6 20       0 1665 sub $20
66AE 6F          0 1666 ld l,a
66AF D0          0 1667 ret nc
66B0 7C          0 1668 ld a,h
66B1 D6 08       0 1669 sub $08
66B3 67          0 1670 ld h,a
66B4             0 1671 ;IF DISP_HIRES
66B4             0 1672 ;   and $18
66B4             0 1673 ;   cp $18
66B4             0 1674 ;   ccf
66B4             0 1675 ;ELSE
66B4 FE 40       0 1676 cp $40
66B6             0 1677 ;ENDIF
66B6 C9          0 1678 ret
66B7             0 1682 ;
66B7             0 1683 ; PixelLeft
66B7             0 1684 ; Jose Rodriguez 2012
66B7             0 1685 ;
66B7             0 1687 ; PixelLeft
66B7             0 1688 ;
66B7             0 1689 ; Adjusts screen address HL and Pixel bit A to move one pixel to the left
66B7             0 1690 ; on the display.  Start of line set Carry (Out of Screen)
66B7             0 1691 ;
66B7             0 1692 ; enter: HL = valid screen address
66B7             0 1693 ;        A = Bit Set
66B7             0 1694 ; exit : Carry = moved off screen
66B7             0 1695 ;        Carry' Set if moved off current ATTR CELL
66B7             0 1696 ;        HL = moves one character left, if needed
66B7             0 1697 ;        A = Bit Set with new pixel pos.
66B7             0 1698 ; used : AF, HL
66B7             0 1701 SP.PixelLeft:
66B7 07          0 1702 rlca    ; Sets new pixel bit 1 to the right
66B8 D0          0 1703 ret nc
66B9 08          0 1704 ex af, af' ; Signal in C' we've moved off current ATTR cell
66BA 7D          0 1705 ld a,l
66BB 3D          0 1706 dec a
66BC 6F          0 1707 ld l,a
66BD FE 20       0 1708 cp 32      ; Carry if in screen
66BF 3F          0 1709 ccf
66C0 3E 01       0 1710 ld a, 1
66C2 C9          0 1711 ret
66C3             0 1716 ;
66C3             0 1717 ; PixelRight
66C3             0 1718 ; Jose Rodriguez 2012
66C3             0 1719 ;
66C3             0 1722 ; PixelRight
66C3             0 1723 ;
66C3             0 1724 ; Adjusts screen address HL and Pixel bit A to move one pixel to the left
66C3             0 1725 ; on the display.  Start of line set Carry (Out of Screen)
66C3             0 1726 ;
66C3             0 1727 ; enter: HL = valid screen address
66C3             0 1728 ;        A = Bit Set
66C3             0 1729 ; exit : Carry = moved off screen
66C3             0 1730 ;        Carry' Set if moved off current ATTR CELL
66C3             0 1731 ;        HL = moves one character left, if needed
66C3             0 1732 ;        A = Bit Set with new pixel pos.
66C3             0 1733 ; used : AF, HL
66C3             0 1736 SP.PixelRight:
66C3 0F          0 1737 rrca    ; Sets new pixel bit 1 to the right
66C4 D0          0 1738 ret nc
66C5 08          0 1739 ex af, af' ; Signal in C' we've moved off current ATTR cell
66C6 7D          0 1740 ld a, l
66C7 3C          0 1741 inc a
66C8 6F          0 1742 ld l, a
66C9 FE 20       0 1743 cp 32      ; Carry if IN screen
66CB 3F          0 1744 ccf
66CC 3E 80       0 1745 ld a, 80h
66CE C9          0 1746 ret
66CF             0 1750 ;; DRAW PROCEDURE
66CF             0 1763 P_FLAG EQU 23697
66CF             0 1765 __DRAW_ERROR:
66CF C3 E0 64    0 1766 jp __OUT_OF_SCREEN_ERR
66D2             0 1768 DRAW:
66D2             0 1769 ;; ENTRY POINT
66D2 EB          0 1774 ex de, hl ; DE = Y OFFSET
66D3 E1          0 1775 pop hl	; return addr
66D4 E3          0 1776 ex (sp), hl ; CALLEE => HL = X OFFSET
66D5 ED 4B 7D 5C 0 1777 ld bc, (COORDS)
66D9 79          0 1779 ld a, c
66DA 85          0 1780 add a, l
66DB 6F          0 1781 ld l, a
66DC 7C          0 1782 ld a, h
66DD CE 00       0 1783 adc a, 0 ; HL = HL + C
66DF 67          0 1784 ld h, a
66E0 20 ED       0 1785 jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen
66E2 78          0 1787 ld a, b
66E3 83          0 1788 add a, e
66E4 5F          0 1789 ld e, a
66E5 7A          0 1790 ld a, d
66E6 CE 00       0 1791 adc a, 0 ; DE = DE + B
66E8 57          0 1792 ld d, a
66E9 20 E4       0 1793 jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen
66EB 3E BF       0 1795 ld a, 191
66ED 93          0 1796 sub e
66EE 38 DF       0 1797 jr c, __DRAW_ERROR	; Out of screen
66F0 63          0 1799 ld h, e			; now H,L = y2, x2
66F1             0 1801 __DRAW:
66F1             0 1802 ; __FASTCALL__ Entry. Plots from (COORDS) to coord H, L
66F1 E5          0 1803 push hl
66F2 EB          0 1804 ex de, hl		; D,E = y2, x2;
66F3 3A 91 5C    0 1806 ld a, (P_FLAG)
66F6 4F          0 1807 ld c, a
66F7 CB 57       0 1808 bit 2, a        ; Test for INVERSE1
66F9 28 0A       0 1809 jr z, __DRAW_SETUP1
66FB 3E 2F       0 1810 ld a, 2Fh       ; CPL
66FD 32 DB 67    0 1811 ld (__PLOTINVERSE), a
6700 3E A6       0 1812 ld a, 0A6h      ; and (hl)
6702 C3 11 67    0 1813 jp __DRAW_START
6705             0 1815 __DRAW_SETUP1:
6705 AF          0 1816 xor a           ; nop
6706 32 DB 67    0 1817 ld (__PLOTINVERSE), a
6709 3E B6       0 1818 ld a, 0B6h      ; or (hl)
670B CB 41       0 1819 bit 0, c        ; Test for OVER
670D 28 02       0 1820 jr z, __DRAW_START
670F 3E AE       0 1821 ld a, 0AEh      ; xor (hl)
6711             0 1823 __DRAW_START:
6711 32 DC 67    0 1824 ld (__PLOTOVER), a ; "Pokes" last operation
6714 D9          0 1825 exx
6715 ED 4B 7D 5C 0 1826 ld bc, (COORDS) ; B'C' = y1, x1
6719 50          0 1827 ld d, b         ; Saves B' in D'
671A 3E BF       0 1828 ld a, 191
671C             0 1830 __PIXEL_ADDR EQU 22ACh
671C CD AC 22    0 1831 call __PIXEL_ADDR
671F             0 1833 ;; Now gets pixel mask in A register
671F 47          0 1834 ld b, a
6720 04          0 1835 inc b
6721 AF          0 1836 xor a
6722 37          0 1837 scf
6723             0 1839 __PIXEL_MASK:
6723 1F          0 1840 rra
6724 10 FD       0 1841 djnz __PIXEL_MASK
6726 42          0 1843 ld b, d         ; Restores B' from D'
6727 D1          0 1844 pop de			; D'E' = y2, x2
6728 D9          0 1845 exx             ; At this point: D'E' = y2,x2 coords
6729             0 1846 ; B'C' = y1, y1  coords
6729 08          0 1847 ex af, af'      ; Saves A reg for later
672A             0 1848 ; A' = Pixel mask
672A             0 1849 ; H'L' = Screen Address of pixel
672A ED 4B 7D 5C 0 1851 ld bc, (COORDS) ; B,C = y1, x1
672E 7B          0 1853 ld a, e
672F 91          0 1854 sub c			; dx = X2 - X1
6730 4F          0 1855 ld c, a			; Saves dx in c
6731 3E 0C       0 1857 ld a, 0Ch       ; INC C opcode
6733 21 C3 66    0 1858 ld hl, __INCX   ; xi = 1
6736 30 09       0 1859 jr nc, __DRAW1
6738 79          0 1861 ld a, c
6739 ED 44       0 1862 neg		 		; dx = X1 - X2
673B 4F          0 1863 ld c, a
673C 3E 0D       0 1864 ld a, 0Dh       ; DEC C opcode
673E 21 B7 66    0 1865 ld hl, __DECX   ; xi = -1
6741             0 1867 __DRAW1:
6741 32 8E 67    0 1868 ld (DX1), a
6744 22 90 67    0 1869 ld (DX1 + 2), hl ; Updates DX1 call address
6747 32 C7 67    0 1870 ld (DX2), a
674A 22 C9 67    0 1871 ld (DX2 + 2), hl ; Updates DX2 call address
674D 7A          0 1873 ld a, d
674E 90          0 1874 sub b			; dy = Y2 - Y1
674F 47          0 1875 ld b, a			; Saves dy in b
6750 3E 04       0 1877 ld a, 4         ; INC B opcode
6752 21 9F 66    0 1878 ld hl, __INCY   ; y1 = 1
6755 30 09       0 1879 jr nc, __DRAW2
6757 78          0 1881 ld a, b
6758 ED 44       0 1882 neg
675A 47          0 1883 ld b, a         ; dy = Y2 - Y1
675B 3E 05       0 1884 ld a, 5         ; DEC B opcode
675D 21 86 66    0 1885 ld hl, __DECY   ; y1 = -1
6760             0 1887 __DRAW2:
6760 32 93 67    0 1888 ld (DY1), a
6763 22 95 67    0 1889 ld (DY1 + 2), hl ; Updates DX1 call address
6766 32 C2 67    0 1890 ld (DY2), a
6769 22 C4 67    0 1891 ld (DY2 + 2), hl ; Updates DX2 call address
676C 78          0 1893 ld a, b
676D 91          0 1894 sub c			; dy - dx
676E 38 35       0 1895 jr c, __DRAW_DX_GT_DY	; DX > DY
6770             0 1897 ; At this point DY >= DX
6770             0 1898 ; --------------------------
6770             0 1899 ; HL = error = dY / 2
6770 26 00       0 1900 ld h, 0
6772 68          0 1901 ld l, b
6773 CB 3D       0 1902 srl l
6775             0 1904 ; DE = -dX
6775 AF          0 1905 xor a
6776 91          0 1906 sub c
6777 5F          0 1907 ld e, a
6778 9F          0 1908 sbc a, a
6779 57          0 1909 ld d, a
677A             0 1911 ; BC = DY
677A 48          0 1912 ld c, b
677B 44          0 1913 ld b, h
677C D9          0 1915 exx
677D 37          0 1916 scf             ; Sets Carry to signal update ATTR
677E 08          0 1917 ex af, af'      ; Brings back pixel mask
677F 5F          0 1918 ld e, a         ; Saves it in free E register
6780 C3 9B 67    0 1919 jp __DRAW4_LOOP
6783             0 1921 __DRAW3:			; While c != e => while y != y2
6783 D9          0 1922 exx
6784 19          0 1923 add hl, de		; error -= dX
6785 CB 7C       0 1924 bit 7, h		;
6787 D9          0 1925 exx				; recover coordinates
6788 28 09       0 1926 jr z, __DRAW4	; if error < 0
678A D9          0 1928 exx
678B 09          0 1929 add hl, bc		; error += dY
678C D9          0 1930 exx
678D 7B          0 1932 ld a, e
678E             0 1933 DX1:                ; x += xi
678E 0C          0 1934 inc c
678F CD C3 66    0 1935 call __INCX     ; This address will be dynamically updated
6792 5F          0 1936 ld e, a
6793             0 1938 __DRAW4:
6793             0 1940 DY1:                ; y += yi
6793 04          0 1941 inc b
6794 CD 9F 66    0 1942 call __INCY     ; This address will be dynamically updated
6797 7B          0 1943 ld a, e         ; Restores A reg.
6798 CD DB 67    0 1944 call __FASTPLOT
679B             0 1946 __DRAW4_LOOP:
679B 78          0 1947 ld a, b
679C BA          0 1948 cp d
679D C2 83 67    0 1949 jp nz, __DRAW3
67A0 ED 43 7D 5C 0 1950 ld (COORDS), bc
67A4 C9          0 1951 ret
67A5             0 1953 __DRAW_DX_GT_DY:	; DX > DY
67A5             0 1954 ; --------------------------
67A5             0 1955 ; HL = error = dX / 2
67A5 26 00       0 1956 ld h, 0
67A7 69          0 1957 ld l, c
67A8 CB 3D       0 1958 srl l			; HL = error = DX / 2
67AA             0 1960 ; DE = -dY
67AA AF          0 1961 xor a
67AB 90          0 1962 sub b
67AC 5F          0 1963 ld e, a
67AD 9F          0 1964 sbc a, a
67AE 57          0 1965 ld d, a
67AF             0 1967 ; BC = dX
67AF 44          0 1968 ld b, h
67B0 D9          0 1970 exx
67B1 53          0 1971 ld d, e
67B2 37          0 1972 scf             ; Sets Carry to signal update ATTR
67B3 08          0 1973 ex af, af'      ; Brings back pixel mask
67B4 5F          0 1974 ld e, a         ; Saves it in free E register
67B5 C3 CF 67    0 1975 jp __DRAW6_LOOP
67B8             0 1977 __DRAW5:			; While loop
67B8 D9          0 1978 exx
67B9 19          0 1979 add hl, de		; error -= dY
67BA CB 7C       0 1980 bit 7, h		; if (error < 0)
67BC D9          0 1981 exx				; Restore coords
67BD 28 07       0 1982 jr z, __DRAW6	;
67BF D9          0 1983 exx
67C0 09          0 1984 add hl, bc		; error += dX
67C1 D9          0 1985 exx
67C2             0 1987 DY2:                ; y += yi
67C2 04          0 1988 inc b
67C3 CD 9F 66    0 1989 call __INCY     ; This address will be dynamically updated
67C6             0 1991 __DRAW6:
67C6 7B          0 1992 ld a, e
67C7             0 1993 DX2:                ; x += xi
67C7 0C          0 1994 inc c
67C8 CD C3 66    0 1995 call __INCX     ; This address will be dynamically updated
67CB 5F          0 1996 ld e, a
67CC CD DB 67    0 1997 call __FASTPLOT
67CF             0 1999 __DRAW6_LOOP:
67CF 79          0 2000 ld a, c			; Current X coord
67D0 BA          0 2001 cp d
67D1 C2 B8 67    0 2002 jp nz, __DRAW5
67D4 ED 43 7D 5C 0 2003 ld (COORDS), bc
67D8 C9          0 2004 ret
67D9             0 2006 COORDS   EQU 5C7Dh
67D9             0 2008 __DRAW_END:
67D9 D9          0 2009 exx
67DA C9          0 2010 ret
67DB             0 2012 ;; Given a A mask and an HL screen position
67DB             0 2013 ;; return the next left position
67DB             0 2014 ;; Also updates BC coords
67DB             0 2015 __DECX EQU SP.PixelLeft
67DB             0 2017 ;; Like the above, but to the RIGHT
67DB             0 2018 ;; Also updates BC coords
67DB             0 2019 __INCX EQU SP.PixelRight
67DB             0 2021 ;; Given an HL screen position, calculates
67DB             0 2022 ;; the above position
67DB             0 2023 ;; Also updates BC coords
67DB             0 2024 __INCY EQU SP.PixelUp
67DB             0 2026 ;; Given an HL screen position, calculates
67DB             0 2027 ;; the above position
67DB             0 2028 ;; Also updates BC coords
67DB             0 2029 __DECY EQU SP.PixelDown
67DB             0 2031 ;; Puts the A register MASK in (HL)
67DB             0 2032 __FASTPLOT:
67DB             0 2033 __PLOTINVERSE:
67DB 00          0 2034 nop         ; Replace with CPL if INVERSE 1
67DC             0 2035 __PLOTOVER:
67DC B6          0 2036 or (hl)     ; Replace with XOR (hl) if OVER 1 AND INVERSE 0
67DD             0 2037 ; Replace with AND (hl) if INVERSE 1
67DD 77          0 2039 ld (hl), a
67DE 08          0 2040 ex af, af'  ; Recovers flag. If Carry set => update ATTR
67DF 7B          0 2041 ld a, e     ; Recovers A reg
67E0 D0          0 2042 ret nc
67E1 E5          0 2044 push hl
67E2 D5          0 2045 push de
67E3 C5          0 2046 push bc
67E4 CD 2E 65    0 2047 call SET_PIXEL_ADDR_ATTR
67E7 C1          0 2048 pop bc
67E8 D1          0 2049 pop de
67E9 E1          0 2050 pop hl
67EA             0 2053 __FASTPLOTEND:
67EA B7          0 2054 or a        ; Resets carry flag
67EB 08          0 2055 ex af, af'  ; Recovers A reg
67EC 7B          0 2056 ld a, e
67ED C9          0 2057 ret
67EE             0 2064 ; -----------------------------------------------------------
67EE             0 2065 ; vim: et:ts=4:sw=4:ruler:
67EE             0 2066 ;
67EE             0 2067 ; DRAW an arc using ZX ROM algorithm.
67EE             0 2068 ; DRAW x, y, r => r = Arc in radians
67EE             0 2070 ; r parameter in A ED BC register
67EE             0 2071 ; X, and Y parameter in high byte on top of the stack
67EE             0 2078 ; Ripped from the ZX Spectrum ROM
67EE             0 2080 DRAW3:
67EE             0 2093 L2D28   EQU 02D28h
67EE             0 2094 COORDS  EQU 5C7Dh
67EE             0 2095 STACK_TO_BC EQU 2307h
67EE             0 2096 STACK_TO_A  EQU 2314h
67EE D9          0 2098 exx
67EF 08          0 2099 ex af, af'              ;; Preserves ARC
67F0 E1          0 2100 pop hl
67F1 D1          0 2101 pop de
67F2 E3          0 2102 ex (sp), hl             ;; CALLEE
67F3 D5          0 2103 push de
67F4 CD 48 66    0 2104 call __FPSTACK_I16      ;; X Offset
67F7 E1          0 2105 pop hl
67F8 CD 48 66    0 2106 call __FPSTACK_I16      ;; Y Offset
67FB D9          0 2107 exx
67FC 08          0 2108 ex af, af'
67FD CD B6 2A    0 2109 call __FPSTACK_PUSH     ;; R Arc
6800             0 2111 ;   Now enter the calculator and store the complete rotation angle in mem-5
6800 EF          0 2113 RST     28H             ;; FP-CALC      x, y, A.
6801 C5          0 2114 DEFB    $C5             ;;st-mem-5      x, y, A.
6802             0 2116 ;   Test the angle for the special case of 360 degrees.
6802 A2          0 2118 DEFB    $A2             ;;stk-half      x, y, A, 1/2.
6803 04          0 2119 DEFB    $04             ;;multiply      x, y, A/2.
6804 1F          0 2120 DEFB    $1F             ;;sin           x, y, sin(A/2).
6805 31          0 2121 DEFB    $31             ;;duplicate     x, y, sin(A/2),sin(A/2)
6806 30          0 2122 DEFB    $30             ;;not           x, y, sin(A/2), (0/1).
6807 30          0 2123 DEFB    $30             ;;not           x, y, sin(A/2), (1/0).
6808 00          0 2124 DEFB    $00             ;;jump-true     x, y, sin(A/2).
6809 06          0 2126 DEFB    $06             ;;forward to L23A3, DR-SIN-NZ
680A             0 2127 ;;if sin(r/2) is not zero.
680A             0 2129 ;   The third parameter is 2*PI (or a multiple of 2*PI) so a 360 degrees turn
680A             0 2130 ;   would just be a straight line.  Eliminating this case here prevents
680A             0 2131 ;   division by zero at later stage.
680A 02          0 2133 DEFB    $02             ;;delete        x, y.
680B 38          0 2134 DEFB    $38             ;;end-calc      x, y.
680C C3 E1 68    0 2135 JP      L2477
680F             0 2137 ; ---
680F             0 2139 ;   An arc can be drawn.
680F             0 2141 ;; DR-SIN-NZ
680F C0          0 2142 DEFB    $C0             ;;st-mem-0      x, y, sin(A/2).   store mem-0
6810 02          0 2143 DEFB    $02             ;;delete        x, y.
6811             0 2145 ;   The next step calculates (roughly) the diameter of the circle of which the
6811             0 2146 ;   arc will form part.  This value does not have to be too accurate as it is
6811             0 2147 ;   only used to evaluate the number of straight lines and then discarded.
6811             0 2148 ;   After all for a circle, the radius is used. Consequently, a circle of
6811             0 2149 ;   radius 50 will have 24 straight lines but an arc of radius 50 will have 20
6811             0 2150 ;   straight lines - when drawn in any direction.
6811             0 2151 ;   So that simple arithmetic can be used, the length of the chord can be
6811             0 2152 ;   calculated as X+Y rather than by Pythagoras Theorem and the sine of the
6811             0 2153 ;   nearest angle within reach is used.
6811 C1          0 2155 DEFB    $C1             ;;st-mem-1      x, y.             store mem-1
6812 02          0 2156 DEFB    $02             ;;delete        x.
6813 31          0 2158 DEFB    $31             ;;duplicate     x, x.
6814 2A          0 2159 DEFB    $2A             ;;abs           x, x (+ve).
6815 E1          0 2160 DEFB    $E1             ;;get-mem-1     x, X, y.
6816 01          0 2161 DEFB    $01             ;;exchange      x, y, X.
6817 E1          0 2162 DEFB    $E1             ;;get-mem-1     x, y, X, y.
6818 2A          0 2163 DEFB    $2A             ;;abs           x, y, X, Y (+ve).
6819 0F          0 2164 DEFB    $0F             ;;addition      x, y, X+Y.
681A E0          0 2165 DEFB    $E0             ;;get-mem-0     x, y, X+Y, sin(A/2).
681B 05          0 2166 DEFB    $05             ;;division      x, y, X+Y/sin(A/2).
681C 2A          0 2167 DEFB    $2A             ;;abs           x, y, X+Y/sin(A/2) = D.
681D             0 2169 ;    Bring back sin(A/2) from mem-0 which will shortly get trashed.
681D             0 2170 ;    Then bring D to the top of the stack again.
681D E0          0 2172 DEFB    $E0             ;;get-mem-0     x, y, D, sin(A/2).
681E 01          0 2173 DEFB    $01             ;;exchange      x, y, sin(A/2), D.
681F             0 2175 ;   Note. that since the value at the top of the stack has arisen as a result
681F             0 2176 ;   of division then it can no longer be in integer form and the next re-stack
681F             0 2177 ;   is unnecessary. Only the Sinclair ZX80 had integer division.
681F             0 2179 ;;DEFB    $3D             ;;re-stack      (unnecessary)
681F 38          0 2181 DEFB    $38             ;;end-calc      x, y, sin(A/2), D.
6820             0 2183 ;   The next test avoids drawing 4 straight lines when the start and end pixels
6820             0 2184 ;   are adjacent (or the same) but is probably best dispensed with.
6820 7E          0 2186 LD      A,(HL)          ; fetch exponent byte of D.
6821 FE 81       0 2187 CP      $81             ; compare to 1
6823 30 07       0 2188 JR      NC,L23C1        ; forward, if > 1,  to DR-PRMS
6825             0 2190 ;   else delete the top two stack values and draw a simple straight line.
6825 EF          0 2192 RST     28H             ;; FP-CALC
6826 02          0 2193 DEFB    $02             ;;delete
6827 02          0 2194 DEFB    $02             ;;delete
6828 38          0 2195 DEFB    $38             ;;end-calc      x, y.
6829 C3 E1 68    0 2197 JP      L2477           ; to LINE-DRAW
682C             0 2199 ; ---
682C             0 2201 ;   The ARC will consist of multiple straight lines so call the CIRCLE-DRAW
682C             0 2202 ;   PARAMETERS ROUTINE to pre-calculate sine values from the angle (in mem-5)
682C             0 2203 ;   and determine also the number of straight lines from that value and the
682C             0 2204 ;   'diameter' which is at the top of the calculator stack.
682C             0 2206 ;; DR-PRMS
682C CD 7D 24    0 2207 L23C1:  CALL    247Dh           ; routine CD-PRMS1
682F             0 2209 ; mem-0 ; (A)/No. of lines (=a) (step angle)
682F             0 2210 ; mem-1 ; sin(a/2)
682F             0 2211 ; mem-2 ; -
682F             0 2212 ; mem-3 ; cos(a)                        const
682F             0 2213 ; mem-4 ; sin(a)                        const
682F             0 2214 ; mem-5 ; Angle of rotation (A)         in
682F             0 2215 ; B     ; Count of straight lines - max 252.
682F C5          0 2217 PUSH    BC              ; Save the line count on the machine stack.
6830             0 2219 ;   Remove the now redundant diameter value D.
6830 EF          0 2221 RST     28H             ;; FP-CALC      x, y, sin(A/2), D.
6831 02          0 2222 DEFB    $02             ;;delete        x, y, sin(A/2).
6832             0 2224 ;   Dividing the sine of the step angle by the sine of the total angle gives
6832             0 2225 ;   the length of the initial chord on a unary circle. This factor f is used
6832             0 2226 ;   to scale the coordinates of the first line which still points in the
6832             0 2227 ;   direction of the end point and may be larger.
6832 E1          0 2229 DEFB    $E1             ;;get-mem-1     x, y, sin(A/2), sin(a/2)
6833 01          0 2230 DEFB    $01             ;;exchange      x, y, sin(a/2), sin(A/2)
6834 05          0 2231 DEFB    $05             ;;division      x, y, sin(a/2)/sin(A/2)
6835 C1          0 2232 DEFB    $C1             ;;st-mem-1      x, y. f.
6836 02          0 2233 DEFB    $02             ;;delete        x, y.
6837             0 2235 ;   With the factor stored, scale the x coordinate first.
6837 01          0 2237 DEFB    $01             ;;exchange      y, x.
6838 31          0 2238 DEFB    $31             ;;duplicate     y, x, x.
6839 E1          0 2239 DEFB    $E1             ;;get-mem-1     y, x, x, f.
683A 04          0 2240 DEFB    $04             ;;multiply      y, x, x*f    (=xx)
683B C2          0 2241 DEFB    $C2             ;;st-mem-2      y, x, xx.
683C 02          0 2242 DEFB    $02             ;;delete        y. x.
683D             0 2244 ;   Now scale the y coordinate.
683D 01          0 2246 DEFB    $01             ;;exchange      x, y.
683E 31          0 2247 DEFB    $31             ;;duplicate     x, y, y.
683F E1          0 2248 DEFB    $E1             ;;get-mem-1     x, y, y, f
6840 04          0 2249 DEFB    $04             ;;multiply      x, y, y*f    (=yy)
6841             0 2251 ;   Note. 'sin' and 'cos' trash locations mem-0 to mem-2 so fetch mem-2 to the
6841             0 2252 ;   calculator stack for safe keeping.
6841 E2          0 2254 DEFB    $E2             ;;get-mem-2     x, y, yy, xx.
6842             0 2256 ;   Once we get the coordinates of the first straight line then the 'ROTATION
6842             0 2257 ;   FORMULA' used in the arc loop will take care of all other points, but we
6842             0 2258 ;   now use a variation of that formula to rotate the first arc through (A-a)/2
6842             0 2259 ;   radians.
6842             0 2260 ;
6842             0 2261 ;       xRotated = y * sin(angle) + x * cos(angle)
6842             0 2262 ;       yRotated = y * cos(angle) - x * sin(angle)
6842             0 2263 ;
6842 E5          0 2265 DEFB    $E5             ;;get-mem-5     x, y, yy, xx, A.
6843 E0          0 2266 DEFB    $E0             ;;get-mem-0     x, y, yy, xx, A, a.
6844 03          0 2267 DEFB    $03             ;;subtract      x, y, yy, xx, A-a.
6845 A2          0 2268 DEFB    $A2             ;;stk-half      x, y, yy, xx, A-a, 1/2.
6846 04          0 2269 DEFB    $04             ;;multiply      x, y, yy, xx, (A-a)/2. (=angle)
6847 31          0 2270 DEFB    $31             ;;duplicate     x, y, yy, xx, angle, angle.
6848 1F          0 2271 DEFB    $1F             ;;sin           x, y, yy, xx, angle, sin(angle)
6849 C5          0 2272 DEFB    $C5             ;;st-mem-5      x, y, yy, xx, angle, sin(angle)
684A 02          0 2273 DEFB    $02             ;;delete        x, y, yy, xx, angle
684B 20          0 2275 DEFB    $20             ;;cos           x, y, yy, xx, cos(angle).
684C             0 2277 ;   Note. mem-0, mem-1 and mem-2 can be used again now...
684C C0          0 2279 DEFB    $C0             ;;st-mem-0      x, y, yy, xx, cos(angle).
684D 02          0 2280 DEFB    $02             ;;delete        x, y, yy, xx.
684E C2          0 2282 DEFB    $C2             ;;st-mem-2      x, y, yy, xx.
684F 02          0 2283 DEFB    $02             ;;delete        x, y, yy.
6850 C1          0 2285 DEFB    $C1             ;;st-mem-1      x, y, yy.
6851 E5          0 2286 DEFB    $E5             ;;get-mem-5     x, y, yy, sin(angle)
6852 04          0 2287 DEFB    $04             ;;multiply      x, y, yy*sin(angle).
6853 E0          0 2288 DEFB    $E0             ;;get-mem-0     x, y, yy*sin(angle), cos(angle)
6854 E2          0 2289 DEFB    $E2             ;;get-mem-2     x, y, yy*sin(angle), cos(angle), xx.
6855 04          0 2290 DEFB    $04             ;;multiply      x, y, yy*sin(angle), xx*cos(angle).
6856 0F          0 2291 DEFB    $0F             ;;addition      x, y, xRotated.
6857 E1          0 2292 DEFB    $E1             ;;get-mem-1     x, y, xRotated, yy.
6858 01          0 2293 DEFB    $01             ;;exchange      x, y, yy, xRotated.
6859 C1          0 2294 DEFB    $C1             ;;st-mem-1      x, y, yy, xRotated.
685A 02          0 2295 DEFB    $02             ;;delete        x, y, yy.
685B E0          0 2297 DEFB    $E0             ;;get-mem-0     x, y, yy, cos(angle).
685C 04          0 2298 DEFB    $04             ;;multiply      x, y, yy*cos(angle).
685D E2          0 2299 DEFB    $E2             ;;get-mem-2     x, y, yy*cos(angle), xx.
685E E5          0 2300 DEFB    $E5             ;;get-mem-5     x, y, yy*cos(angle), xx, sin(angle).
685F 04          0 2301 DEFB    $04             ;;multiply      x, y, yy*cos(angle), xx*sin(angle).
6860 03          0 2302 DEFB    $03             ;;subtract      x, y, yRotated.
6861 C2          0 2303 DEFB    $C2             ;;st-mem-2      x, y, yRotated.
6862             0 2305 ;   Now the initial x and y coordinates are made positive and summed to see
6862             0 2306 ;   if they measure up to anything significant.
6862 2A          0 2308 DEFB    $2A             ;;abs           x, y, yRotated'.
6863 E1          0 2309 DEFB    $E1             ;;get-mem-1     x, y, yRotated', xRotated.
6864 2A          0 2310 DEFB    $2A             ;;abs           x, y, yRotated', xRotated'.
6865 0F          0 2311 DEFB    $0F             ;;addition      x, y, yRotated+xRotated.
6866 02          0 2312 DEFB    $02             ;;delete        x, y.
6867 38          0 2314 DEFB    $38             ;;end-calc      x, y.
6868             0 2316 ;   Although the test value has been deleted it is still above the calculator
6868             0 2317 ;   stack in memory and conveniently DE which points to the first free byte
6868             0 2318 ;   addresses the exponent of the test value.
6868 1A          0 2320 LD      A,(DE)          ; Fetch exponent of the length indicator.
6869 FE 81       0 2321 CP      $81             ; Compare to that for 1
686B C1          0 2323 POP     BC              ; Balance the machine stack
686C DA E1 68    0 2325 JP      C,L2477         ; forward, if the coordinates of first line
686F             0 2326 ; don't add up to more than 1, to LINE-DRAW
686F             0 2328 ;   Continue when the arc will have a discernable shape.
686F C5          0 2330 PUSH    BC              ; Restore line counter to the machine stack.
6870             0 2332 ;   The parameters of the DRAW command were relative and they are now converted
6870             0 2333 ;   to absolute coordinates by adding to the coordinates of the last point
6870             0 2334 ;   plotted. The first two values on the stack are the terminal tx and ty
6870             0 2335 ;   coordinates.  The x-coordinate is converted first but first the last point
6870             0 2336 ;   plotted is saved as it will initialize the moving ax, value.
6870 EF          0 2338 RST     28H             ;; FP-CALC      x, y.
6871 01          0 2339 DEFB    $01             ;;exchange      y, x.
6872 38          0 2340 DEFB    $38             ;;end-calc      y, x.
6873 3A 7D 5C    0 2342 LD      A,(COORDS)      ;; Fetch System Variable COORDS-x
6876 CD 28 2D    0 2343 CALL    L2D28           ;; routine STACK-A
6879 EF          0 2345 RST     28H             ;; FP-CALC      y, x, last-x.
687A             0 2347 ;   Store the last point plotted to initialize the moving ax value.
687A C0          0 2349 DEFB    $C0             ;;st-mem-0      y, x, last-x.
687B 0F          0 2350 DEFB    $0F             ;;addition      y, absolute x.
687C 01          0 2351 DEFB    $01             ;;exchange      tx, y.
687D 38          0 2352 DEFB    $38             ;;end-calc      tx, y.
687E 3A 7E 5C    0 2354 LD      A,(COORDS + 1)  ; Fetch System Variable COORDS-y
6881 CD 28 2D    0 2355 CALL    L2D28           ; routine STACK-A
6884 EF          0 2357 RST     28H             ;; FP-CALC      tx, y, last-y.
6885             0 2359 ;   Store the last point plotted to initialize the moving ay value.
6885 C5          0 2361 DEFB    $C5             ;;st-mem-5      tx, y, last-y.
6886 0F          0 2362 DEFB    $0F             ;;addition      tx, ty.
6887             0 2364 ;   Fetch the moving ax and ay to the calculator stack.
6887 E0          0 2366 DEFB    $E0             ;;get-mem-0     tx, ty, ax.
6888 E5          0 2367 DEFB    $E5             ;;get-mem-5     tx, ty, ax, ay.
6889 38          0 2368 DEFB    $38             ;;end-calc      tx, ty, ax, ay.
688A C1          0 2370 POP     BC              ; Restore the straight line count.
688B             0 2372 ; -----------------------------------
688B             0 2373 ; THE 'CIRCLE/DRAW CONVERGENCE POINT'
688B             0 2374 ; -----------------------------------
688B             0 2375 ;   The CIRCLE and ARC-DRAW commands converge here.
688B             0 2376 ;
688B             0 2377 ;   Note. for both the CIRCLE and ARC commands the minimum initial line count
688B             0 2378 ;   is 4 (as set up by the CD_PARAMS routine) and so the zero flag will never
688B             0 2379 ;   be set and the loop is always entered.  The first test is superfluous and
688B             0 2380 ;   the jump will always be made to ARC-START.
688B             0 2382 ;; DRW-STEPS
688B 05          0 2383 L2420:  DEC     B               ; decrement the arc count (4,8,12,16...).
688C             0 2385 ;JR      Z,L245F         ; forward, if zero (not possible), to ARC-END
688C C3 A3 68    0 2387 JP      L2439           ; forward to ARC-START
688F             0 2389 ; --------------
688F             0 2390 ; THE 'ARC LOOP'
688F             0 2391 ; --------------
688F             0 2392 ;
688F             0 2393 ;   The arc drawing loop will draw up to 31 straight lines for a circle and up
688F             0 2394 ;   251 straight lines for an arc between two points. In both cases the final
688F             0 2395 ;   closing straight line is drawn at ARC_END, but it otherwise loops back to
688F             0 2396 ;   here to calculate the next coordinate using the ROTATION FORMULA where (a)
688F             0 2397 ;   is the previously calculated, constant CENTRAL ANGLE of the arcs.
688F             0 2398 ;
688F             0 2399 ;       Xrotated = x * cos(a) - y * sin(a)
688F             0 2400 ;       Yrotated = x * sin(a) + y * cos(a)
688F             0 2401 ;
688F             0 2402 ;   The values cos(a) and sin(a) are pre-calculated and held in mem-3 and mem-4
688F             0 2403 ;   for the duration of the routine.
688F             0 2404 ;   Memory location mem-1 holds the last relative x value (rx) and mem-2 holds
688F             0 2405 ;   the last relative y value (ry) used by DRAW.
688F             0 2406 ;
688F             0 2407 ;   Note. that this is a very clever twist on what is after all a very clever,
688F             0 2408 ;   well-used formula.  Normally the rotation formula is used with the x and y
688F             0 2409 ;   coordinates from the centre of the circle (or arc) and a supplied angle to
688F             0 2410 ;   produce two new x and y coordinates in an anticlockwise direction on the
688F             0 2411 ;   circumference of the circle.
688F             0 2412 ;   What is being used here, instead, is the relative X and Y parameters from
688F             0 2413 ;   the last point plotted that are required to get to the current point and
688F             0 2414 ;   the formula returns the next relative coordinates to use.
688F             0 2416 ;; ARC-LOOP
688F EF          0 2417 L2425:  RST     28H             ;; FP-CALC
6890 E1          0 2418 DEFB    $E1             ;;get-mem-1     rx.
6891 31          0 2419 DEFB    $31             ;;duplicate     rx, rx.
6892 E3          0 2420 DEFB    $E3             ;;get-mem-3     cos(a)
6893 04          0 2421 DEFB    $04             ;;multiply      rx, rx*cos(a).
6894 E2          0 2422 DEFB    $E2             ;;get-mem-2     rx, rx*cos(a), ry.
6895 E4          0 2423 DEFB    $E4             ;;get-mem-4     rx, rx*cos(a), ry, sin(a).
6896 04          0 2424 DEFB    $04             ;;multiply      rx, rx*cos(a), ry*sin(a).
6897 03          0 2425 DEFB    $03             ;;subtract      rx, rx*cos(a) - ry*sin(a)
6898 C1          0 2426 DEFB    $C1             ;;st-mem-1      rx, new relative x rotated.
6899 02          0 2427 DEFB    $02             ;;delete        rx.
689A E4          0 2429 DEFB    $E4             ;;get-mem-4     rx, sin(a).
689B 04          0 2430 DEFB    $04             ;;multiply      rx*sin(a)
689C E2          0 2431 DEFB    $E2             ;;get-mem-2     rx*sin(a), ry.
689D E3          0 2432 DEFB    $E3             ;;get-mem-3     rx*sin(a), ry, cos(a).
689E 04          0 2433 DEFB    $04             ;;multiply      rx*sin(a), ry*cos(a).
689F 0F          0 2434 DEFB    $0F             ;;addition      rx*sin(a) + ry*cos(a).
68A0 C2          0 2435 DEFB    $C2             ;;st-mem-2      new relative y rotated.
68A1 02          0 2436 DEFB    $02             ;;delete        .
68A2 38          0 2437 DEFB    $38             ;;end-calc      .
68A3             0 2439 ;   Note. the calculator stack actually holds   tx, ty, ax, ay
68A3             0 2440 ;   and the last absolute values of x and y
68A3             0 2441 ;   are now brought into play.
68A3             0 2442 ;
68A3             0 2443 ;   Magically, the two new rotated coordinates rx and ry are all that we would
68A3             0 2444 ;   require to draw a circle or arc - on paper!
68A3             0 2445 ;   The Spectrum DRAW routine draws to the rounded x and y coordinate and so
68A3             0 2446 ;   repetitions of values like 3.49 would mean that the fractional parts
68A3             0 2447 ;   would be lost until eventually the draw coordinates might differ from the
68A3             0 2448 ;   floating point values used above by several pixels.
68A3             0 2449 ;   For this reason the accurate offsets calculated above are added to the
68A3             0 2450 ;   accurate, absolute coordinates maintained in ax and ay and these new
68A3             0 2451 ;   coordinates have the integer coordinates of the last plot position
68A3             0 2452 ;   ( from System Variable COORDS ) subtracted from them to give the relative
68A3             0 2453 ;   coordinates required by the DRAW routine.
68A3             0 2455 ;   The mid entry point.
68A3             0 2457 ;; ARC-START
68A3 C5          0 2458 L2439:  PUSH    BC              ; Preserve the arc counter on the machine stack.
68A4             0 2460 ;   Store the absolute ay in temporary variable mem-0 for the moment.
68A4 EF          0 2462 RST     28H             ;; FP-CALC      ax, ay.
68A5 C0          0 2463 DEFB    $C0             ;;st-mem-0      ax, ay.
68A6 02          0 2464 DEFB    $02             ;;delete        ax.
68A7             0 2466 ;   Now add the fractional relative x coordinate to the fractional absolute
68A7             0 2467 ;   x coordinate to obtain a new fractional x-coordinate.
68A7 E1          0 2469 DEFB    $E1             ;;get-mem-1     ax, xr.
68A8 0F          0 2470 DEFB    $0F             ;;addition      ax+xr (= new ax).
68A9 31          0 2471 DEFB    $31             ;;duplicate     ax, ax.
68AA 38          0 2472 DEFB    $38             ;;end-calc      ax, ax.
68AB 3A 7D 5C    0 2474 LD      A,(COORDS)       ; COORDS-x      last x    (integer ix 0-255)
68AE CD 28 2D    0 2475 CALL    L2D28           ; routine STACK-A
68B1 EF          0 2477 RST     28H             ;; FP-CALC      ax, ax, ix.
68B2 03          0 2478 DEFB    $03             ;;subtract      ax, ax-ix  = relative DRAW Dx.
68B3             0 2480 ;   Having calculated the x value for DRAW do the same for the y value.
68B3 E0          0 2482 DEFB    $E0             ;;get-mem-0     ax, Dx, ay.
68B4 E2          0 2483 DEFB    $E2             ;;get-mem-2     ax, Dx, ay, ry.
68B5 0F          0 2484 DEFB    $0F             ;;addition      ax, Dx, ay+ry (= new ay).
68B6 C0          0 2485 DEFB    $C0             ;;st-mem-0      ax, Dx, ay.
68B7 01          0 2486 DEFB    $01             ;;exchange      ax, ay, Dx,
68B8 E0          0 2487 DEFB    $E0             ;;get-mem-0     ax, ay, Dx, ay.
68B9 38          0 2488 DEFB    $38             ;;end-calc      ax, ay, Dx, ay.
68BA 3A 7E 5C    0 2490 LD      A,(COORDS + 1)  ; COORDS-y      last y (integer iy 0-175)
68BD CD 28 2D    0 2491 CALL    L2D28           ; routine STACK-A
68C0 EF          0 2493 RST     28H             ;; FP-CALC      ax, ay, Dx, ay, iy.
68C1 03          0 2494 DEFB    $03             ;;subtract      ax, ay, Dx, ay-iy ( = Dy).
68C2 38          0 2495 DEFB    $38             ;;end-calc      ax, ay, Dx, Dy.
68C3 CD E1 68    0 2497 CALL    L2477           ; Routine DRAW-LINE draws (Dx,Dy) relative to
68C6             0 2498 ; the last pixel plotted leaving absolute x
68C6             0 2499 ; and y on the calculator stack.
68C6             0 2500 ;               ax, ay.
68C6 C1          0 2502 POP     BC              ; Restore the arc counter from the machine stack.
68C7 10 C6       0 2504 DJNZ    L2425           ; Decrement and loop while > 0 to ARC-LOOP
68C9             0 2506 ; -------------
68C9             0 2507 ; THE 'ARC END'
68C9             0 2508 ; -------------
68C9             0 2510 ;   To recap the full calculator stack is       tx, ty, ax, ay.
68C9             0 2512 ;   Just as one would do if drawing the curve on paper, the final line would
68C9             0 2513 ;   be drawn by joining the last point plotted to the initial start point
68C9             0 2514 ;   in the case of a CIRCLE or to the calculated end point in the case of
68C9             0 2515 ;   an ARC.
68C9             0 2516 ;   The moving absolute values of x and y are no longer required and they
68C9             0 2517 ;   can be deleted to expose the closing coordinates.
68C9             0 2519 ;; ARC-END
68C9 EF          0 2520 L245F:  RST     28H             ;; FP-CALC      tx, ty, ax, ay.
68CA 02          0 2521 DEFB    $02             ;;delete        tx, ty, ax.
68CB 02          0 2522 DEFB    $02             ;;delete        tx, ty.
68CC 01          0 2523 DEFB    $01             ;;exchange      ty, tx.
68CD 38          0 2524 DEFB    $38             ;;end-calc      ty, tx.
68CE             0 2526 ;   First calculate the relative x coordinate to the end-point.
68CE 3A 7D 5C    0 2528 LD      A,($5C7D)       ; COORDS-x
68D1 CD 28 2D    0 2529 CALL    L2D28           ; routine STACK-A
68D4 EF          0 2531 RST     28H             ;; FP-CALC      ty, tx, coords_x.
68D5 03          0 2532 DEFB    $03             ;;subtract      ty, rx.
68D6             0 2534 ;   Next calculate the relative y coordinate to the end-point.
68D6 01          0 2536 DEFB    $01             ;;exchange      rx, ty.
68D7 38          0 2537 DEFB    $38             ;;end-calc      rx, ty.
68D8 3A 7E 5C    0 2539 LD      A,($5C7E)       ; COORDS-y
68DB CD 28 2D    0 2540 CALL    L2D28           ; routine STACK-A
68DE EF          0 2542 RST     28H             ;; FP-CALC      rx, ty, coords_y
68DF 03          0 2543 DEFB    $03             ;;subtract      rx, ry.
68E0 38          0 2544 DEFB    $38             ;;end-calc      rx, ry.
68E1             0 2545 ;   Finally draw the last straight line.
68E1             0 2546 L2477:
68E1 CD 07 23    0 2547 call    STACK_TO_BC     ;;Pops x, and y, and stores it in B, C
68E4 2A 7D 5C    0 2548 ld      hl, (COORDS)    ;;Calculates x2 and y2 in L, H
68E7 CB 13       0 2550 rl      e               ;; Rotate left to carry
68E9 79          0 2551 ld      a, c
68EA 30 02       0 2552 jr      nc, SUM_C
68EC ED 44       0 2553 neg
68EE             0 2554 SUM_C:
68EE 85          0 2555 add     a, l
68EF 6F          0 2556 ld      l, a            ;; X2
68F0 CB 12       0 2558 rl      d               ;; Low sign to carry
68F2 78          0 2559 ld      a, b
68F3 30 02       0 2560 jr      nc, SUM_B
68F5 ED 44       0 2561 neg
68F7             0 2562 SUM_B:
68F7 84          0 2563 add     a, h
68F8 67          0 2564 ld      h, a
68F9 C3 F1 66    0 2565 jp      __DRAW          ;;forward to LINE-DRAW (Fastcalled)
68FC             0 2573 __LEI8: ; Signed <= comparison for 8bit int
68FC             0 2574 ; A <= H (registers)
68FC 94          0 2577 sub h
68FD 20 03       0 2578 jr nz, __LTI
68FF 3C          0 2579 inc a
6900 C9          0 2580 ret
6901             0 2582 __LTI8:  ; Test 8 bit values A < H
6901 94          0 2583 sub h
6902             0 2585 __LTI:   ; Generic signed comparison
6902 E2 07 69    0 2586 jp po, checkParity
6905 EE 80       0 2587 xor 0x80
6907             0 2588 checkParity:
6907 3E 00       0 2589 ld a, 0     ; False
6909 F0          0 2590 ret p
690A 3C          0 2591 inc a       ; True
690B C9          0 2592 ret
690C             0 2596 __LTI16: ; Test 8 bit values HL < DE
690C             0 2597 ; Returns result in A: 0 = False, !0 = True
690C B7          0 2600 or a
690D ED 52       0 2601 sbc hl, de
690F E2 15 69    0 2602 jp po, checkParity
6912 7C          0 2603 ld a, h
6913 EE 80       0 2604 xor 0x80
6915             0 2605 checkParity:
6915 3E 00       0 2606 ld a, 0     ; False
6917 F0          0 2607 ret p
6918 3C          0 2608 inc a       ; True
6919 C9          0 2609 ret
691A             0 2616 ; -------------------------------------------------------------
691A             0 2617 ; Floating point library using the FP ROM Calculator (ZX 48K)
691A             0 2618 ; All of them uses A EDCB registers as 1st paramter.
691A             0 2619 ; For binary operators, the 2n operator must be pushed into the
691A             0 2620 ; stack, in the order A DE BC.
691A             0 2621 ;
691A             0 2622 ; Uses CALLEE convention
691A             0 2623 ; -------------------------------------------------------------
691A             0 2625 __MULF:	; Multiplication
691A CD 37 66    0 2626 call __FPSTACK_PUSH2
691D             0 2628 ; ------------- ROM MUL
691D EF          0 2629 rst 28h
691E 04          0 2630 defb 04h	;
691F 38          0 2631 defb 38h;   ; END CALC
6920 C3 F1 2B    0 2633 jp __FPSTACK_POP
6923             0 2638 ; Parameter / Local var load
6923             0 2639 ; A => Offset
6923             0 2640 ; IX = Stack Frame
6923             0 2641 ; RESULT: HL => IX + DE
6923             0 2645 ; __FASTCALL__ routine which
6923             0 2646 ; loads a 40 bits floating point into A ED CB
6923             0 2647 ; stored at position pointed by POINTER HL
6923             0 2648 ;A DE, BC <-- ((HL))
6923             0 2650 __ILOADF:
6923 7E          0 2651 ld a, (hl)
6924 23          0 2652 inc hl
6925 66          0 2653 ld h, (hl)
6926 6F          0 2654 ld l, a
6927             0 2656 ; __FASTCALL__ routine which
6927             0 2657 ; loads a 40 bits floating point into A ED CB
6927             0 2658 ; stored at position pointed by POINTER HL
6927             0 2659 ;A DE, BC <-- (HL)
6927             0 2661 __LOADF:    ; Loads a 40 bits FP number from address pointed by HL
6927 7E          0 2662 ld a, (hl)
6928 23          0 2663 inc hl
6929 5E          0 2664 ld e, (hl)
692A 23          0 2665 inc hl
692B 56          0 2666 ld d, (hl)
692C 23          0 2667 inc hl
692D 4E          0 2668 ld c, (hl)
692E 23          0 2669 inc hl
692F 46          0 2670 ld b, (hl)
6930 C9          0 2671 ret
6931             0 2675 __PLOADF:
6931 DD E5       0 2676 push ix
6933 E1          0 2677 pop hl
6934 19          0 2678 add hl, de
6935 C3 27 69    0 2679 jp __LOADF
6938             0 2685 ; vim:ts=4:sw=4:et:
6938             0 2686 ; PRINT command routine
6938             0 2687 ; Does not print attribute. Use PRINT_STR or PRINT_NUM for that
6938             0 2695 JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
6938 87          0 2696 add a, a
6939             0 2698 JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
6939 5F          0 2699 ld e, a
693A 16 00       0 2700 ld d, 0
693C             0 2702 JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
693C 19          0 2703 add hl, de
693D 5E          0 2704 ld e, (hl)
693E 23          0 2705 inc hl
693F 56          0 2706 ld d, (hl)
6940 EB          0 2707 ex de, hl
6941             0 2708 CALL_HL:
6941 E9          0 2709 jp (hl)
6942             0 2714 ; Sets ink color in ATTR_P permanently
6942             0 2715 ; Parameter: Paper color in A register
6942             0 2719 INK:
6942 11 8D 5C    0 2724 ld de, ATTR_P
6945             0 2726 __SET_INK:
6945 FE 08       0 2727 cp 8
6947 20 06       0 2728 jr nz, __SET_INK2
6949 13          0 2730 inc de ; Points DE to MASK_T or MASK_P
694A 1A          0 2731 ld a, (de)
694B F6 07       0 2732 or 7 ; Set bits 0,1,2 to enable transparency
694D 12          0 2733 ld (de), a
694E C9          0 2734 ret
694F             0 2736 __SET_INK2:
694F             0 2737 ; Another entry. This will set the ink color at location pointer by DE
694F E6 07       0 2738 and 7	; # Gets color mod 8
6951 47          0 2739 ld b, a	; Saves the color
6952 1A          0 2740 ld a, (de)
6953 E6 F8       0 2741 and 0F8h ; Clears previous value
6955 B0          0 2742 or b
6956 12          0 2743 ld (de), a
6957 13          0 2744 inc de ; Points DE to MASK_T or MASK_P
6958 1A          0 2745 ld a, (de)
6959 E6 F8       0 2746 and 0F8h ; Reset bits 0,1,2 sign to disable transparency
695B 12          0 2747 ld (de), a ; Store new attr
695C C9          0 2748 ret
695D             0 2750 ; Sets the INK color passed in A register in the ATTR_T variable
695D             0 2751 INK_TMP:
695D 11 8F 5C    0 2752 ld de, ATTR_T
6960 C3 45 69    0 2753 jp __SET_INK
6963             0 2760 ; Sets paper color in ATTR_P permanently
6963             0 2761 ; Parameter: Paper color in A register
6963             0 2765 PAPER:
6963 11 8D 5C    0 2770 ld de, ATTR_P
6966             0 2772 __SET_PAPER:
6966 FE 08       0 2773 cp 8
6968 20 06       0 2774 jr nz, __SET_PAPER2
696A 13          0 2775 inc de
696B 1A          0 2776 ld a, (de)
696C F6 38       0 2777 or 038h
696E 12          0 2778 ld (de), a
696F C9          0 2779 ret
6970             0 2781 ; Another entry. This will set the paper color at location pointer by DE
6970             0 2782 __SET_PAPER2:
6970 E6 07       0 2783 and 7	; # Remove
6972 07          0 2784 rlca
6973 07          0 2785 rlca
6974 07          0 2786 rlca		; a *= 8
6975 47          0 2788 ld b, a	; Saves the color
6976 1A          0 2789 ld a, (de)
6977 E6 C7       0 2790 and 0C7h ; Clears previous value
6979 B0          0 2791 or b
697A 12          0 2792 ld (de), a
697B 13          0 2793 inc de ; Points to MASK_T or MASK_P accordingly
697C 1A          0 2794 ld a, (de)
697D E6 C7       0 2795 and 0C7h  ; Resets bits 3,4,5
697F 12          0 2796 ld (de), a
6980 C9          0 2797 ret
6981             0 2800 ; Sets the PAPER color passed in A register in the ATTR_T variable
6981             0 2801 PAPER_TMP:
6981 11 8F 5C    0 2802 ld de, ATTR_T
6984 C3 66 69    0 2803 jp __SET_PAPER
6987             0 2809 ; Sets flash flag in ATTR_P permanently
6987             0 2810 ; Parameter: Paper color in A register
6987             0 2814 FLASH:
6987 21 8D 5C    0 2815 ld hl, ATTR_P
698A             0 2821 __SET_FLASH:
698A             0 2822 ; Another entry. This will set the flash flag at location pointer by DE
698A FE 08       0 2823 cp 8
698C 28 0F       0 2824 jr z, IS_TR
698E             0 2826 ; # Convert to 0/1
698E B7          0 2827 or a
698F 28 02       0 2828 jr z, IS_ZERO
6991 3E 80       0 2829 ld a, 0x80
6993             0 2831 IS_ZERO:
6993 47          0 2832 ld b, a	; Saves the color
6994 7E          0 2833 ld a, (hl)
6995 E6 7F       0 2834 and 07Fh ; Clears previous value
6997 B0          0 2835 or b
6998 77          0 2836 ld (hl), a
6999 23          0 2837 inc hl
699A CB BE       0 2838 res 7, (hl)  ;Reset bit 7 to disable transparency
699C C9          0 2839 ret
699D             0 2841 IS_TR:  ; transparent
699D 23          0 2842 inc hl ; Points DE to MASK_T or MASK_P
699E CB FE       0 2843 set 7, (hl)  ;Set bit 7 to enable transparency
69A0 C9          0 2844 ret
69A1             0 2846 ; Sets the FLASH flag passed in A register in the ATTR_T variable
69A1             0 2847 FLASH_TMP:
69A1 21 8F 5C    0 2848 ld hl, ATTR_T
69A4 18 E4       0 2849 jr __SET_FLASH
69A6             0 2855 ; Sets bright flag in ATTR_P permanently
69A6             0 2856 ; Parameter: Paper color in A register
69A6             0 2860 BRIGHT:
69A6 21 8D 5C    0 2861 ld hl, ATTR_P
69A9             0 2867 __SET_BRIGHT:
69A9             0 2868 ; Another entry. This will set the bright flag at location pointer by DE
69A9 FE 08       0 2869 cp 8
69AB 28 0F       0 2870 jr z, IS_TR
69AD             0 2872 ; # Convert to 0/1
69AD B7          0 2873 or a
69AE 28 02       0 2874 jr z, IS_ZERO
69B0 3E 40       0 2875 ld a, 0x40
69B2             0 2877 IS_ZERO:
69B2 47          0 2878 ld b, a	; Saves the color
69B3 7E          0 2879 ld a, (hl)
69B4 E6 BF       0 2880 and 0BFh ; Clears previous value
69B6 B0          0 2881 or b
69B7 77          0 2882 ld (hl), a
69B8 23          0 2883 inc hl
69B9 CB B6       0 2884 res 6, (hl)  ;Reset bit 6 to disable transparency
69BB C9          0 2885 ret
69BC             0 2887 IS_TR:  ; transparent
69BC 23          0 2888 inc hl ; Points DE to MASK_T or MASK_P
69BD CB F6       0 2889 set 6, (hl)  ;Set bit 6 to enable transparency
69BF C9          0 2890 ret
69C0             0 2892 ; Sets the BRIGHT flag passed in A register in the ATTR_T variable
69C0             0 2893 BRIGHT_TMP:
69C0 21 8F 5C    0 2894 ld hl, ATTR_T
69C3 18 E4       0 2895 jr __SET_BRIGHT
69C5             0 2900 ; Sets OVER flag in P_FLAG permanently
69C5             0 2901 ; Parameter: OVER flag in bit 0 of A register
69C5             0 2910 COPY_ATTR:
69C5             0 2911 ; Just copies current permanent attribs to temporal attribs
69C5             0 2912 ; and sets print mode
69C5             0 2918 INVERSE1 EQU 02Fh
69C5 2A 8D 5C    0 2920 ld hl, (ATTR_P)
69C8 22 8F 5C    0 2921 ld (ATTR_T), hl
69CB 21 81 5C    0 2923 ld hl, FLAGS2
69CE CD FB 69    0 2924 call __REFRESH_TMP
69D1 21 91 5C    0 2926 ld hl, P_FLAG
69D4 CD FB 69    0 2927 call __REFRESH_TMP
69D7             0 2930 __SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)
69D7 1F          0 2936 rra					; Over bit to carry
69D8 3A 81 5C    0 2937 ld a, (FLAGS2)
69DB 17          0 2938 rla					; Over bit in bit 1, Over2 bit in bit 2
69DC E6 03       0 2939 and 3				; Only bit 0 and 1 (OVER flag)
69DE 4F          0 2941 ld c, a
69DF 06 00       0 2942 ld b, 0
69E1 21 F7 69    0 2944 ld hl, TABLE
69E4 09          0 2945 add hl, bc
69E5 7E          0 2946 ld a, (hl)
69E6 32 FD 6A    0 2947 ld (PRINT_MODE), a
69E9 2A 91 5C    0 2949 ld hl, (P_FLAG)
69EC AF          0 2950 xor a			; NOP -> INVERSE0
69ED CB 55       0 2951 bit 2, l
69EF 28 02       0 2952 jr z, CONT2
69F1 3E 2F       0 2953 ld a, INVERSE1 	; CPL -> INVERSE1
69F3             0 2955 CONT2:
69F3 32 FE 6A    0 2956 ld (INVERSE_MODE), a
69F6 C9          0 2957 ret
69F7             0 2959 TABLE:
69F7 00          0 2960 nop				; NORMAL MODE
69F8 AE          0 2961 xor (hl)		; OVER 1 MODE
69F9 A6          0 2962 and (hl)		; OVER 2 MODE
69FA B6          0 2963 or  (hl)		; OVER 3 MODE
69FB             0 2967 __REFRESH_TMP:
69FB 7E          0 2968 ld a, (hl)
69FC E6 AA       0 2969 and 10101010b
69FE 4F          0 2970 ld c, a
69FF 1F          0 2971 rra
6A00 B1          0 2972 or c
6A01 77          0 2973 ld (hl), a
6A02 C9          0 2974 ret
6A03             0 2981 OVER:
6A03 4F          0 2984 ld c, a ; saves it for later
6A04 E6 02       0 2985 and 2
6A06 21 81 5C    0 2986 ld hl, FLAGS2
6A09 CB 8E       0 2987 res 1, (HL)
6A0B B6          0 2988 or (hl)
6A0C 77          0 2989 ld (hl), a
6A0D 79          0 2991 ld a, c	; Recovers previous value
6A0E E6 01       0 2992 and 1	; # Convert to 0/1
6A10 87          0 2993 add a, a; # Shift left 1 bit for permanent
6A11 21 91 5C    0 2995 ld hl, P_FLAG
6A14 CB 8E       0 2996 res 1, (hl)
6A16 B6          0 2997 or (hl)
6A17 77          0 2998 ld (hl), a
6A18 C9          0 2999 ret
6A19             0 3001 ; Sets OVER flag in P_FLAG temporarily
6A19             0 3002 OVER_TMP:
6A19 4F          0 3003 ld c, a ; saves it for later
6A1A E6 02       0 3004 and 2	; gets bit 1; clears carry
6A1C 1F          0 3005 rra
6A1D 21 81 5C    0 3006 ld hl, FLAGS2
6A20 CB 86       0 3007 res 0, (hl)
6A22 B6          0 3008 or (hl)
6A23 77          0 3009 ld (hl), a
6A24 79          0 3011 ld a, c	; Recovers previous value
6A25 E6 01       0 3012 and 1
6A27 21 91 5C    0 3013 ld hl, P_FLAG
6A2A CB 86       0 3014 res 0, (hl)
6A2C B6          0 3015 or (hl)
6A2D 77          0 3016 ld (hl), a
6A2E C3 D7 69    0 3017 jp __SET_ATTR_MODE
6A31             0 3024 ; Sets INVERSE flag in P_FLAG permanently
6A31             0 3025 ; Parameter: INVERSE flag in bit 0 of A register
6A31             0 3029 INVERSE:
6A31 E6 01       0 3032 and 1	; # Convert to 0/1
6A33 87          0 3033 add a, a; # Shift left 3 bits for permanent
6A34 87          0 3034 add a, a
6A35 87          0 3035 add a, a
6A36 21 91 5C    0 3036 ld hl, P_FLAG
6A39 CB 9E       0 3037 res 3, (hl)
6A3B B6          0 3038 or (hl)
6A3C 77          0 3039 ld (hl), a
6A3D C9          0 3040 ret
6A3E             0 3042 ; Sets INVERSE flag in P_FLAG temporarily
6A3E             0 3043 INVERSE_TMP:
6A3E E6 01       0 3044 and 1
6A40 87          0 3045 add a, a
6A41 87          0 3046 add a, a; # Shift left 2 bits for temporary
6A42 21 91 5C    0 3047 ld hl, P_FLAG
6A45 CB 96       0 3048 res 2, (hl)
6A47 B6          0 3049 or (hl)
6A48 77          0 3050 ld (hl), a
6A49 C3 D7 69    0 3051 jp __SET_ATTR_MODE
6A4C             0 3058 ; Sets BOLD flag in P_FLAG permanently
6A4C             0 3059 ; Parameter: BOLD flag in bit 0 of A register
6A4C             0 3062 BOLD:
6A4C E6 01       0 3065 and 1
6A4E 07          0 3066 rlca
6A4F 07          0 3067 rlca
6A50 07          0 3068 rlca
6A51 21 81 5C    0 3069 ld hl, FLAGS2
6A54 CB 9E       0 3070 res 3, (HL)
6A56 B6          0 3071 or (hl)
6A57 77          0 3072 ld (hl), a
6A58 C9          0 3073 ret
6A59             0 3075 ; Sets BOLD flag in P_FLAG temporarily
6A59             0 3076 BOLD_TMP:
6A59 E6 01       0 3077 and 1
6A5B 07          0 3078 rlca
6A5C 07          0 3079 rlca
6A5D 21 81 5C    0 3080 ld hl, FLAGS2
6A60 CB 96       0 3081 res 2, (hl)
6A62 B6          0 3082 or (hl)
6A63 77          0 3083 ld (hl), a
6A64 C9          0 3084 ret
6A65             0 3091 ; Sets ITALIC flag in P_FLAG permanently
6A65             0 3092 ; Parameter: ITALIC flag in bit 0 of A register
6A65             0 3095 ITALIC:
6A65 E6 01       0 3098 and 1
6A67 0F          0 3099 rrca
6A68 0F          0 3100 rrca
6A69 0F          0 3101 rrca
6A6A 21 81 5C    0 3102 ld hl, FLAGS2
6A6D CB AE       0 3103 res 5, (HL)
6A6F B6          0 3104 or (hl)
6A70 77          0 3105 ld (hl), a
6A71 C9          0 3106 ret
6A72             0 3108 ; Sets ITALIC flag in P_FLAG temporarily
6A72             0 3109 ITALIC_TMP:
6A72 E6 01       0 3110 and 1
6A74 0F          0 3111 rrca
6A75 0F          0 3112 rrca
6A76 0F          0 3113 rrca
6A77 0F          0 3114 rrca
6A78 21 81 5C    0 3115 ld hl, FLAGS2
6A7B CB A6       0 3116 res 4, (hl)
6A7D B6          0 3117 or (hl)
6A7E 77          0 3118 ld (hl), a
6A7F C9          0 3119 ret
6A80             0 3127 ; Putting a comment starting with @INIT <address>
6A80             0 3128 ; will make the compiler to add a CALL to <address>
6A80             0 3129 ; It is useful for initialization routines.
6A80             0 3132 __PRINT_INIT: ; To be called before program starts (initializes library)
6A80 21 A3 6A    0 3135 ld hl, __PRINT_START
6A83 22 92 6A    0 3136 ld (PRINT_JUMP_STATE), hl
6A86 21 21 18    0 3138 ld hl, 1821h
6A89 22 82 5C    0 3139 ld (MAXX), hl  ; Sets current maxX and maxY
6A8C AF          0 3141 xor a
6A8D 32 81 5C    0 3142 ld (FLAGS2), a
6A90 C9          0 3144 ret
6A91             0 3147 __PRINTCHAR: ; Print character store in accumulator (A register)
6A91             0 3148 ; Modifies H'L', B'C', A'F', D'E', A
6A91             0 3163 __ROM_SCROLL_SCR EQU 0DFEh
6A91             0 3164 __TVFLAGS EQU 5C3Ch
6A91             0 3166 PRINT_JUMP_STATE EQU __PRINT_JUMP + 1
6A91             0 3168 __PRINT_JUMP:
6A91 C3 A3 6A    0 3169 jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively
6A94             0 3173 __SCROLL:  ; Scroll?
6A94 21 3C 5C    0 3174 ld hl, __TVFLAGS
6A97 CB 4E       0 3175 bit 1, (hl)
6A99 C8          0 3176 ret z
6A9A CD FE 0D    0 3177 call __ROM_SCROLL_SCR
6A9D 21 3C 5C    0 3178 ld hl, __TVFLAGS
6AA0 CB 8E       0 3179 res 1, (hl)
6AA2 C9          0 3180 ret
6AA3             0 3183 __PRINT_START:
6AA3 FE 20       0 3184 cp ' '
6AA5 DA 22 6B    0 3185 jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones
6AA8 D9          0 3187 exx               ; Switch to alternative registers
6AA9 08          0 3188 ex af, af'        ; Saves a value (char to print) for later
6AAA CD 94 6A    0 3191 call __SCROLL
6AAD CD BF 64    0 3193 call __LOAD_S_POSN
6AB0             0 3195 ; At this point we have the new coord
6AB0 2A F2 64    0 3196 ld hl, (SCREEN_ADDR)
6AB3 7A          0 3198 ld a, d
6AB4 4F          0 3199 ld c, a     ; Saves it for later
6AB5 E6 F8       0 3201 and 0F8h    ; Masks 3 lower bit ; zy
6AB7 57          0 3202 ld d, a
6AB8 79          0 3204 ld a, c     ; Recovers it
6AB9 E6 07       0 3205 and 07h     ; MOD 7 ; y1
6ABB 0F          0 3206 rrca
6ABC 0F          0 3207 rrca
6ABD 0F          0 3208 rrca
6ABE B3          0 3210 or e
6ABF 5F          0 3211 ld e, a
6AC0 19          0 3212 add hl, de    ; HL = Screen address + DE
6AC1 EB          0 3213 ex de, hl     ; DE = Screen address
6AC2 08          0 3215 ex af, af'
6AC3 FE 80       0 3217 cp 80h    ; Is it an UDG or a ?
6AC5 DA E0 6A    0 3218 jp c, __SRCADDR
6AC8 FE 90       0 3220 cp 90h
6ACA D2 D7 6A    0 3221 jp nc, __PRINT_UDG
6ACD             0 3223 ; Print a 8 bit pattern (80h to 8Fh)
6ACD 47          0 3225 ld b, a
6ACE CD 38 0B    0 3226 call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
6AD1 21 92 5C    0 3227 ld hl, MEM0
6AD4 C3 EB 6A    0 3228 jp __PRGRAPH
6AD7             0 3230 PO_GR_1 EQU 0B38h
6AD7             0 3232 __PRINT_UDG:
6AD7 D6 90       0 3233 sub 90h ; Sub ASC code
6AD9 ED 4B 7B 5C 0 3234 ld bc, (UDG)
6ADD C3 E4 6A    0 3235 jp __PRGRAPH0
6AE0             0 3237 __SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
6AE0             0 3238 __SRCADDR:
6AE0 ED 4B 36 5C 0 3239 ld bc, (CHARS)
6AE4             0 3241 __PRGRAPH0:
6AE4 87          0 3242 add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
6AE5 6F          0 3243 ld l, a
6AE6 26 00       0 3244 ld h, 0    ; HL = a * 2 (accumulator)
6AE8 29          0 3245 add hl, hl
6AE9 29          0 3246 add hl, hl ; HL = a * 8
6AEA 09          0 3247 add hl, bc ; HL = CHARS address
6AEB             0 3249 __PRGRAPH:
6AEB EB          0 3250 ex de, hl  ; HL = Write Address, DE = CHARS address
6AEC FD CB 47 56 0 3251 bit 2, (iy + $47)
6AF0 C4 24 6C    0 3252 call nz, __BOLD
6AF3 FD CB 47 66 0 3253 bit 4, (iy + $47)
6AF7 C4 38 6C    0 3254 call nz, __ITALIC
6AFA 06 08       0 3255 ld b, 8 ; 8 bytes per char
6AFC             0 3256 __PRCHAR:
6AFC 1A          0 3257 ld a, (de) ; DE *must* be ALWAYS source, and HL destiny
6AFD             0 3259 PRINT_MODE:     ; Which operation is used to write on the screen
6AFD             0 3260 ; Set it with:
6AFD             0 3261 ; LD A, <OPERATION>
6AFD             0 3262 ; LD (PRINT_MODE), A
6AFD             0 3263 ;
6AFD             0 3264 ; Available opertions:
6AFD             0 3265 ; NORMAL : 0h  --> NOP         ; OVER 0
6AFD             0 3266 ; XOR    : AEh --> XOR (HL)    ; OVER 1
6AFD             0 3267 ; OR     : B6h --> OR (HL)     ; PUTSPRITE
6AFD             0 3268 ; AND    : A6h --> AND (HL)    ; PUTMASK
6AFD 00          0 3269 nop     ;
6AFE             0 3271 INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
6AFE 00          0 3272 nop     ; 2F -> CPL -> INVERSE 1
6AFF 77          0 3274 ld (hl), a
6B00 13          0 3276 inc de
6B01 24          0 3277 inc h     ; Next line
6B02 10 F8       0 3278 djnz __PRCHAR
6B04 CD BF 64    0 3280 call __LOAD_S_POSN
6B07 D5          0 3281 push de
6B08 CD 1E 65    0 3282 call __SET_ATTR
6B0B D1          0 3283 pop de
6B0C 1C          0 3284 inc e            ; COL = COL + 1
6B0D 2A 82 5C    0 3285 ld hl, (MAXX)
6B10 7B          0 3286 ld a, e
6B11 2D          0 3287 dec l            ; l = MAXX
6B12 BD          0 3288 cp l            ; Lower than max?
6B13 DA 1D 6B    0 3289 jp c, __PRINT_CONT; Nothing to do
6B16 CD 30 6B    0 3290 call __PRINT_EOL1
6B19 D9          0 3291 exx            ; counteracts __PRINT_EOL1 exx
6B1A C3 20 6B    0 3292 jp __PRINT_CONT2
6B1D             0 3294 __PRINT_CONT:
6B1D CD CB 64    0 3295 call __SAVE_S_POSN
6B20             0 3297 __PRINT_CONT2:
6B20 D9          0 3298 exx
6B21 C9          0 3299 ret
6B22             0 3301 ; ------------- SPECIAL CHARS (< 32) -----------------
6B22             0 3303 __PRINT_SPECIAL:    ; Jumps here if it is a special char
6B22 D9          0 3304 exx
6B23 21 90 6C    0 3305 ld hl, __PRINT_TABLE
6B26 C3 38 69    0 3306 jp JUMP_HL_PLUS_2A
6B29             0 3309 PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
6B29 D9          0 3310 exx
6B2A             0 3312 __PRINT_0Dh:        ; Called WHEN printing CHR$(13)
6B2A CD 94 6A    0 3314 call __SCROLL
6B2D CD BF 64    0 3316 call __LOAD_S_POSN
6B30             0 3318 __PRINT_EOL1:        ; Another entry called from PRINT when next line required
6B30 1E 00       0 3319 ld e, 0
6B32             0 3321 __PRINT_EOL2:
6B32 7A          0 3322 ld a, d
6B33 3C          0 3323 inc a
6B34             0 3325 __PRINT_AT1_END:
6B34 2A 83 5C    0 3326 ld hl, (MAXY)
6B37 BD          0 3327 cp l
6B38 38 06       0 3328 jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d
6B3A 21 3C 5C    0 3329 ld hl, __TVFLAGS
6B3D CB CE       0 3330 set 1, (hl)
6B3F 7A          0 3331 ld a, d
6B40             0 3333 __PRINT_EOL_END:
6B40 57          0 3334 ld d, a
6B41             0 3336 __PRINT_AT2_END:
6B41 CD CB 64    0 3337 call __SAVE_S_POSN
6B44 D9          0 3338 exx
6B45 C9          0 3339 ret
6B46             0 3341 __PRINT_COM:
6B46 D9          0 3342 exx
6B47 E5          0 3343 push hl
6B48 D5          0 3344 push de
6B49 C5          0 3345 push bc
6B4A CD 5D 6C    0 3346 call PRINT_COMMA
6B4D C1          0 3347 pop bc
6B4E D1          0 3348 pop de
6B4F E1          0 3349 pop hl
6B50 C9          0 3350 ret
6B51             0 3352 __PRINT_TAB:
6B51 21 57 6B    0 3353 ld hl, __PRINT_TAB1
6B54 C3 7D 6B    0 3354 jp __PRINT_SET_STATE
6B57             0 3356 __PRINT_TAB1:
6B57 32 92 5C    0 3357 ld (MEM0), a
6B5A 21 61 6B    0 3358 ld hl, __PRINT_TAB2
6B5D 22 92 6A    0 3359 ld (PRINT_JUMP_STATE), hl
6B60 C9          0 3360 ret
6B61             0 3362 __PRINT_TAB2:
6B61 3A 92 5C    0 3363 ld a, (MEM0)        ; Load tab code (ignore the current one)
6B64 E5          0 3364 push hl
6B65 D5          0 3365 push de
6B66 C5          0 3366 push bc
6B67 21 A3 6A    0 3367 ld hl, __PRINT_START
6B6A 22 92 6A    0 3368 ld (PRINT_JUMP_STATE), hl
6B6D CD 65 6C    0 3369 call PRINT_TAB
6B70 C1          0 3370 pop bc
6B71 D1          0 3371 pop de
6B72 E1          0 3372 pop hl
6B73 C9          0 3373 ret
6B74             0 3375 __PRINT_NOP:
6B74             0 3376 __PRINT_RESTART:
6B74 21 A3 6A    0 3377 ld hl, __PRINT_START
6B77 C3 7D 6B    0 3378 jp __PRINT_SET_STATE
6B7A             0 3380 __PRINT_AT:
6B7A 21 82 6B    0 3381 ld hl, __PRINT_AT1
6B7D             0 3383 __PRINT_SET_STATE:
6B7D 22 92 6A    0 3384 ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
6B80 D9          0 3385 exx
6B81 C9          0 3386 ret
6B82             0 3388 __PRINT_AT1:    ; Jumps here if waiting for 1st parameter
6B82 D9          0 3389 exx
6B83 21 8F 6B    0 3390 ld hl, __PRINT_AT2
6B86 22 92 6A    0 3391 ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
6B89 CD BF 64    0 3392 call __LOAD_S_POSN
6B8C C3 34 6B    0 3393 jp __PRINT_AT1_END
6B8F             0 3395 __PRINT_AT2:
6B8F D9          0 3396 exx
6B90 21 A3 6A    0 3397 ld hl, __PRINT_START
6B93 22 92 6A    0 3398 ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
6B96 CD BF 64    0 3399 call __LOAD_S_POSN
6B99 5F          0 3400 ld e, a
6B9A 2A 82 5C    0 3401 ld hl, (MAXX)
6B9D BE          0 3402 cp (hl)
6B9E 38 A1       0 3403 jr c, __PRINT_AT2_END
6BA0 18 8E       0 3404 jr __PRINT_EOL1
6BA2             0 3406 __PRINT_DEL:
6BA2 CD BF 64    0 3407 call __LOAD_S_POSN        ; Gets current screen position
6BA5 1D          0 3408 dec e
6BA6 3E FF       0 3409 ld a, -1
6BA8 BB          0 3410 cp e
6BA9 C2 41 6B    0 3411 jp nz, __PRINT_AT2_END
6BAC 2A 82 5C    0 3412 ld hl, (MAXX)
6BAF 5D          0 3413 ld e, l
6BB0 1D          0 3414 dec e
6BB1 1D          0 3415 dec e
6BB2 15          0 3416 dec d
6BB3 BA          0 3417 cp d
6BB4 C2 41 6B    0 3418 jp nz, __PRINT_AT2_END
6BB7 54          0 3419 ld d, h
6BB8 15          0 3420 dec d
6BB9 C3 41 6B    0 3421 jp __PRINT_AT2_END
6BBC             0 3423 __PRINT_INK:
6BBC 21 C2 6B    0 3424 ld hl, __PRINT_INK2
6BBF C3 7D 6B    0 3425 jp __PRINT_SET_STATE
6BC2             0 3427 __PRINT_INK2:
6BC2 D9          0 3428 exx
6BC3 CD 5D 69    0 3429 call INK_TMP
6BC6 C3 74 6B    0 3430 jp __PRINT_RESTART
6BC9             0 3432 __PRINT_PAP:
6BC9 21 CF 6B    0 3433 ld hl, __PRINT_PAP2
6BCC C3 7D 6B    0 3434 jp __PRINT_SET_STATE
6BCF             0 3436 __PRINT_PAP2:
6BCF D9          0 3437 exx
6BD0 CD 81 69    0 3438 call PAPER_TMP
6BD3 C3 74 6B    0 3439 jp __PRINT_RESTART
6BD6             0 3441 __PRINT_FLA:
6BD6 21 DC 6B    0 3442 ld hl, __PRINT_FLA2
6BD9 C3 7D 6B    0 3443 jp __PRINT_SET_STATE
6BDC             0 3445 __PRINT_FLA2:
6BDC D9          0 3446 exx
6BDD CD A1 69    0 3447 call FLASH_TMP
6BE0 C3 74 6B    0 3448 jp __PRINT_RESTART
6BE3             0 3450 __PRINT_BRI:
6BE3 21 E9 6B    0 3451 ld hl, __PRINT_BRI2
6BE6 C3 7D 6B    0 3452 jp __PRINT_SET_STATE
6BE9             0 3454 __PRINT_BRI2:
6BE9 D9          0 3455 exx
6BEA CD C0 69    0 3456 call BRIGHT_TMP
6BED C3 74 6B    0 3457 jp __PRINT_RESTART
6BF0             0 3459 __PRINT_INV:
6BF0 21 F6 6B    0 3460 ld hl, __PRINT_INV2
6BF3 C3 7D 6B    0 3461 jp __PRINT_SET_STATE
6BF6             0 3463 __PRINT_INV2:
6BF6 D9          0 3464 exx
6BF7 CD 3E 6A    0 3465 call INVERSE_TMP
6BFA C3 74 6B    0 3466 jp __PRINT_RESTART
6BFD             0 3468 __PRINT_OVR:
6BFD 21 03 6C    0 3469 ld hl, __PRINT_OVR2
6C00 C3 7D 6B    0 3470 jp __PRINT_SET_STATE
6C03             0 3472 __PRINT_OVR2:
6C03 D9          0 3473 exx
6C04 CD 19 6A    0 3474 call OVER_TMP
6C07 C3 74 6B    0 3475 jp __PRINT_RESTART
6C0A             0 3477 __PRINT_BOLD:
6C0A 21 10 6C    0 3478 ld hl, __PRINT_BOLD2
6C0D C3 7D 6B    0 3479 jp __PRINT_SET_STATE
6C10             0 3481 __PRINT_BOLD2:
6C10 D9          0 3482 exx
6C11 CD 59 6A    0 3483 call BOLD_TMP
6C14 C3 74 6B    0 3484 jp __PRINT_RESTART
6C17             0 3486 __PRINT_ITA:
6C17 21 1D 6C    0 3487 ld hl, __PRINT_ITA2
6C1A C3 7D 6B    0 3488 jp __PRINT_SET_STATE
6C1D             0 3490 __PRINT_ITA2:
6C1D D9          0 3491 exx
6C1E CD 72 6A    0 3492 call ITALIC_TMP
6C21 C3 74 6B    0 3493 jp __PRINT_RESTART
6C24             0 3496 __BOLD:
6C24 E5          0 3497 push hl
6C25 21 92 5C    0 3498 ld hl, MEM0
6C28 06 08       0 3499 ld b, 8
6C2A             0 3500 __BOLD_LOOP:
6C2A 1A          0 3501 ld a, (de)
6C2B 4F          0 3502 ld c, a
6C2C 07          0 3503 rlca
6C2D B1          0 3504 or c
6C2E 77          0 3505 ld (hl), a
6C2F 23          0 3506 inc hl
6C30 13          0 3507 inc de
6C31 10 F7       0 3508 djnz __BOLD_LOOP
6C33 E1          0 3509 pop hl
6C34 11 92 5C    0 3510 ld de, MEM0
6C37 C9          0 3511 ret
6C38             0 3514 __ITALIC:
6C38 E5          0 3515 push hl
6C39 21 92 5C    0 3516 ld hl, MEM0
6C3C EB          0 3517 ex de, hl
6C3D 01 08 00    0 3518 ld bc, 8
6C40 ED B0       0 3519 ldir
6C42 21 92 5C    0 3520 ld hl, MEM0
6C45 CB 3E       0 3521 srl (hl)
6C47 23          0 3522 inc hl
6C48 CB 3E       0 3523 srl (hl)
6C4A 23          0 3524 inc hl
6C4B CB 3E       0 3525 srl (hl)
6C4D 23          0 3526 inc hl
6C4E 23          0 3527 inc hl
6C4F 23          0 3528 inc hl
6C50 CB 26       0 3529 sla (hl)
6C52 23          0 3530 inc hl
6C53 CB 26       0 3531 sla (hl)
6C55 23          0 3532 inc hl
6C56 CB 26       0 3533 sla (hl)
6C58 E1          0 3534 pop hl
6C59 11 92 5C    0 3535 ld de, MEM0
6C5C C9          0 3536 ret
6C5D             0 3538 PRINT_COMMA:
6C5D CD BF 64    0 3539 call __LOAD_S_POSN
6C60 7B          0 3540 ld a, e
6C61 E6 10       0 3541 and 16
6C63 C6 10       0 3542 add a, 16
6C65             0 3544 PRINT_TAB:
6C65 3C          0 3548 inc a
6C66 CD BF 64    0 3549 call __LOAD_S_POSN ; e = current row
6C69 57          0 3550 ld d, a
6C6A 7B          0 3551 ld a, e
6C6B FE 21       0 3552 cp 21h
6C6D 20 02       0 3553 jr nz, CONTINUE
6C6F 1E FF       0 3554 ld e, -1
6C71             0 3555 CONTINUE:
6C71 7A          0 3556 ld a, d
6C72 1C          0 3557 inc e
6C73 93          0 3558 sub e  ; A = A - E
6C74 E6 1F       0 3559 and 31 ;
6C76 C8          0 3560 ret z  ; Already at position E
6C77 47          0 3561 ld b, a
6C78             0 3562 LOOP:
6C78 3E 20       0 3563 ld a, ' '
6C7A CD 91 6A    0 3564 call __PRINTCHAR
6C7D 10 F9       0 3565 djnz LOOP
6C7F C9          0 3566 ret
6C80             0 3569 PRINT_AT: ; Changes cursor to ROW, COL
6C80             0 3570 ; COL in A register
6C80             0 3571 ; ROW in stack
6C80 E1          0 3573 pop hl    ; Ret address
6C81 E3          0 3574 ex (sp), hl ; callee H = ROW
6C82 6F          0 3575 ld l, a
6C83 EB          0 3576 ex de, hl
6C84 CD D5 64    0 3578 call __IN_SCREEN
6C87 D0          0 3579 ret nc    ; Return if out of screen
6C88 21 3C 5C    0 3580 ld hl, __TVFLAGS
6C8B CB 8E       0 3581 res 1, (hl)
6C8D C3 CB 64    0 3582 jp __SAVE_S_POSN
6C90             0 3603 __PRINT_TABLE:    ; Jump table for 0 .. 22 codes
6C90 74 6B       0 3605 DW __PRINT_NOP    ;  0
6C92 74 6B       0 3606 DW __PRINT_NOP    ;  1
6C94 74 6B       0 3607 DW __PRINT_NOP    ;  2
6C96 74 6B       0 3608 DW __PRINT_NOP    ;  3
6C98 74 6B       0 3609 DW __PRINT_NOP    ;  4
6C9A 74 6B       0 3610 DW __PRINT_NOP    ;  5
6C9C 46 6B       0 3611 DW __PRINT_COM    ;  6 COMMA
6C9E 74 6B       0 3612 DW __PRINT_NOP    ;  7
6CA0 A2 6B       0 3613 DW __PRINT_DEL    ;  8 DEL
6CA2 74 6B       0 3614 DW __PRINT_NOP    ;  9
6CA4 74 6B       0 3615 DW __PRINT_NOP    ; 10
6CA6 74 6B       0 3616 DW __PRINT_NOP    ; 11
6CA8 74 6B       0 3617 DW __PRINT_NOP    ; 12
6CAA 2A 6B       0 3618 DW __PRINT_0Dh    ; 13
6CAC 0A 6C       0 3619 DW __PRINT_BOLD   ; 14
6CAE 17 6C       0 3620 DW __PRINT_ITA    ; 15
6CB0 BC 6B       0 3621 DW __PRINT_INK    ; 16
6CB2 C9 6B       0 3622 DW __PRINT_PAP    ; 17
6CB4 D6 6B       0 3623 DW __PRINT_FLA    ; 18
6CB6 E3 6B       0 3624 DW __PRINT_BRI    ; 19
6CB8 F0 6B       0 3625 DW __PRINT_INV    ; 20
6CBA FD 6B       0 3626 DW __PRINT_OVR    ; 21
6CBC 7A 6B       0 3627 DW __PRINT_AT     ; 22 AT
6CBE 51 6B       0 3628 DW __PRINT_TAB    ; 23 TAB
6CC0             0 3641 ; vim: ts=4:et:sw=4:
6CC0             0 3642 ; Copyleft (K) by Jose M. Rodriguez de la Rosa
6CC0             0 3643 ;  (a.k.a. Boriel)
6CC0             0 3644 ;  http://www.boriel.com
6CC0             0 3645 ;
6CC0             0 3646 ; This ASM library is licensed under the BSD license
6CC0             0 3647 ; you can use it for any purpose (even for commercial
6CC0             0 3648 ; closed source programs).
6CC0             0 3649 ;
6CC0             0 3650 ; Please read the BSD license on the internet
6CC0             0 3652 ; ----- IMPLEMENTATION NOTES ------
6CC0             0 3653 ; The heap is implemented as a linked list of free blocks.
6CC0             0 3655 ; Each free block contains this info:
6CC0             0 3656 ;
6CC0             0 3657 ; +----------------+ <-- HEAP START
6CC0             0 3658 ; | Size (2 bytes) |
6CC0             0 3659 ; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
6CC0             0 3660 ; +----------------+
6CC0             0 3661 ; | Next (2 bytes) |---+
6CC0             0 3662 ; +----------------+ <-+
6CC0             0 3663 ; | Size (2 bytes) |
6CC0             0 3664 ; +----------------+
6CC0             0 3665 ; | Next (2 bytes) |---+
6CC0             0 3666 ; +----------------+   |
6CC0             0 3667 ; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
6CC0             0 3668 ; | (0 if Size = 4)|   |
6CC0             0 3669 ; +----------------+ <-+
6CC0             0 3670 ; | Size (2 bytes) |
6CC0             0 3671 ; +----------------+
6CC0             0 3672 ; | Next (2 bytes) |---+
6CC0             0 3673 ; +----------------+   |
6CC0             0 3674 ; | <free bytes...>|   |
6CC0             0 3675 ; | (0 if Size = 4)|   |
6CC0             0 3676 ; +----------------+   |
6CC0             0 3677 ;   <Allocated>        | <-- This zone is in use (Already allocated)
6CC0             0 3678 ; +----------------+ <-+
6CC0             0 3679 ; | Size (2 bytes) |
6CC0             0 3680 ; +----------------+
6CC0             0 3681 ; | Next (2 bytes) |---+
6CC0             0 3682 ; +----------------+   |
6CC0             0 3683 ; | <free bytes...>|   |
6CC0             0 3684 ; | (0 if Size = 4)|   |
6CC0             0 3685 ; +----------------+ <-+
6CC0             0 3686 ; | Next (2 bytes) |--> NULL => END OF LIST
6CC0             0 3687 ; |    0 = NULL    |
6CC0             0 3688 ; +----------------+
6CC0             0 3689 ; | <free bytes...>|
6CC0             0 3690 ; | (0 if Size = 4)|
6CC0             0 3691 ; +----------------+
6CC0             0 3694 ; When a block is FREED, the previous and next pointers are examined to see
6CC0             0 3695 ; if we can defragment the heap. If the block to be breed is just next to the
6CC0             0 3696 ; previous, or to the next (or both) they will be converted into a single
6CC0             0 3697 ; block (so defragmented).
6CC0             0 3700 ;   MEMORY MANAGER
6CC0             0 3701 ;
6CC0             0 3702 ; This library must be initialized calling __MEM_INIT with
6CC0             0 3703 ; HL = BLOCK Start & DE = Length.
6CC0             0 3705 ; An init directive is useful for initialization routines.
6CC0             0 3706 ; They will be added automatically if needed.
6CC0             0 3710 ; vim: ts=4:et:sw=4:
6CC0             0 3711 ; Copyleft (K) by Jose M. Rodriguez de la Rosa
6CC0             0 3712 ;  (a.k.a. Boriel)
6CC0             0 3713 ;  http://www.boriel.com
6CC0             0 3714 ;
6CC0             0 3715 ; This ASM library is licensed under the BSD license
6CC0             0 3716 ; you can use it for any purpose (even for commercial
6CC0             0 3717 ; closed source programs).
6CC0             0 3718 ;
6CC0             0 3719 ; Please read the BSD license on the internet
6CC0             0 3721 ; ----- IMPLEMENTATION NOTES ------
6CC0             0 3722 ; The heap is implemented as a linked list of free blocks.
6CC0             0 3724 ; Each free block contains this info:
6CC0             0 3725 ;
6CC0             0 3726 ; +----------------+ <-- HEAP START
6CC0             0 3727 ; | Size (2 bytes) |
6CC0             0 3728 ; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
6CC0             0 3729 ; +----------------+
6CC0             0 3730 ; | Next (2 bytes) |---+
6CC0             0 3731 ; +----------------+ <-+
6CC0             0 3732 ; | Size (2 bytes) |
6CC0             0 3733 ; +----------------+
6CC0             0 3734 ; | Next (2 bytes) |---+
6CC0             0 3735 ; +----------------+   |
6CC0             0 3736 ; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
6CC0             0 3737 ; | (0 if Size = 4)|   |
6CC0             0 3738 ; +----------------+ <-+
6CC0             0 3739 ; | Size (2 bytes) |
6CC0             0 3740 ; +----------------+
6CC0             0 3741 ; | Next (2 bytes) |---+
6CC0             0 3742 ; +----------------+   |
6CC0             0 3743 ; | <free bytes...>|   |
6CC0             0 3744 ; | (0 if Size = 4)|   |
6CC0             0 3745 ; +----------------+   |
6CC0             0 3746 ;   <Allocated>        | <-- This zone is in use (Already allocated)
6CC0             0 3747 ; +----------------+ <-+
6CC0             0 3748 ; | Size (2 bytes) |
6CC0             0 3749 ; +----------------+
6CC0             0 3750 ; | Next (2 bytes) |---+
6CC0             0 3751 ; +----------------+   |
6CC0             0 3752 ; | <free bytes...>|   |
6CC0             0 3753 ; | (0 if Size = 4)|   |
6CC0             0 3754 ; +----------------+ <-+
6CC0             0 3755 ; | Next (2 bytes) |--> NULL => END OF LIST
6CC0             0 3756 ; |    0 = NULL    |
6CC0             0 3757 ; +----------------+
6CC0             0 3758 ; | <free bytes...>|
6CC0             0 3759 ; | (0 if Size = 4)|
6CC0             0 3760 ; +----------------+
6CC0             0 3763 ; When a block is FREED, the previous and next pointers are examined to see
6CC0             0 3764 ; if we can defragment the heap. If the block to be breed is just next to the
6CC0             0 3765 ; previous, or to the next (or both) they will be converted into a single
6CC0             0 3766 ; block (so defragmented).
6CC0             0 3769 ;   MEMORY MANAGER
6CC0             0 3770 ;
6CC0             0 3771 ; This library must be initialized calling __MEM_INIT with
6CC0             0 3772 ; HL = BLOCK Start & DE = Length.
6CC0             0 3774 ; An init directive is useful for initialization routines.
6CC0             0 3775 ; They will be added automatically if needed.
6CC0             0 3780 ; ---------------------------------------------------------------------
6CC0             0 3781 ;  __MEM_INIT must be called to initalize this library with the
6CC0             0 3782 ; standard parameters
6CC0             0 3783 ; ---------------------------------------------------------------------
6CC0             0 3784 __MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
6CC0 21 44 70    0 3785 ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
6CC3 11 00 04    0 3786 ld de, ZXBASIC_HEAP_SIZE ; Change this with your size
6CC6             0 3788 ; ---------------------------------------------------------------------
6CC6             0 3789 ;  __MEM_INIT2 initalizes this library
6CC6             0 3790 ; Parameters:
6CC6             0 3791 ;   HL : Memory address of 1st byte of the memory heap
6CC6             0 3792 ;   DE : Length in bytes of the Memory Heap
6CC6             0 3793 ; ---------------------------------------------------------------------
6CC6             0 3794 __MEM_INIT2:
6CC6             0 3795 ; HL as TOP
6CC6 1B          0 3798 dec de
6CC7 1B          0 3799 dec de
6CC8 1B          0 3800 dec de
6CC9 1B          0 3801 dec de        ; DE = length - 4; HL = start
6CCA             0 3802 ; This is done, because we require 4 bytes for the empty dummy-header block
6CCA AF          0 3804 xor a
6CCB 77          0 3805 ld (hl), a
6CCC 23          0 3806 inc hl
6CCD 77          0 3807 ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
6CCE 23          0 3808 inc hl
6CCF 44          0 3810 ld b, h
6CD0 4D          0 3811 ld c, l
6CD1 03          0 3812 inc bc
6CD2 03          0 3813 inc bc      ; BC = starts of next block
6CD3 71          0 3815 ld (hl), c
6CD4 23          0 3816 inc hl
6CD5 70          0 3817 ld (hl), b
6CD6 23          0 3818 inc hl      ; Pointer to next block
6CD7 73          0 3820 ld (hl), e
6CD8 23          0 3821 inc hl
6CD9 72          0 3822 ld (hl), d
6CDA 23          0 3823 inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory
6CDB 77          0 3825 ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
6CDC 23          0 3826 inc hl
6CDD 77          0 3827 ld (hl), a
6CDE 3E C9       0 3829 ld a, 201
6CE0 32 C0 6C    0 3830 ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
6CE3 C9          0 3831 ret
6CE4             0 3837 ; ---------------------------------------------------------------------
6CE4             0 3838 ; MEM_FREE
6CE4             0 3839 ;  Frees a block of memory
6CE4             0 3840 ;
6CE4             0 3841 ; Parameters:
6CE4             0 3842 ;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
6CE4             0 3843 ;  is done
6CE4             0 3844 ; ---------------------------------------------------------------------
6CE4             0 3846 MEM_FREE:
6CE4             0 3847 __MEM_FREE: ; Frees the block pointed by HL
6CE4             0 3848 ; HL DE BC & AF modified
6CE4 7C          0 3856 ld a, h
6CE5 B5          0 3857 or l
6CE6 C8          0 3858 ret z       ; Return if NULL pointer
6CE7 2B          0 3860 dec hl
6CE8 2B          0 3861 dec hl
6CE9 44          0 3862 ld b, h
6CEA 4D          0 3863 ld c, l    ; BC = Block pointer
6CEB 21 44 70    0 3865 ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
6CEE             0 3867 __MEM_LOOP2:
6CEE 23          0 3868 inc hl
6CEF 23          0 3869 inc hl     ; Next block ptr
6CF0 5E          0 3871 ld e, (hl)
6CF1 23          0 3872 inc hl
6CF2 56          0 3873 ld d, (hl) ; Block next ptr
6CF3 EB          0 3874 ex de, hl  ; DE = &(block->next); HL = block->next
6CF4 7C          0 3876 ld a, h    ; HL == NULL?
6CF5 B5          0 3877 or l
6CF6 CA 00 6D    0 3878 jp z, __MEM_LINK_PREV; if so, link with previous
6CF9 B7          0 3880 or a       ; Clear carry flag
6CFA ED 42       0 3881 sbc hl, bc ; Carry if BC > HL => This block if before
6CFC 09          0 3882 add hl, bc ; Restores HL, preserving Carry flag
6CFD DA EE 6C    0 3883 jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block
6D00             0 3885 ;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next
6D00             0 3887 __MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
6D00 EB          0 3888 ex de, hl
6D01 E5          0 3889 push hl
6D02 2B          0 3890 dec hl
6D03 71          0 3892 ld (hl), c
6D04 23          0 3893 inc hl
6D05 70          0 3894 ld (hl), b ; (DE) <- BC
6D06 60          0 3896 ld h, b    ; HL <- BC (Free block ptr)
6D07 69          0 3897 ld l, c
6D08 23          0 3898 inc hl     ; Skip block length (2 bytes)
6D09 23          0 3899 inc hl
6D0A 73          0 3900 ld (hl), e ; Block->next = DE
6D0B 23          0 3901 inc hl
6D0C 72          0 3902 ld (hl), d
6D0D             0 3903 ; --- LINKED ; HL = &(BC->next) + 2
6D0D CD 11 6D    0 3905 call __MEM_JOIN_TEST
6D10 E1          0 3906 pop hl
6D11             0 3908 __MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
6D11             0 3909 ; hl = Ptr to current block + 2
6D11 56          0 3910 ld d, (hl)
6D12 2B          0 3911 dec hl
6D13 5E          0 3912 ld e, (hl)
6D14 2B          0 3913 dec hl
6D15 46          0 3914 ld b, (hl) ; Loads block length into BC
6D16 2B          0 3915 dec hl
6D17 4E          0 3916 ld c, (hl) ;
6D18 E5          0 3918 push hl    ; Saves it for later
6D19 09          0 3919 add hl, bc ; Adds its length. If HL == DE now, it must be joined
6D1A B7          0 3920 or a
6D1B ED 52       0 3921 sbc hl, de ; If Z, then HL == DE => We must join
6D1D E1          0 3922 pop hl
6D1E C0          0 3923 ret nz
6D1F             0 3925 __MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
6D1F E5          0 3926 push hl    ; Saves it for later
6D20 EB          0 3927 ex de, hl
6D21 5E          0 3929 ld e, (hl) ; DE -> block->next->length
6D22 23          0 3930 inc hl
6D23 56          0 3931 ld d, (hl)
6D24 23          0 3932 inc hl
6D25 EB          0 3934 ex de, hl  ; DE = &(block->next)
6D26 09          0 3935 add hl, bc ; HL = Total Length
6D27 44          0 3937 ld b, h
6D28 4D          0 3938 ld c, l    ; BC = Total Length
6D29 EB          0 3940 ex de, hl
6D2A 5E          0 3941 ld e, (hl)
6D2B 23          0 3942 inc hl
6D2C 56          0 3943 ld d, (hl) ; DE = block->next
6D2D E1          0 3945 pop hl     ; Recovers Pointer to block
6D2E 71          0 3946 ld (hl), c
6D2F 23          0 3947 inc hl
6D30 70          0 3948 ld (hl), b ; Length Saved
6D31 23          0 3949 inc hl
6D32 73          0 3950 ld (hl), e
6D33 23          0 3951 inc hl
6D34 72          0 3952 ld (hl), d ; Next saved
6D35 C9          0 3953 ret
6D36             0 3959 ; PRINT command routine
6D36             0 3960 ; Prints string pointed by HL
6D36             0 3962 PRINT_STR:
6D36             0 3963 __PRINTSTR:		; __FASTCALL__ Entry to print_string
6D36 57          0 3968 ld d, a ; Saves A reg (Flag) for later
6D37 7C          0 3970 ld a, h
6D38 B5          0 3971 or l
6D39 C8          0 3972 ret z	; Return if the pointer is NULL
6D3A E5          0 3974 push hl
6D3B 4E          0 3976 ld c, (hl)
6D3C 23          0 3977 inc hl
6D3D 46          0 3978 ld b, (hl)
6D3E 23          0 3979 inc hl	; BC = LEN(a$); HL = &a$
6D3F             0 3981 __PRINT_STR_LOOP:
6D3F 78          0 3982 ld a, b
6D40 B1          0 3983 or c
6D41 28 09       0 3984 jr z, __PRINT_STR_END 	; END if BC (counter = 0)
6D43 7E          0 3986 ld a, (hl)
6D44 CD 91 6A    0 3987 call __PRINTCHAR
6D47 23          0 3988 inc hl
6D48 0B          0 3989 dec bc
6D49 C3 3F 6D    0 3990 jp __PRINT_STR_LOOP
6D4C             0 3992 __PRINT_STR_END:
6D4C E1          0 3993 pop hl
6D4D 7A          0 3994 ld a, d ; Recovers A flag
6D4E B7          0 3995 or a   ; If not 0 this is a temporary string. Free it
6D4F C8          0 3996 ret z
6D50 C3 E4 6C    0 3997 jp __MEM_FREE ; Frees str from heap and return from there
6D53             0 3999 __PRINT_STR:
6D53             0 4000 ; Fastcall Entry
6D53             0 4001 ; It ONLY prints strings
6D53             0 4002 ; HL = String start
6D53             0 4003 ; BC = String length (Number of chars)
6D53 E5          0 4004 push hl ; Push str address for later
6D54 57          0 4005 ld d, a ; Saves a FLAG
6D55 C3 3F 6D    0 4006 jp __PRINT_STR_LOOP
6D58             0 4013 ; Stores FP number in A ED CB at location HL+IX
6D58             0 4014 ; HL = Offset
6D58             0 4015 ; IX = Stack Frame
6D58             0 4016 ; A ED CB = FP Number
6D58             0 4020 __PISTOREF:	; Indect Stores a float (A, E, D, C, B) at location stored in memory, pointed by (IX + HL)
6D58 D5          0 4021 push de
6D59 EB          0 4022 ex de, hl	; DE <- HL
6D5A DD E5       0 4023 push ix
6D5C E1          0 4024 pop hl		; HL <- IX
6D5D 19          0 4025 add hl, de  ; HL <- IX + HL
6D5E D1          0 4026 pop de
6D5F             0 4028 __ISTOREF:  ; Load address at hl, and stores A,E,D,C,B registers at that address. Modifies A' register
6D5F 08          0 4029 ex af, af'
6D60 7E          0 4030 ld a, (hl)
6D61 23          0 4031 inc hl
6D62 66          0 4032 ld h, (hl)
6D63 6F          0 4033 ld l, a     ; HL = (HL)
6D64 08          0 4034 ex af, af'
6D65             0 4036 __STOREF:	; Stores the given FP number in A EDCB at address HL
6D65 77          0 4037 ld (hl), a
6D66 23          0 4038 inc hl
6D67 73          0 4039 ld (hl), e
6D68 23          0 4040 inc hl
6D69 72          0 4041 ld (hl), d
6D6A 23          0 4042 inc hl
6D6B 71          0 4043 ld (hl), c
6D6C 23          0 4044 inc hl
6D6D 70          0 4045 ld (hl), b
6D6E C9          0 4046 ret
6D6F             0 4050 ; Stored a float number in A ED CB into the address pointed by IX + HL
6D6F             0 4051 __PSTOREF:
6D6F D5          0 4052 push de
6D70 EB          0 4053 ex de, hl  ; DE <- HL
6D71 DD E5       0 4054 push ix
6D73 E1          0 4055 pop hl	   ; HL <- IX
6D74 19          0 4056 add hl, de ; HL <- IX + DE
6D75 D1          0 4057 pop de
6D76 C3 65 6D    0 4058 jp __STOREF
6D79             0 4065 __ABS32:
6D79 CB 7A       0 4066 bit 7, d
6D7B C8          0 4067 ret z
6D7C             0 4069 __NEG32: ; Negates DEHL (Two's complement)
6D7C 7D          0 4070 ld a, l
6D7D 2F          0 4071 cpl
6D7E 6F          0 4072 ld l, a
6D7F 7C          0 4074 ld a, h
6D80 2F          0 4075 cpl
6D81 67          0 4076 ld h, a
6D82 7B          0 4078 ld a, e
6D83 2F          0 4079 cpl
6D84 5F          0 4080 ld e, a
6D85 7A          0 4082 ld a, d
6D86 2F          0 4083 cpl
6D87 57          0 4084 ld d, a
6D88 2C          0 4086 inc l
6D89 C0          0 4087 ret nz
6D8A 24          0 4089 inc h
6D8B C0          0 4090 ret nz
6D8C 13          0 4092 inc de
6D8D C9          0 4093 ret
6D8E             0 4096 __I8TOFREG:
6D8E 6F          0 4097 ld l, a
6D8F 07          0 4098 rlca
6D90 9F          0 4099 sbc a, a	; A = SGN(A)
6D91 67          0 4100 ld h, a
6D92 5F          0 4101 ld e, a
6D93 57          0 4102 ld d, a
6D94             0 4104 __I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
6D94             0 4105 ; to a Floating Point Number returned in (A ED CB)
6D94 7A          0 4107 ld a, d
6D95 B7          0 4108 or a		; Test sign
6D96 F2 A7 6D    0 4110 jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned
6D99 CD 7C 6D    0 4112 call __NEG32		; Convert it to positive
6D9C CD A7 6D    0 4113 call __U32TOFREG	; Convert it to Floating point
6D9F CB FB       0 4115 set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
6DA1 C9          0 4116 ret
6DA2             0 4118 __U8TOFREG:
6DA2             0 4119 ; Converts an unsigned 8 bit (A) to Floating point
6DA2 6F          0 4120 ld l, a
6DA3 26 00       0 4121 ld h, 0
6DA5 5C          0 4122 ld e, h
6DA6 54          0 4123 ld d, h
6DA7             0 4125 __U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
6DA7             0 4126 ; to a Floating point number returned in A ED CB
6DA7 7A          0 4132 ld a, d
6DA8 B3          0 4133 or e
6DA9 B4          0 4134 or h
6DAA B5          0 4135 or l
6DAB 42          0 4136 ld b, d
6DAC 4B          0 4137 ld c, e		; Returns 00 0000 0000 if ZERO
6DAD C8          0 4138 ret z
6DAE D5          0 4140 push de
6DAF E5          0 4141 push hl
6DB0 D9          0 4143 exx
6DB1 D1          0 4144 pop de  ; Loads integer into B'C' D'E'
6DB2 C1          0 4145 pop bc
6DB3 D9          0 4146 exx
6DB4 2E 80       0 4148 ld l, 128	; Exponent
6DB6 01 00 00    0 4149 ld bc, 0	; DEBC = 0
6DB9 50          0 4150 ld d, b
6DBA 59          0 4151 ld e, c
6DBB             0 4153 __U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
6DBB D9          0 4154 exx
6DBC 7A          0 4155 ld a, d 	; B'C'D'E' == 0 ?
6DBD B3          0 4156 or e
6DBE B0          0 4157 or b
6DBF B1          0 4158 or c
6DC0 CA D8 6D    0 4159 jp z, __U32TOFREG_END	; We are done
6DC3 CB 38       0 4161 srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
6DC5 CB 19       0 4162 rr c
6DC7 CB 1A       0 4163 rr d
6DC9 CB 1B       0 4164 rr e
6DCB D9          0 4165 exx
6DCC CB 1B       0 4167 rr e ; Shift EDCB >> 1, inserting the carry on the left
6DCE CB 1A       0 4168 rr d
6DD0 CB 19       0 4169 rr c
6DD2 CB 18       0 4170 rr b
6DD4 2C          0 4172 inc l	; Increment exponent
6DD5 C3 BB 6D    0 4173 jp __U32TOFREG_LOOP
6DD8             0 4176 __U32TOFREG_END:
6DD8 D9          0 4177 exx
6DD9 7D          0 4178 ld a, l     ; Puts the exponent in a
6DDA CB BB       0 4179 res 7, e	; Sets the sign bit to 0 (positive)
6DDC C9          0 4181 ret
6DDD             0 4186 ZXBASIC_USER_DATA:
6DDD             0 4187 _pattern:
6DDD E9 6D       0 4188 DEFW __LABEL35
6DDF             0 4189 _pattern.__DATA__.__PTR__:
6DDF E1 6D       0 4190 DEFW _pattern.__DATA__
6DE1             0 4191 _pattern.__DATA__:
6DE1 AA          0 4192 DEFB 0AAh
6DE2 55          0 4193 DEFB 55h
6DE3 AA          0 4194 DEFB 0AAh
6DE4 55          0 4195 DEFB 55h
6DE5 AA          0 4196 DEFB 0AAh
6DE6 55          0 4197 DEFB 55h
6DE7 AA          0 4198 DEFB 0AAh
6DE8 55          0 4199 DEFB 55h
6DE9             0 4200 __LABEL35:
6DE9 00 00       0 4201 DEFW 0000h
6DEB 01          0 4202 DEFB 01h
6DEC             0 4203 _vectImg:
6DEC 3F 70       0 4204 DEFW __LABEL36
6DEE             0 4205 _vectImg.__DATA__.__PTR__:
6DEE F0 6D       0 4206 DEFW _vectImg.__DATA__
6DF0             0 4207 _vectImg.__DATA__:
6DF0 FA          0 4208 DEFB 0FAh
6DF1 7C          0 4209 DEFB 7Ch
6DF2 69          0 4210 DEFB 69h
6DF3 76          0 4211 DEFB 76h
6DF4 64          0 4212 DEFB 64h
6DF5 2A          0 4213 DEFB 2Ah
6DF6 63          0 4214 DEFB 63h
6DF7 2E          0 4215 DEFB 2Eh
6DF8 4D          0 4216 DEFB 4Dh
6DF9 43          0 4217 DEFB 43h
6DFA 4E          0 4218 DEFB 4Eh
6DFB 42          0 4219 DEFB 42h
6DFC 4A          0 4220 DEFB 4Ah
6DFD 48          0 4221 DEFB 48h
6DFE 47          0 4222 DEFB 47h
6DFF 50          0 4223 DEFB 50h
6E00 50          0 4224 DEFB 50h
6E01 6C          0 4225 DEFB 6Ch
6E02 58          0 4226 DEFB 58h
6E03 4F          0 4227 DEFB 4Fh
6E04 62          0 4228 DEFB 62h
6E05 FA          0 4229 DEFB 0FAh
6E06 4F          0 4230 DEFB 4Fh
6E07 4F          0 4231 DEFB 4Fh
6E08 51          0 4232 DEFB 51h
6E09 54          0 4233 DEFB 54h
6E0A 48          0 4234 DEFB 48h
6E0B 54          0 4235 DEFB 54h
6E0C 44          0 4236 DEFB 44h
6E0D 4E          0 4237 DEFB 4Eh
6E0E C8          0 4238 DEFB 0C8h
6E0F 73          0 4239 DEFB 73h
6E10 5F          0 4240 DEFB 5Fh
6E11 6C          0 4241 DEFB 6Ch
6E12 59          0 4242 DEFB 59h
6E13 CC          0 4243 DEFB 0CCh
6E14 75          0 4244 DEFB 75h
6E15 4A          0 4245 DEFB 4Ah
6E16 FA          0 4246 DEFB 0FAh
6E17 86          0 4247 DEFB 86h
6E18 61          0 4248 DEFB 61h
6E19 79          0 4249 DEFB 79h
6E1A 53          0 4250 DEFB 53h
6E1B 71          0 4251 DEFB 71h
6E1C 60          0 4252 DEFB 60h
6E1D FA          0 4253 DEFB 0FAh
6E1E 77          0 4254 DEFB 77h
6E1F 57          0 4255 DEFB 57h
6E20 6C          0 4256 DEFB 6Ch
6E21 4D          0 4257 DEFB 4Dh
6E22 58          0 4258 DEFB 58h
6E23 43          0 4259 DEFB 43h
6E24 49          0 4260 DEFB 49h
6E25 47          0 4261 DEFB 47h
6E26 FA          0 4262 DEFB 0FAh
6E27 7E          0 4263 DEFB 7Eh
6E28 92          0 4264 DEFB 92h
6E29 76          0 4265 DEFB 76h
6E2A 97          0 4266 DEFB 97h
6E2B 2C          0 4267 DEFB 2Ch
6E2C A0          0 4268 DEFB 0A0h
6E2D 30          0 4269 DEFB 30h
6E2E B0          0 4270 DEFB 0B0h
6E2F 47          0 4271 DEFB 47h
6E30 B0          0 4272 DEFB 0B0h
6E31 49          0 4273 DEFB 49h
6E32 A8          0 4274 DEFB 0A8h
6E33 52          0 4275 DEFB 52h
6E34 A8          0 4276 DEFB 0A8h
6E35 51          0 4277 DEFB 51h
6E36 AF          0 4278 DEFB 0AFh
6E37 72          0 4279 DEFB 72h
6E38 A8          0 4280 DEFB 0A8h
6E39 75          0 4281 DEFB 75h
6E3A A5          0 4282 DEFB 0A5h
6E3B 4E          0 4283 DEFB 4Eh
6E3C 9C          0 4284 DEFB 9Ch
6E3D FA          0 4285 DEFB 0FAh
6E3E 75          0 4286 DEFB 75h
6E3F A6          0 4287 DEFB 0A6h
6E40 75          0 4288 DEFB 75h
6E41 9A          0 4289 DEFB 9Ah
6E42 81          0 4290 DEFB 81h
6E43 A5          0 4291 DEFB 0A5h
6E44 89          0 4292 DEFB 89h
6E45 98          0 4293 DEFB 98h
6E46 FA          0 4294 DEFB 0FAh
6E47 72          0 4295 DEFB 72h
6E48 A7          0 4296 DEFB 0A7h
6E49 7F          0 4297 DEFB 7Fh
6E4A B2          0 4298 DEFB 0B2h
6E4B 8C          0 4299 DEFB 8Ch
6E4C B7          0 4300 DEFB 0B7h
6E4D 96          0 4301 DEFB 96h
6E4E B6          0 4302 DEFB 0B6h
6E4F A0          0 4303 DEFB 0A0h
6E50 AD          0 4304 DEFB 0ADh
6E51 A8          0 4305 DEFB 0A8h
6E52 98          0 4306 DEFB 98h
6E53 FA          0 4307 DEFB 0FAh
6E54 9C          0 4308 DEFB 9Ch
6E55 9A          0 4309 DEFB 9Ah
6E56 96          0 4310 DEFB 96h
6E57 A4          0 4311 DEFB 0A4h
6E58 89          0 4312 DEFB 89h
6E59 98          0 4313 DEFB 98h
6E5A FA          0 4314 DEFB 0FAh
6E5B 2C          0 4315 DEFB 2Ch
6E5C 59          0 4316 DEFB 59h
6E5D 13          0 4317 DEFB 13h
6E5E 5E          0 4318 DEFB 5Eh
6E5F 10          0 4319 DEFB 10h
6E60 61          0 4320 DEFB 61h
6E61 12          0 4321 DEFB 12h
6E62 63          0 4322 DEFB 63h
6E63 12          0 4323 DEFB 12h
6E64 7E          0 4324 DEFB 7Eh
6E65 14          0 4325 DEFB 14h
6E66 81          0 4326 DEFB 81h
6E67 23          0 4327 DEFB 23h
6E68 80          0 4328 DEFB 80h
6E69 31          0 4329 DEFB 31h
6E6A 8E          0 4330 DEFB 8Eh
6E6B FA          0 4331 DEFB 0FAh
6E6C 27          0 4332 DEFB 27h
6E6D 83          0 4333 DEFB 83h
6E6E 16          0 4334 DEFB 16h
6E6F 83          0 4335 DEFB 83h
6E70 13          0 4336 DEFB 13h
6E71 87          0 4337 DEFB 87h
6E72 15          0 4338 DEFB 15h
6E73 9E          0 4339 DEFB 9Eh
6E74 17          0 4340 DEFB 17h
6E75 A0          0 4341 DEFB 0A0h
6E76 20          0 4342 DEFB 20h
6E77 A0          0 4343 DEFB 0A0h
6E78 26          0 4344 DEFB 26h
6E79 A4          0 4345 DEFB 0A4h
6E7A 2B          0 4346 DEFB 2Bh
6E7B A3          0 4347 DEFB 0A3h
6E7C FA          0 4348 DEFB 0FAh
6E7D 42          0 4349 DEFB 42h
6E7E 9D          0 4350 DEFB 9Dh
6E7F 40          0 4351 DEFB 40h
6E80 8C          0 4352 DEFB 8Ch
6E81 40          0 4353 DEFB 40h
6E82 7F          0 4354 DEFB 7Fh
6E83 40          0 4355 DEFB 40h
6E84 63          0 4356 DEFB 63h
6E85 FA          0 4357 DEFB 0FAh
6E86 4B          0 4358 DEFB 4Bh
6E87 9C          0 4359 DEFB 9Ch
6E88 4A          0 4360 DEFB 4Ah
6E89 88          0 4361 DEFB 88h
6E8A 46          0 4362 DEFB 46h
6E8B 88          0 4363 DEFB 88h
6E8C 43          0 4364 DEFB 43h
6E8D 85          0 4365 DEFB 85h
6E8E 48          0 4366 DEFB 48h
6E8F 7E          0 4367 DEFB 7Eh
6E90 48          0 4368 DEFB 48h
6E91 63          0 4369 DEFB 63h
6E92 FA          0 4370 DEFB 0FAh
6E93 48          0 4371 DEFB 48h
6E94 7F          0 4372 DEFB 7Fh
6E95 65          0 4373 DEFB 65h
6E96 80          0 4374 DEFB 80h
6E97 6C          0 4375 DEFB 6Ch
6E98 7A          0 4376 DEFB 7Ah
6E99 71          0 4377 DEFB 71h
6E9A 7D          0 4378 DEFB 7Dh
6E9B 6E          0 4379 DEFB 6Eh
6E9C 81          0 4380 DEFB 81h
6E9D 72          0 4381 DEFB 72h
6E9E 85          0 4382 DEFB 85h
6E9F 6E          0 4383 DEFB 6Eh
6EA0 89          0 4384 DEFB 89h
6EA1 6A          0 4385 DEFB 6Ah
6EA2 85          0 4386 DEFB 85h
6EA3 4A          0 4387 DEFB 4Ah
6EA4 88          0 4388 DEFB 88h
6EA5 CB          0 4389 DEFB 0CBh
6EA6 7C          0 4390 DEFB 7Ch
6EA7 69          0 4391 DEFB 69h
6EA8 7E          0 4392 DEFB 7Eh
6EA9 92          0 4393 DEFB 92h
6EAA 84          0 4394 DEFB 84h
6EAB C5          0 4395 DEFB 0C5h
6EAC 7C          0 4396 DEFB 7Ch
6EAD 69          0 4397 DEFB 69h
6EAE A5          0 4398 DEFB 0A5h
6EAF 6A          0 4399 DEFB 6Ah
6EB0 01          0 4400 DEFB 01h
6EB1 BB          0 4401 DEFB 0BBh
6EB2 7E          0 4402 DEFB 7Eh
6EB3 91          0 4403 DEFB 91h
6EB4 A7          0 4404 DEFB 0A7h
6EB5 90          0 4405 DEFB 90h
6EB6 81          0 4406 DEFB 81h
6EB7 67          0 4407 DEFB 67h
6EB8 FA          0 4408 DEFB 0FAh
6EB9 94          0 4409 DEFB 94h
6EBA 65          0 4410 DEFB 65h
6EBB 98          0 4411 DEFB 98h
6EBC 62          0 4412 DEFB 62h
6EBD AC          0 4413 DEFB 0ACh
6EBE 66          0 4414 DEFB 66h
6EBF AF          0 4415 DEFB 0AFh
6EC0 64          0 4416 DEFB 64h
6EC1 AC          0 4417 DEFB 0ACh
6EC2 60          0 4418 DEFB 60h
6EC3 B4          0 4419 DEFB 0B4h
6EC4 66          0 4420 DEFB 66h
6EC5 B7          0 4421 DEFB 0B7h
6EC6 63          0 4422 DEFB 63h
6EC7 BA          0 4423 DEFB 0BAh
6EC8 6A          0 4424 DEFB 6Ah
6EC9 B7          0 4425 DEFB 0B7h
6ECA 6D          0 4426 DEFB 6Dh
6ECB CB          0 4427 DEFB 0CBh
6ECC B7          0 4428 DEFB 0B7h
6ECD 6D          0 4429 DEFB 6Dh
6ECE B9          0 4430 DEFB 0B9h
6ECF 8C          0 4431 DEFB 8Ch
6ED0 03          0 4432 DEFB 03h
6ED1 67          0 4433 DEFB 67h
6ED2 FA          0 4434 DEFB 0FAh
6ED3 B9          0 4435 DEFB 0B9h
6ED4 8C          0 4436 DEFB 8Ch
6ED5 BD          0 4437 DEFB 0BDh
6ED6 8A          0 4438 DEFB 8Ah
6ED7 B6          0 4439 DEFB 0B6h
6ED8 94          0 4440 DEFB 94h
6ED9 FA          0 4441 DEFB 0FAh
6EDA B6          0 4442 DEFB 0B6h
6EDB 93          0 4443 DEFB 93h
6EDC B3          0 4444 DEFB 0B3h
6EDD 94          0 4445 DEFB 94h
6EDE AD          0 4446 DEFB 0ADh
6EDF 97          0 4447 DEFB 97h
6EE0 9B          0 4448 DEFB 9Bh
6EE1 98          0 4449 DEFB 98h
6EE2 98          0 4450 DEFB 98h
6EE3 94          0 4451 DEFB 94h
6EE4 FA          0 4452 DEFB 0FAh
6EE5 A8          0 4453 DEFB 0A8h
6EE6 91          0 4454 DEFB 91h
6EE7 AD          0 4455 DEFB 0ADh
6EE8 8A          0 4456 DEFB 8Ah
6EE9 A8          0 4457 DEFB 0A8h
6EEA 84          0 4458 DEFB 84h
6EEB AE          0 4459 DEFB 0AEh
6EEC 83          0 4460 DEFB 83h
6EED A8          0 4461 DEFB 0A8h
6EEE 7A          0 4462 DEFB 7Ah
6EEF AC          0 4463 DEFB 0ACh
6EF0 7A          0 4464 DEFB 7Ah
6EF1 AF          0 4465 DEFB 0AFh
6EF2 7D          0 4466 DEFB 7Dh
6EF3 AF          0 4467 DEFB 0AFh
6EF4 72          0 4468 DEFB 72h
6EF5 AA          0 4469 DEFB 0AAh
6EF6 6D          0 4470 DEFB 6Dh
6EF7 A5          0 4471 DEFB 0A5h
6EF8 68          0 4472 DEFB 68h
6EF9 FA          0 4473 DEFB 0FAh
6EFA 10          0 4474 DEFB 10h
6EFB 61          0 4475 DEFB 61h
6EFC 08          0 4476 DEFB 08h
6EFD 58          0 4477 DEFB 58h
6EFE 05          0 4478 DEFB 05h
6EFF 58          0 4479 DEFB 58h
6F00 03          0 4480 DEFB 03h
6F01 5C          0 4481 DEFB 5Ch
6F02 04          0 4482 DEFB 04h
6F03 6A          0 4483 DEFB 6Ah
6F04 08          0 4484 DEFB 08h
6F05 73          0 4485 DEFB 73h
6F06 08          0 4486 DEFB 08h
6F07 7B          0 4487 DEFB 7Bh
6F08 09          0 4488 DEFB 09h
6F09 7E          0 4489 DEFB 7Eh
6F0A 0A          0 4490 DEFB 0Ah
6F0B 81          0 4491 DEFB 81h
6F0C 11          0 4492 DEFB 11h
6F0D 81          0 4493 DEFB 81h
6F0E 12          0 4494 DEFB 12h
6F0F 7F          0 4495 DEFB 7Fh
6F10 FA          0 4496 DEFB 0FAh
6F11 13          0 4497 DEFB 13h
6F12 87          0 4498 DEFB 87h
6F13 10          0 4499 DEFB 10h
6F14 84          0 4500 DEFB 84h
6F15 0A          0 4501 DEFB 0Ah
6F16 84          0 4502 DEFB 84h
6F17 05          0 4503 DEFB 05h
6F18 A6          0 4504 DEFB 0A6h
6F19 09          0 4505 DEFB 09h
6F1A AA          0 4506 DEFB 0AAh
6F1B 15          0 4507 DEFB 15h
6F1C 9D          0 4508 DEFB 9Dh
6F1D CB          0 4509 DEFB 0CBh
6F1E 95          0 4510 DEFB 95h
6F1F 74          0 4511 DEFB 74h
6F20 95          0 4512 DEFB 95h
6F21 7A          0 4513 DEFB 7Ah
6F22 07          0 4514 DEFB 07h
6F23 7D          0 4515 DEFB 7Dh
6F24 95          0 4516 DEFB 95h
6F25 82          0 4517 DEFB 82h
6F26 95          0 4518 DEFB 95h
6F27 86          0 4519 DEFB 86h
6F28 08          0 4520 DEFB 08h
6F29 22          0 4521 DEFB 22h
6F2A 88          0 4522 DEFB 88h
6F2B 6E          0 4523 DEFB 6Eh
6F2C 8A          0 4524 DEFB 8Ah
6F2D 8D          0 4525 DEFB 8Dh
6F2E 81          0 4526 DEFB 81h
6F2F F9          0 4527 DEFB 0F9h
6F30 84          0 4528 DEFB 84h
6F31 6B          0 4529 DEFB 6Bh
6F32 87          0 4530 DEFB 87h
6F33 90          0 4531 DEFB 90h
6F34 84          0 4532 DEFB 84h
6F35 A5          0 4533 DEFB 0A5h
6F36 88          0 4534 DEFB 88h
6F37 6E          0 4535 DEFB 6Eh
6F38 84          0 4536 DEFB 84h
6F39 6B          0 4537 DEFB 6Bh
6F3A 83          0 4538 DEFB 83h
6F3B 96          0 4539 DEFB 96h
6F3C 87          0 4540 DEFB 87h
6F3D 8F          0 4541 DEFB 8Fh
6F3E 8A          0 4542 DEFB 8Ah
6F3F 8B          0 4543 DEFB 8Bh
6F40 84          0 4544 DEFB 84h
6F41 1D          0 4545 DEFB 1Dh
6F42 FA          0 4546 DEFB 0FAh
6F43 85          0 4547 DEFB 85h
6F44 69          0 4548 DEFB 69h
6F45 8A          0 4549 DEFB 8Ah
6F46 6A          0 4550 DEFB 6Ah
6F47 8B          0 4551 DEFB 8Bh
6F48 6E          0 4552 DEFB 6Eh
6F49 89          0 4553 DEFB 89h
6F4A 78          0 4554 DEFB 78h
6F4B 88          0 4555 DEFB 88h
6F4C 7D          0 4556 DEFB 7Dh
6F4D 89          0 4557 DEFB 89h
6F4E 84          0 4558 DEFB 84h
6F4F 8C          0 4559 DEFB 8Ch
6F50 8A          0 4560 DEFB 8Ah
6F51 8C          0 4561 DEFB 8Ch
6F52 8E          0 4562 DEFB 8Eh
6F53 89          0 4563 DEFB 89h
6F54 91          0 4564 DEFB 91h
6F55 FA          0 4565 DEFB 0FAh
6F56 90          0 4566 DEFB 90h
6F57 7F          0 4567 DEFB 7Fh
6F58 8C          0 4568 DEFB 8Ch
6F59 82          0 4569 DEFB 82h
6F5A 8B          0 4570 DEFB 8Bh
6F5B 80          0 4571 DEFB 80h
6F5C 8A          0 4572 DEFB 8Ah
6F5D 7E          0 4573 DEFB 7Eh
6F5E 8B          0 4574 DEFB 8Bh
6F5F 7A          0 4575 DEFB 7Ah
6F60 FA          0 4576 DEFB 0FAh
6F61 9B          0 4577 DEFB 9Bh
6F62 7A          0 4578 DEFB 7Ah
6F63 A1          0 4579 DEFB 0A1h
6F64 73          0 4580 DEFB 73h
6F65 9F          0 4581 DEFB 9Fh
6F66 6F          0 4582 DEFB 6Fh
6F67 A1          0 4583 DEFB 0A1h
6F68 6F          0 4584 DEFB 6Fh
6F69 A4          0 4585 DEFB 0A4h
6F6A 73          0 4586 DEFB 73h
6F6B 9B          0 4587 DEFB 9Bh
6F6C 7A          0 4588 DEFB 7Ah
6F6D FA          0 4589 DEFB 0FAh
6F6E 9C          0 4590 DEFB 9Ch
6F6F 81          0 4591 DEFB 81h
6F70 A2          0 4592 DEFB 0A2h
6F71 88          0 4593 DEFB 88h
6F72 A2          0 4594 DEFB 0A2h
6F73 8B          0 4595 DEFB 8Bh
6F74 A4          0 4596 DEFB 0A4h
6F75 8C          0 4597 DEFB 8Ch
6F76 A5          0 4598 DEFB 0A5h
6F77 8A          0 4599 DEFB 8Ah
6F78 A5          0 4600 DEFB 0A5h
6F79 87          0 4601 DEFB 87h
6F7A 9D          0 4602 DEFB 9Dh
6F7B 81          0 4603 DEFB 81h
6F7C FA          0 4604 DEFB 0FAh
6F7D 7E          0 4605 DEFB 7Eh
6F7E 68          0 4606 DEFB 68h
6F7F 8B          0 4607 DEFB 8Bh
6F80 5E          0 4608 DEFB 5Eh
6F81 93          0 4609 DEFB 93h
6F82 5E          0 4610 DEFB 5Eh
6F83 96          0 4611 DEFB 96h
6F84 61          0 4612 DEFB 61h
6F85 94          0 4613 DEFB 94h
6F86 64          0 4614 DEFB 64h
6F87 FA          0 4615 DEFB 0FAh
6F88 88          0 4616 DEFB 88h
6F89 95          0 4617 DEFB 95h
6F8A 8F          0 4618 DEFB 8Fh
6F8B 9C          0 4619 DEFB 9Ch
6F8C 98          0 4620 DEFB 98h
6F8D 9C          0 4621 DEFB 9Ch
6F8E 9A          0 4622 DEFB 9Ah
6F8F 99          0 4623 DEFB 99h
6F90 98          0 4624 DEFB 98h
6F91 94          0 4625 DEFB 94h
6F92 C8          0 4626 DEFB 0C8h
6F93 47          0 4627 DEFB 47h
6F94 B0          0 4628 DEFB 0B0h
6F95 51          0 4629 DEFB 51h
6F96 AF          0 4630 DEFB 0AFh
6F97 CC          0 4631 DEFB 0CCh
6F98 08          0 4632 DEFB 08h
6F99 7C          0 4633 DEFB 7Ch
6F9A 1D          0 4634 DEFB 1Dh
6F9B 73          0 4635 DEFB 73h
6F9C 1E          0 4636 DEFB 1Eh
6F9D 70          0 4637 DEFB 70h
6F9E 1B          0 4638 DEFB 1Bh
6F9F 8A          0 4639 DEFB 8Ah
6FA0 20          0 4640 DEFB 20h
6FA1 76          0 4641 DEFB 76h
6FA2 1F          0 4642 DEFB 1Fh
6FA3 75          0 4643 DEFB 75h
6FA4 72          0 4644 DEFB 72h
6FA5 AC          0 4645 DEFB 0ACh
6FA6 B5          0 4646 DEFB 0B5h
6FA7 6C          0 4647 DEFB 6Ch
6FA8 B3          0 4648 DEFB 0B3h
6FA9 94          0 4649 DEFB 94h
6FAA 5C          0 4650 DEFB 5Ch
6FAB 83          0 4651 DEFB 83h
6FAC CB          0 4652 DEFB 0CBh
6FAD 85          0 4653 DEFB 85h
6FAE 6B          0 4654 DEFB 6Bh
6FAF 88          0 4655 DEFB 88h
6FB0 8F          0 4656 DEFB 8Fh
6FB1 82          0 4657 DEFB 82h
6FB2 A4          0 4658 DEFB 0A4h
6FB3 BF          0 4659 DEFB 0BFh
6FB4 18          0 4660 DEFB 18h
6FB5 A5          0 4661 DEFB 0A5h
6FB6 07          0 4662 DEFB 07h
6FB7 02          0 4663 DEFB 02h
6FB8 FF          0 4664 DEFB 0FFh
6FB9 A4          0 4665 DEFB 0A4h
6FBA 08          0 4666 DEFB 08h
6FBB 56          0 4667 DEFB 56h
6FBC 15          0 4668 DEFB 15h
6FBD 03          0 4669 DEFB 03h
6FBE 07          0 4670 DEFB 07h
6FBF 56          0 4671 DEFB 56h
6FC0 14          0 4672 DEFB 14h
6FC1 01          0 4673 DEFB 01h
6FC2 35          0 4674 DEFB 35h
6FC3 03          0 4675 DEFB 03h
6FC4 D5          0 4676 DEFB 0D5h
6FC5 BF          0 4677 DEFB 0BFh
6FC6 FF          0 4678 DEFB 0FFh
6FC7 9B          0 4679 DEFB 9Bh
6FC8 DC          0 4680 DEFB 0DCh
6FC9 83          0 4681 DEFB 83h
6FCA 2F          0 4682 DEFB 2Fh
6FCB 9B          0 4683 DEFB 9Bh
6FCC DC          0 4684 DEFB 0DCh
6FCD 50          0 4685 DEFB 50h
6FCE E5          0 4686 DEFB 0E5h
6FCF 84          0 4687 DEFB 84h
6FD0 23          0 4688 DEFB 23h
6FD1 50          0 4689 DEFB 50h
6FD2 E4          0 4690 DEFB 0E4h
6FD3 00          0 4691 DEFB 00h
6FD4 CA          0 4692 DEFB 0CAh
6FD5 83          0 4693 DEFB 83h
6FD6 9C          0 4694 DEFB 9Ch
6FD7 FF          0 4695 DEFB 0FFh
6FD8 79          0 4696 DEFB 79h
6FD9 79          0 4697 DEFB 79h
6FDA 0A          0 4698 DEFB 0Ah
6FDB 78          0 4699 DEFB 78h
6FDC 78          0 4700 DEFB 78h
6FDD 05          0 4701 DEFB 05h
6FDE 79          0 4702 DEFB 79h
6FDF 79          0 4703 DEFB 79h
6FE0 17          0 4704 DEFB 17h
6FE1 78          0 4705 DEFB 78h
6FE2 78          0 4706 DEFB 78h
6FE3 05          0 4707 DEFB 05h
6FE4 79          0 4708 DEFB 79h
6FE5 79          0 4709 DEFB 79h
6FE6 17          0 4710 DEFB 17h
6FE7 78          0 4711 DEFB 78h
6FE8 78          0 4712 DEFB 78h
6FE9 06          0 4713 DEFB 06h
6FEA 79          0 4714 DEFB 79h
6FEB 79          0 4715 DEFB 79h
6FEC 16          0 4716 DEFB 16h
6FED 78          0 4717 DEFB 78h
6FEE 78          0 4718 DEFB 78h
6FEF 06          0 4719 DEFB 06h
6FF0 79          0 4720 DEFB 79h
6FF1 79          0 4721 DEFB 79h
6FF2 16          0 4722 DEFB 16h
6FF3 78          0 4723 DEFB 78h
6FF4 79          0 4724 DEFB 79h
6FF5 78          0 4725 DEFB 78h
6FF6 78          0 4726 DEFB 78h
6FF7 01          0 4727 DEFB 01h
6FF8 79          0 4728 DEFB 79h
6FF9 78          0 4729 DEFB 78h
6FFA 78          0 4730 DEFB 78h
6FFB 00          0 4731 DEFB 00h
6FFC 79          0 4732 DEFB 79h
6FFD 79          0 4733 DEFB 79h
6FFE 16          0 4734 DEFB 16h
6FFF 78          0 4735 DEFB 78h
7000 79          0 4736 DEFB 79h
7001 79          0 4737 DEFB 79h
7002 9F          0 4738 DEFB 9Fh
7003 7A          0 4739 DEFB 7Ah
7004 7A          0 4740 DEFB 7Ah
7005 02          0 4741 DEFB 02h
7006 79          0 4742 DEFB 79h
7007 79          0 4743 DEFB 79h
7008 1A          0 4744 DEFB 1Ah
7009 7A          0 4745 DEFB 7Ah
700A 78          0 4746 DEFB 78h
700B 7A          0 4747 DEFB 7Ah
700C 79          0 4748 DEFB 79h
700D 79          0 4749 DEFB 79h
700E 1B          0 4750 DEFB 1Bh
700F 7A          0 4751 DEFB 7Ah
7010 7A          0 4752 DEFB 7Ah
7011 01          0 4753 DEFB 01h
7012 79          0 4754 DEFB 79h
7013 79          0 4755 DEFB 79h
7014 1C          0 4756 DEFB 1Ch
7015 7A          0 4757 DEFB 7Ah
7016 7A          0 4758 DEFB 7Ah
7017 00          0 4759 DEFB 00h
7018 79          0 4760 DEFB 79h
7019 79          0 4761 DEFB 79h
701A 01          0 4762 DEFB 01h
701B 78          0 4763 DEFB 78h
701C 79          0 4764 DEFB 79h
701D 79          0 4765 DEFB 79h
701E 15          0 4766 DEFB 15h
701F 7A          0 4767 DEFB 7Ah
7020 7A          0 4768 DEFB 7Ah
7021 06          0 4769 DEFB 06h
7022 78          0 4770 DEFB 78h
7023 79          0 4771 DEFB 79h
7024 79          0 4772 DEFB 79h
7025 15          0 4773 DEFB 15h
7026 7A          0 4774 DEFB 7Ah
7027 7A          0 4775 DEFB 7Ah
7028 06          0 4776 DEFB 06h
7029 78          0 4777 DEFB 78h
702A 79          0 4778 DEFB 79h
702B 79          0 4779 DEFB 79h
702C B4          0 4780 DEFB 0B4h
702D 78          0 4781 DEFB 78h
702E 78          0 4782 DEFB 78h
702F 08          0 4783 DEFB 08h
7030 79          0 4784 DEFB 79h
7031 79          0 4785 DEFB 79h
7032 14          0 4786 DEFB 14h
7033 78          0 4787 DEFB 78h
7034 78          0 4788 DEFB 78h
7035 09          0 4789 DEFB 09h
7036 79          0 4790 DEFB 79h
7037 79          0 4791 DEFB 79h
7038 13          0 4792 DEFB 13h
7039 78          0 4793 DEFB 78h
703A 78          0 4794 DEFB 78h
703B 09          0 4795 DEFB 09h
703C 79          0 4796 DEFB 79h
703D 79          0 4797 DEFB 79h
703E 08          0 4798 DEFB 08h
703F             0 4799 __LABEL36:
703F 00 00       0 4800 DEFW 0000h
7041 01          0 4801 DEFB 01h
7042             0 4802 __LABEL33:
7042 00          0 4803 DEFB 00h
7043 58          0 4804 DEFB 58h
7044             0 4805 ZXBASIC_MEM_HEAP:
7044             0 4806 ; Defines DATA END
7044             0 4807 ZXBASIC_USER_DATA_END EQU ZXBASIC_MEM_HEAP + ZXBASIC_HEAP_SIZE
7044             0 4808 ; Defines USER DATA Length in bytes
7044             0 4809 ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
7044             0 4810 END
