
; File #0: C:\Users\geniw\source\repos\Vectty\VecttyTest\ZxBasicFiles\Program.zxbas.z80asm

8000             0 2 org 24000
5DC0             0 3 __START_PROGRAM:
5DC0 F3          0 4 di
5DC1 DD E5       0 5 push ix
5DC3 FD E5       0 6 push iy
5DC5 D9          0 7 exx
5DC6 E5          0 8 push hl
5DC7 D9          0 9 exx
5DC8 21 00 00    0 10 ld hl, 0
5DCB 39          0 11 add hl, sp
5DCC 22 EE 5D    0 12 ld (__CALL_BACK__), hl
5DCF FB          0 13 ei
5DD0 21 57 6C    0 14 ld hl, _patterns.__DATA__
5DD3 E5          0 15 push hl
5DD4 21 E4 6B    0 16 ld hl, _testPatterns.__DATA__
5DD7 E5          0 17 push hl
5DD8 CD F0 5D    0 18 call _Dibujar
5DDB 21 00 00    0 19 ld hl, 0
5DDE 44          0 20 ld b, h
5DDF 4D          0 21 ld c, l
5DE0             0 22 __END_PROGRAM:
5DE0 F3          0 23 di
5DE1 2A EE 5D    0 24 ld hl, (__CALL_BACK__)
5DE4 F9          0 25 ld sp, hl
5DE5 D9          0 26 exx
5DE6 E1          0 27 pop hl
5DE7 D9          0 28 exx
5DE8 FD E1       0 29 pop iy
5DEA DD E1       0 30 pop ix
5DEC FB          0 31 ei
5DED C9          0 32 ret
5DEE             0 33 __CALL_BACK__:
5DEE 00 00       0 34 DEFW 0
5DF0             0 35 _Dibujar:
5DF0 DD E5       0 36 push ix
5DF2 DD 21 00 00 0 37 ld ix, 0
5DF6 DD 39       0 38 add ix, sp
5DF8 21 E6 FF    0 39 ld hl, -26
5DFB 39          0 40 add hl, sp
5DFC F9          0 41 ld sp, hl
5DFD 36 00       0 42 ld (hl), 0
5DFF 01 19 00    0 43 ld bc, 25
5E02 54          0 44 ld d, h
5E03 5D          0 45 ld e, l
5E04 13          0 46 inc de
5E05 ED B0       0 47 ldir
5E07 DD E5       0 48 push ix
5E09 E1          0 49 pop hl
5E0A 01 F9 FF    0 50 ld bc, -7
5E0D 09          0 51 add hl, bc
5E0E EB          0 52 ex de, hl
5E0F 21 79 6C    0 53 ld hl, __LABEL32
5E12 01 02 00    0 54 ld bc, 2
5E15 ED B0       0 55 ldir
5E17 DD 6E 04    0 56 ld l, (ix+4)
5E1A DD 66 05    0 57 ld h, (ix+5)
5E1D DD 75 FB    0 58 ld (ix-5), l
5E20 DD 74 FC    0 59 ld (ix-4), h
5E23             0 60 __LABEL0:
5E23 DD 7E FD    0 61 ld a, (ix-3)
5E26 D6 FF       0 62 sub 255
5E28 CA 3F 63    0 63 jp z, __LABEL1
5E2B DD 6E FB    0 64 ld l, (ix-5)
5E2E DD 66 FC    0 65 ld h, (ix-4)
5E31 7E          0 66 ld a, (hl)
5E32 DD 77 FF    0 67 ld (ix-1), a
5E35 F5          0 68 push af
5E36 3E BF       0 69 ld a, 191
5E38 E1          0 70 pop hl
5E39 BC          0 71 cp h
5E3A D2 50 5E    0 72 jp nc, __LABEL3
5E3D DD 7E FF    0 73 ld a, (ix-1)
5E40 DD 77 FD    0 74 ld (ix-3), a
5E43 DD 6E FB    0 75 ld l, (ix-5)
5E46 DD 66 FC    0 76 ld h, (ix-4)
5E49 23          0 77 inc hl
5E4A DD 75 FB    0 78 ld (ix-5), l
5E4D DD 74 FC    0 79 ld (ix-4), h
5E50             0 80 __LABEL3:
5E50 DD 7E FD    0 81 ld a, (ix-3)
5E53 D6 C8       0 82 sub 200
5E55 D6 01       0 83 sub 1
5E57 9F          0 84 sbc a, a
5E58 F5          0 85 push af
5E59 DD 7E FD    0 86 ld a, (ix-3)
5E5C D6 FA       0 87 sub 250
5E5E D6 01       0 88 sub 1
5E60 9F          0 89 sbc a, a
5E61 D1          0 90 pop de
5E62 B2          0 91 or d
5E63 CA 97 5F    0 92 jp z, __LABEL4
5E66 DD 6E FB    0 93 ld l, (ix-5)
5E69 DD 66 FC    0 94 ld h, (ix-4)
5E6C 7E          0 95 ld a, (hl)
5E6D 6F          0 96 ld l, a
5E6E 26 00       0 97 ld h, 0
5E70 DD 75 F1    0 98 ld (ix-15), l
5E73 DD 74 F2    0 99 ld (ix-14), h
5E76 DD 6E FB    0 100 ld l, (ix-5)
5E79 DD 66 FC    0 101 ld h, (ix-4)
5E7C 23          0 102 inc hl
5E7D 7E          0 103 ld a, (hl)
5E7E 6F          0 104 ld l, a
5E7F 26 00       0 105 ld h, 0
5E81 DD 75 F3    0 106 ld (ix-13), l
5E84 DD 74 F4    0 107 ld (ix-12), h
5E87 DD 6E FB    0 108 ld l, (ix-5)
5E8A DD 66 FC    0 109 ld h, (ix-4)
5E8D 23          0 110 inc hl
5E8E 23          0 111 inc hl
5E8F 7E          0 112 ld a, (hl)
5E90 6F          0 113 ld l, a
5E91 26 00       0 114 ld h, 0
5E93 DD 75 ED    0 115 ld (ix-19), l
5E96 DD 74 EE    0 116 ld (ix-18), h
5E99 DD 6E FB    0 117 ld l, (ix-5)
5E9C DD 66 FC    0 118 ld h, (ix-4)
5E9F 23          0 119 inc hl
5EA0 23          0 120 inc hl
5EA1 23          0 121 inc hl
5EA2 7E          0 122 ld a, (hl)
5EA3 6F          0 123 ld l, a
5EA4 26 00       0 124 ld h, 0
5EA6 DD 75 EF    0 125 ld (ix-17), l
5EA9 DD 74 F0    0 126 ld (ix-16), h
5EAC DD 6E FB    0 127 ld l, (ix-5)
5EAF DD 66 FC    0 128 ld h, (ix-4)
5EB2 11 04 00    0 129 ld de, 4
5EB5 19          0 130 add hl, de
5EB6 DD 75 FB    0 131 ld (ix-5), l
5EB9 DD 74 FC    0 132 ld (ix-4), h
5EBC DD 6E F3    0 133 ld l, (ix-13)
5EBF DD 66 F4    0 134 ld h, (ix-12)
5EC2 7D          0 135 ld a, l
5EC3 F5          0 136 push af
5EC4 DD 6E F1    0 137 ld l, (ix-15)
5EC7 DD 66 F2    0 138 ld h, (ix-14)
5ECA 7D          0 139 ld a, l
5ECB CD 62 67    0 140 call PLOT
5ECE DD 6E EF    0 141 ld l, (ix-17)
5ED1 DD 66 F0    0 142 ld h, (ix-16)
5ED4 E5          0 143 push hl
5ED5 DD 6E F3    0 144 ld l, (ix-13)
5ED8 DD 66 F4    0 145 ld h, (ix-12)
5EDB EB          0 146 ex de, hl
5EDC E1          0 147 pop hl
5EDD B7          0 148 or a
5EDE ED 52       0 149 sbc hl, de
5EE0 E5          0 150 push hl
5EE1 DD 6E ED    0 151 ld l, (ix-19)
5EE4 DD 66 EE    0 152 ld h, (ix-18)
5EE7 E5          0 153 push hl
5EE8 DD 6E F1    0 154 ld l, (ix-15)
5EEB DD 66 F2    0 155 ld h, (ix-14)
5EEE EB          0 156 ex de, hl
5EEF E1          0 157 pop hl
5EF0 B7          0 158 or a
5EF1 ED 52       0 159 sbc hl, de
5EF3 CD F5 68    0 160 call DRAW
5EF6 DD 7E FD    0 161 ld a, (ix-3)
5EF9 D6 FA       0 162 sub 250
5EFB C2 94 5F    0 163 jp nz, __LABEL7
5EFE             0 164 __LABEL8:
5EFE DD 6E ED    0 165 ld l, (ix-19)
5F01 DD 66 EE    0 166 ld h, (ix-18)
5F04 E5          0 167 push hl
5F05 11 C8 00    0 168 ld de, 200
5F08 E1          0 169 pop hl
5F09 CD 2F 6B    0 170 call __LTI16
5F0C B7          0 171 or a
5F0D CA 94 5F    0 172 jp z, __LABEL9
5F10 DD 6E EF    0 173 ld l, (ix-17)
5F13 DD 66 F0    0 174 ld h, (ix-16)
5F16 DD 75 F3    0 175 ld (ix-13), l
5F19 DD 74 F4    0 176 ld (ix-12), h
5F1C DD 6E ED    0 177 ld l, (ix-19)
5F1F DD 66 EE    0 178 ld h, (ix-18)
5F22 DD 75 F1    0 179 ld (ix-15), l
5F25 DD 74 F2    0 180 ld (ix-14), h
5F28 DD 6E FB    0 181 ld l, (ix-5)
5F2B DD 66 FC    0 182 ld h, (ix-4)
5F2E 7E          0 183 ld a, (hl)
5F2F 6F          0 184 ld l, a
5F30 26 00       0 185 ld h, 0
5F32 DD 75 ED    0 186 ld (ix-19), l
5F35 DD 74 EE    0 187 ld (ix-18), h
5F38 DD 6E ED    0 188 ld l, (ix-19)
5F3B DD 66 EE    0 189 ld h, (ix-18)
5F3E E5          0 190 push hl
5F3F 11 C8 00    0 191 ld de, 200
5F42 E1          0 192 pop hl
5F43 CD 2F 6B    0 193 call __LTI16
5F46 B7          0 194 or a
5F47 CA 91 5F    0 195 jp z, __LABEL11
5F4A DD 6E FB    0 196 ld l, (ix-5)
5F4D DD 66 FC    0 197 ld h, (ix-4)
5F50 23          0 198 inc hl
5F51 7E          0 199 ld a, (hl)
5F52 6F          0 200 ld l, a
5F53 26 00       0 201 ld h, 0
5F55 DD 75 EF    0 202 ld (ix-17), l
5F58 DD 74 F0    0 203 ld (ix-16), h
5F5B DD 6E FB    0 204 ld l, (ix-5)
5F5E DD 66 FC    0 205 ld h, (ix-4)
5F61 23          0 206 inc hl
5F62 23          0 207 inc hl
5F63 DD 75 FB    0 208 ld (ix-5), l
5F66 DD 74 FC    0 209 ld (ix-4), h
5F69 DD 6E EF    0 210 ld l, (ix-17)
5F6C DD 66 F0    0 211 ld h, (ix-16)
5F6F E5          0 212 push hl
5F70 DD 6E F3    0 213 ld l, (ix-13)
5F73 DD 66 F4    0 214 ld h, (ix-12)
5F76 EB          0 215 ex de, hl
5F77 E1          0 216 pop hl
5F78 B7          0 217 or a
5F79 ED 52       0 218 sbc hl, de
5F7B E5          0 219 push hl
5F7C DD 6E ED    0 220 ld l, (ix-19)
5F7F DD 66 EE    0 221 ld h, (ix-18)
5F82 E5          0 222 push hl
5F83 DD 6E F1    0 223 ld l, (ix-15)
5F86 DD 66 F2    0 224 ld h, (ix-14)
5F89 EB          0 225 ex de, hl
5F8A E1          0 226 pop hl
5F8B B7          0 227 or a
5F8C ED 52       0 228 sbc hl, de
5F8E CD F5 68    0 229 call DRAW
5F91             0 230 __LABEL11:
5F91 C3 FE 5E    0 231 jp __LABEL8
5F94             0 232 __LABEL9:
5F94             0 233 __LABEL7:
5F94 C3 3C 63    0 234 jp __LABEL5
5F97             0 235 __LABEL4:
5F97 DD 7E FD    0 236 ld a, (ix-3)
5F9A D6 C9       0 237 sub 201
5F9C C2 6E 60    0 238 jp nz, __LABEL12
5F9F DD 6E FB    0 239 ld l, (ix-5)
5FA2 DD 66 FC    0 240 ld h, (ix-4)
5FA5 7E          0 241 ld a, (hl)
5FA6 6F          0 242 ld l, a
5FA7 26 00       0 243 ld h, 0
5FA9 DD 75 F1    0 244 ld (ix-15), l
5FAC DD 74 F2    0 245 ld (ix-14), h
5FAF DD 6E FB    0 246 ld l, (ix-5)
5FB2 DD 66 FC    0 247 ld h, (ix-4)
5FB5 23          0 248 inc hl
5FB6 7E          0 249 ld a, (hl)
5FB7 6F          0 250 ld l, a
5FB8 26 00       0 251 ld h, 0
5FBA DD 75 F3    0 252 ld (ix-13), l
5FBD DD 74 F4    0 253 ld (ix-12), h
5FC0 DD 6E FB    0 254 ld l, (ix-5)
5FC3 DD 66 FC    0 255 ld h, (ix-4)
5FC6 23          0 256 inc hl
5FC7 23          0 257 inc hl
5FC8 7E          0 258 ld a, (hl)
5FC9 6F          0 259 ld l, a
5FCA 26 00       0 260 ld h, 0
5FCC DD 75 ED    0 261 ld (ix-19), l
5FCF DD 74 EE    0 262 ld (ix-18), h
5FD2 DD 6E FB    0 263 ld l, (ix-5)
5FD5 DD 66 FC    0 264 ld h, (ix-4)
5FD8 23          0 265 inc hl
5FD9 23          0 266 inc hl
5FDA 23          0 267 inc hl
5FDB 7E          0 268 ld a, (hl)
5FDC 6F          0 269 ld l, a
5FDD 26 00       0 270 ld h, 0
5FDF DD 75 EF    0 271 ld (ix-17), l
5FE2 DD 74 F0    0 272 ld (ix-16), h
5FE5 DD 6E FB    0 273 ld l, (ix-5)
5FE8 DD 66 FC    0 274 ld h, (ix-4)
5FEB 11 04 00    0 275 ld de, 4
5FEE 19          0 276 add hl, de
5FEF DD 75 FB    0 277 ld (ix-5), l
5FF2 DD 74 FC    0 278 ld (ix-4), h
5FF5 DD 6E F3    0 279 ld l, (ix-13)
5FF8 DD 66 F4    0 280 ld h, (ix-12)
5FFB 7D          0 281 ld a, l
5FFC F5          0 282 push af
5FFD DD 6E F1    0 283 ld l, (ix-15)
6000 DD 66 F2    0 284 ld h, (ix-14)
6003 7D          0 285 ld a, l
6004 CD 62 67    0 286 call PLOT
6007 DD 6E EF    0 287 ld l, (ix-17)
600A DD 66 F0    0 288 ld h, (ix-16)
600D E5          0 289 push hl
600E DD 6E F3    0 290 ld l, (ix-13)
6011 DD 66 F4    0 291 ld h, (ix-12)
6014 EB          0 292 ex de, hl
6015 E1          0 293 pop hl
6016 B7          0 294 or a
6017 ED 52       0 295 sbc hl, de
6019 E5          0 296 push hl
601A 21 00 00    0 297 ld hl, 0
601D CD F5 68    0 298 call DRAW
6020 21 00 00    0 299 ld hl, 0
6023 E5          0 300 push hl
6024 DD 6E ED    0 301 ld l, (ix-19)
6027 DD 66 EE    0 302 ld h, (ix-18)
602A E5          0 303 push hl
602B DD 6E F1    0 304 ld l, (ix-15)
602E DD 66 F2    0 305 ld h, (ix-14)
6031 EB          0 306 ex de, hl
6032 E1          0 307 pop hl
6033 B7          0 308 or a
6034 ED 52       0 309 sbc hl, de
6036 CD F5 68    0 310 call DRAW
6039 DD 6E F3    0 311 ld l, (ix-13)
603C DD 66 F4    0 312 ld h, (ix-12)
603F E5          0 313 push hl
6040 DD 6E EF    0 314 ld l, (ix-17)
6043 DD 66 F0    0 315 ld h, (ix-16)
6046 EB          0 316 ex de, hl
6047 E1          0 317 pop hl
6048 B7          0 318 or a
6049 ED 52       0 319 sbc hl, de
604B E5          0 320 push hl
604C 21 00 00    0 321 ld hl, 0
604F CD F5 68    0 322 call DRAW
6052 21 00 00    0 323 ld hl, 0
6055 E5          0 324 push hl
6056 DD 6E F1    0 325 ld l, (ix-15)
6059 DD 66 F2    0 326 ld h, (ix-14)
605C E5          0 327 push hl
605D DD 6E ED    0 328 ld l, (ix-19)
6060 DD 66 EE    0 329 ld h, (ix-18)
6063 EB          0 330 ex de, hl
6064 E1          0 331 pop hl
6065 B7          0 332 or a
6066 ED 52       0 333 sbc hl, de
6068 CD F5 68    0 334 call DRAW
606B C3 3C 63    0 335 jp __LABEL13
606E             0 336 __LABEL12:
606E DD 7E FD    0 337 ld a, (ix-3)
6071 D6 CA       0 338 sub 202
6073 C2 D5 60    0 339 jp nz, __LABEL14
6076 DD 6E FB    0 340 ld l, (ix-5)
6079 DD 66 FC    0 341 ld h, (ix-4)
607C 7E          0 342 ld a, (hl)
607D 6F          0 343 ld l, a
607E 26 00       0 344 ld h, 0
6080 DD 75 F1    0 345 ld (ix-15), l
6083 DD 74 F2    0 346 ld (ix-14), h
6086 DD 6E FB    0 347 ld l, (ix-5)
6089 DD 66 FC    0 348 ld h, (ix-4)
608C 23          0 349 inc hl
608D 7E          0 350 ld a, (hl)
608E 6F          0 351 ld l, a
608F 26 00       0 352 ld h, 0
6091 DD 75 F3    0 353 ld (ix-13), l
6094 DD 74 F4    0 354 ld (ix-12), h
6097 DD 6E FB    0 355 ld l, (ix-5)
609A DD 66 FC    0 356 ld h, (ix-4)
609D 23          0 357 inc hl
609E 23          0 358 inc hl
609F 7E          0 359 ld a, (hl)
60A0 6F          0 360 ld l, a
60A1 26 00       0 361 ld h, 0
60A3 DD 75 EB    0 362 ld (ix-21), l
60A6 DD 74 EC    0 363 ld (ix-20), h
60A9 DD 6E FB    0 364 ld l, (ix-5)
60AC DD 66 FC    0 365 ld h, (ix-4)
60AF 23          0 366 inc hl
60B0 23          0 367 inc hl
60B1 23          0 368 inc hl
60B2 DD 75 FB    0 369 ld (ix-5), l
60B5 DD 74 FC    0 370 ld (ix-4), h
60B8 DD 6E F3    0 371 ld l, (ix-13)
60BB DD 66 F4    0 372 ld h, (ix-12)
60BE 7D          0 373 ld a, l
60BF F5          0 374 push af
60C0 DD 6E F1    0 375 ld l, (ix-15)
60C3 DD 66 F2    0 376 ld h, (ix-14)
60C6 7D          0 377 ld a, l
60C7 F5          0 378 push af
60C8 DD 6E EB    0 379 ld l, (ix-21)
60CB DD 66 EC    0 380 ld h, (ix-20)
60CE 7D          0 381 ld a, l
60CF CD 9D 67    0 382 call CIRCLE
60D2 C3 3C 63    0 383 jp __LABEL15
60D5             0 384 __LABEL14:
60D5 DD 7E FD    0 385 ld a, (ix-3)
60D8 D6 CB       0 386 sub 203
60DA C2 75 62    0 387 jp nz, __LABEL16
60DD DD 6E FB    0 388 ld l, (ix-5)
60E0 DD 66 FC    0 389 ld h, (ix-4)
60E3 7E          0 390 ld a, (hl)
60E4 6F          0 391 ld l, a
60E5 26 00       0 392 ld h, 0
60E7 DD 75 F1    0 393 ld (ix-15), l
60EA DD 74 F2    0 394 ld (ix-14), h
60ED DD 6E FB    0 395 ld l, (ix-5)
60F0 DD 66 FC    0 396 ld h, (ix-4)
60F3 23          0 397 inc hl
60F4 7E          0 398 ld a, (hl)
60F5 6F          0 399 ld l, a
60F6 26 00       0 400 ld h, 0
60F8 DD 75 F3    0 401 ld (ix-13), l
60FB DD 74 F4    0 402 ld (ix-12), h
60FE DD 6E FB    0 403 ld l, (ix-5)
6101 DD 66 FC    0 404 ld h, (ix-4)
6104 23          0 405 inc hl
6105 23          0 406 inc hl
6106 7E          0 407 ld a, (hl)
6107 6F          0 408 ld l, a
6108 26 00       0 409 ld h, 0
610A DD 75 ED    0 410 ld (ix-19), l
610D DD 74 EE    0 411 ld (ix-18), h
6110 DD 6E FB    0 412 ld l, (ix-5)
6113 DD 66 FC    0 413 ld h, (ix-4)
6116 23          0 414 inc hl
6117 23          0 415 inc hl
6118 23          0 416 inc hl
6119 7E          0 417 ld a, (hl)
611A 6F          0 418 ld l, a
611B 26 00       0 419 ld h, 0
611D DD 75 EF    0 420 ld (ix-17), l
6120 DD 74 F0    0 421 ld (ix-16), h
6123 DD 6E FB    0 422 ld l, (ix-5)
6126 DD 66 FC    0 423 ld h, (ix-4)
6129 11 04 00    0 424 ld de, 4
612C 19          0 425 add hl, de
612D 7E          0 426 ld a, (hl)
612E 6F          0 427 ld l, a
612F 26 00       0 428 ld h, 0
6131 DD 75 EB    0 429 ld (ix-21), l
6134 DD 74 EC    0 430 ld (ix-20), h
6137 DD 6E EB    0 431 ld l, (ix-21)
613A DD 66 EC    0 432 ld h, (ix-20)
613D 06 08       0 433 ld b, 8
613F             0 434 __LABEL33:
613F 29          0 435 add hl, hl
6140 10 FD       0 436 djnz __LABEL33
6142 DD 75 EB    0 437 ld (ix-21), l
6145 DD 74 EC    0 438 ld (ix-20), h
6148 DD 6E EB    0 439 ld l, (ix-21)
614B DD 66 EC    0 440 ld h, (ix-20)
614E E5          0 441 push hl
614F DD 6E FB    0 442 ld l, (ix-5)
6152 DD 66 FC    0 443 ld h, (ix-4)
6155 11 05 00    0 444 ld de, 5
6158 19          0 445 add hl, de
6159 7E          0 446 ld a, (hl)
615A 6F          0 447 ld l, a
615B 26 00       0 448 ld h, 0
615D EB          0 449 ex de, hl
615E E1          0 450 pop hl
615F CD D1 66    0 451 call __BOR16
6162 DD 75 EB    0 452 ld (ix-21), l
6165 DD 74 EC    0 453 ld (ix-20), h
6168 DD 6E FB    0 454 ld l, (ix-5)
616B DD 66 FC    0 455 ld h, (ix-4)
616E 11 06 00    0 456 ld de, 6
6171 19          0 457 add hl, de
6172 DD 75 FB    0 458 ld (ix-5), l
6175 DD 74 FC    0 459 ld (ix-4), h
6178 DD 6E EB    0 460 ld l, (ix-21)
617B DD 66 EC    0 461 ld h, (ix-20)
617E E5          0 462 push hl
617F 11 00 80    0 463 ld de, 32768
6182 E1          0 464 pop hl
6183 B7          0 465 or a
6184 ED 52       0 466 sbc hl, de
6186 3F          0 467 ccf
6187 D2 C1 61    0 468 jp nc, __LABEL18
618A DD 6E EB    0 469 ld l, (ix-21)
618D DD 66 EC    0 470 ld h, (ix-20)
6190 11 00 80    0 471 ld de, -32768
6193 19          0 472 add hl, de
6194 11 00 00    0 473 ld de, 0
6197 CD AA 6B    0 474 call __U32TOFREG
619A 21 E6 FF    0 475 ld hl, -26
619D CD 72 6B    0 476 call __PSTOREF
61A0 DD E5       0 477 push ix
61A2 E1          0 478 pop hl
61A3 11 E6 FF    0 479 ld de, -26
61A6 19          0 480 add hl, de
61A7 CD 54 6B    0 481 call __PLOADF
61AA C5          0 482 push bc
61AB D5          0 483 push de
61AC F5          0 484 push af
61AD 3E 84       0 485 ld a, 084h
61AF 11 20 00    0 486 ld de, 00020h
61B2 01 00 00    0 487 ld bc, 00000h
61B5 CD 76 68    0 488 call __DIVF
61B8 21 E6 FF    0 489 ld hl, -26
61BB CD 72 6B    0 490 call __PSTOREF
61BE C3 0F 62    0 491 jp __LABEL19
61C1             0 492 __LABEL18:
61C1 DD 6E EB    0 493 ld l, (ix-21)
61C4 DD 66 EC    0 494 ld h, (ix-20)
61C7 11 00 00    0 495 ld de, 0
61CA CD AA 6B    0 496 call __U32TOFREG
61CD 21 E6 FF    0 497 ld hl, -26
61D0 CD 72 6B    0 498 call __PSTOREF
61D3 DD E5       0 499 push ix
61D5 E1          0 500 pop hl
61D6 11 E6 FF    0 501 ld de, -26
61D9 19          0 502 add hl, de
61DA CD 54 6B    0 503 call __PLOADF
61DD C5          0 504 push bc
61DE D5          0 505 push de
61DF F5          0 506 push af
61E0 3E 84       0 507 ld a, 084h
61E2 11 20 00    0 508 ld de, 00020h
61E5 01 00 00    0 509 ld bc, 00000h
61E8 CD 76 68    0 510 call __DIVF
61EB 21 E6 FF    0 511 ld hl, -26
61EE CD 72 6B    0 512 call __PSTOREF
61F1 DD E5       0 513 push ix
61F3 E1          0 514 pop hl
61F4 11 E6 FF    0 515 ld de, -26
61F7 19          0 516 add hl, de
61F8 CD 54 6B    0 517 call __PLOADF
61FB C5          0 518 push bc
61FC D5          0 519 push de
61FD F5          0 520 push af
61FE 3E 81       0 521 ld a, 081h
6200 11 80 00    0 522 ld de, 00080h
6203 01 00 00    0 523 ld bc, 00000h
6206 CD 3D 6B    0 524 call __MULF
6209 21 E6 FF    0 525 ld hl, -26
620C CD 72 6B    0 526 call __PSTOREF
620F             0 527 __LABEL19:
620F DD E5       0 528 push ix
6211 E1          0 529 pop hl
6212 11 E6 FF    0 530 ld de, -26
6215 19          0 531 add hl, de
6216 CD 54 6B    0 532 call __PLOADF
6219 21 35 12    0 533 ld hl, 01235h
621C E5          0 534 push hl
621D 21 0E FA    0 535 ld hl, 0FA0Eh
6220 E5          0 536 push hl
6221 26 7B       0 537 ld h, 07Bh
6223 E5          0 538 push hl
6224 CD 3D 6B    0 539 call __MULF
6227 21 E6 FF    0 540 ld hl, -26
622A CD 72 6B    0 541 call __PSTOREF
622D DD 6E F3    0 542 ld l, (ix-13)
6230 DD 66 F4    0 543 ld h, (ix-12)
6233 7D          0 544 ld a, l
6234 F5          0 545 push af
6235 DD 6E F1    0 546 ld l, (ix-15)
6238 DD 66 F2    0 547 ld h, (ix-14)
623B 7D          0 548 ld a, l
623C CD 62 67    0 549 call PLOT
623F DD 6E EF    0 550 ld l, (ix-17)
6242 DD 66 F0    0 551 ld h, (ix-16)
6245 E5          0 552 push hl
6246 DD 6E F3    0 553 ld l, (ix-13)
6249 DD 66 F4    0 554 ld h, (ix-12)
624C EB          0 555 ex de, hl
624D E1          0 556 pop hl
624E B7          0 557 or a
624F ED 52       0 558 sbc hl, de
6251 E5          0 559 push hl
6252 DD 6E ED    0 560 ld l, (ix-19)
6255 DD 66 EE    0 561 ld h, (ix-18)
6258 E5          0 562 push hl
6259 DD 6E F1    0 563 ld l, (ix-15)
625C DD 66 F2    0 564 ld h, (ix-14)
625F EB          0 565 ex de, hl
6260 E1          0 566 pop hl
6261 B7          0 567 or a
6262 ED 52       0 568 sbc hl, de
6264 E5          0 569 push hl
6265 DD E5       0 570 push ix
6267 E1          0 571 pop hl
6268 11 E6 FF    0 572 ld de, -26
626B 19          0 573 add hl, de
626C CD 54 6B    0 574 call __PLOADF
626F CD 11 6A    0 575 call DRAW3
6272 C3 3C 63    0 576 jp __LABEL17
6275             0 577 __LABEL16:
6275 DD 7E FD    0 578 ld a, (ix-3)
6278 D6 CC       0 579 sub 204
627A C2 CC 62    0 580 jp nz, __LABEL20
627D DD 6E FB    0 581 ld l, (ix-5)
6280 DD 66 FC    0 582 ld h, (ix-4)
6283 7E          0 583 ld a, (hl)
6284 6F          0 584 ld l, a
6285 26 00       0 585 ld h, 0
6287 DD 75 F1    0 586 ld (ix-15), l
628A DD 74 F2    0 587 ld (ix-14), h
628D DD 6E FB    0 588 ld l, (ix-5)
6290 DD 66 FC    0 589 ld h, (ix-4)
6293 23          0 590 inc hl
6294 7E          0 591 ld a, (hl)
6295 6F          0 592 ld l, a
6296 26 00       0 593 ld h, 0
6298 DD 75 F3    0 594 ld (ix-13), l
629B DD 74 F4    0 595 ld (ix-12), h
629E DD 6E FB    0 596 ld l, (ix-5)
62A1 DD 66 FC    0 597 ld h, (ix-4)
62A4 23          0 598 inc hl
62A5 23          0 599 inc hl
62A6 DD 75 FB    0 600 ld (ix-5), l
62A9 DD 74 FC    0 601 ld (ix-4), h
62AC 21 00 00    0 602 ld hl, 0
62AF E5          0 603 push hl
62B0 21 6A 6C    0 604 ld hl, _ptrnSolido
62B3 CD 7C 66    0 605 call __ARRAY
62B6 E5          0 606 push hl
62B7 DD 6E F1    0 607 ld l, (ix-15)
62BA DD 66 F2    0 608 ld h, (ix-14)
62BD 7D          0 609 ld a, l
62BE F5          0 610 push af
62BF DD 6E F3    0 611 ld l, (ix-13)
62C2 DD 66 F4    0 612 ld h, (ix-12)
62C5 7D          0 613 ld a, l
62C6 CD 51 64    0 614 call _SPPFill
62C9 C3 3C 63    0 615 jp __LABEL21
62CC             0 616 __LABEL20:
62CC DD 7E FD    0 617 ld a, (ix-3)
62CF D6 CD       0 618 sub 205
62D1 C2 3C 63    0 619 jp nz, __LABEL23
62D4 DD 6E FB    0 620 ld l, (ix-5)
62D7 DD 66 FC    0 621 ld h, (ix-4)
62DA 7E          0 622 ld a, (hl)
62DB 6F          0 623 ld l, a
62DC 26 00       0 624 ld h, 0
62DE DD 75 F1    0 625 ld (ix-15), l
62E1 DD 74 F2    0 626 ld (ix-14), h
62E4 DD 6E FB    0 627 ld l, (ix-5)
62E7 DD 66 FC    0 628 ld h, (ix-4)
62EA 23          0 629 inc hl
62EB 7E          0 630 ld a, (hl)
62EC 6F          0 631 ld l, a
62ED 26 00       0 632 ld h, 0
62EF DD 75 F3    0 633 ld (ix-13), l
62F2 DD 74 F4    0 634 ld (ix-12), h
62F5 DD 6E FB    0 635 ld l, (ix-5)
62F8 DD 66 FC    0 636 ld h, (ix-4)
62FB 23          0 637 inc hl
62FC 23          0 638 inc hl
62FD 7E          0 639 ld a, (hl)
62FE 6F          0 640 ld l, a
62FF 26 00       0 641 ld h, 0
6301 DD 75 EB    0 642 ld (ix-21), l
6304 DD 74 EC    0 643 ld (ix-20), h
6307 DD 6E FB    0 644 ld l, (ix-5)
630A DD 66 FC    0 645 ld h, (ix-4)
630D 23          0 646 inc hl
630E 23          0 647 inc hl
630F 23          0 648 inc hl
6310 DD 75 FB    0 649 ld (ix-5), l
6313 DD 74 FC    0 650 ld (ix-4), h
6316 DD 6E 06    0 651 ld l, (ix+6)
6319 DD 66 07    0 652 ld h, (ix+7)
631C E5          0 653 push hl
631D DD 6E EB    0 654 ld l, (ix-21)
6320 DD 66 EC    0 655 ld h, (ix-20)
6323 29          0 656 add hl, hl
6324 29          0 657 add hl, hl
6325 29          0 658 add hl, hl
6326 EB          0 659 ex de, hl
6327 E1          0 660 pop hl
6328 19          0 661 add hl, de
6329 E5          0 662 push hl
632A DD 6E F1    0 663 ld l, (ix-15)
632D DD 66 F2    0 664 ld h, (ix-14)
6330 7D          0 665 ld a, l
6331 F5          0 666 push af
6332 DD 6E F3    0 667 ld l, (ix-13)
6335 DD 66 F4    0 668 ld h, (ix-12)
6338 7D          0 669 ld a, l
6339 CD 51 64    0 670 call _SPPFill
633C             0 671 __LABEL23:
633C             0 672 __LABEL21:
633C             0 673 __LABEL17:
633C             0 674 __LABEL15:
633C             0 675 __LABEL13:
633C             0 676 __LABEL5:
633C C3 23 5E    0 677 jp __LABEL0
633F             0 678 __LABEL1:
633F             0 679 __LABEL24:
633F DD 6E F9    0 680 ld l, (ix-7)
6342 DD 66 FA    0 681 ld h, (ix-6)
6345 E5          0 682 push hl
6346 11 00 5B    0 683 ld de, 23296
6349 E1          0 684 pop hl
634A B7          0 685 or a
634B ED 52       0 686 sbc hl, de
634D D2 47 64    0 687 jp nc, __LABEL25
6350 DD 6E FB    0 688 ld l, (ix-5)
6353 DD 66 FC    0 689 ld h, (ix-4)
6356 7E          0 690 ld a, (hl)
6357 DD 77 FF    0 691 ld (ix-1), a
635A DD 6E F9    0 692 ld l, (ix-7)
635D DD 66 FA    0 693 ld h, (ix-6)
6360 23          0 694 inc hl
6361 E5          0 695 push hl
6362 11 00 5B    0 696 ld de, 23296
6365 E1          0 697 pop hl
6366 B7          0 698 or a
6367 ED 52       0 699 sbc hl, de
6369 D2 1E 64    0 700 jp nc, __LABEL26
636C DD 6E FB    0 701 ld l, (ix-5)
636F DD 66 FC    0 702 ld h, (ix-4)
6372 23          0 703 inc hl
6373 7E          0 704 ld a, (hl)
6374 DD 77 FE    0 705 ld (ix-2), a
6377 DD 96 FF    0 706 sub (ix-1)
637A C2 F5 63    0 707 jp nz, __LABEL28
637D DD 6E FB    0 708 ld l, (ix-5)
6380 DD 66 FC    0 709 ld h, (ix-4)
6383 23          0 710 inc hl
6384 23          0 711 inc hl
6385 7E          0 712 ld a, (hl)
6386 6F          0 713 ld l, a
6387 26 00       0 714 ld h, 0
6389 DD 75 F7    0 715 ld (ix-9), l
638C DD 74 F8    0 716 ld (ix-8), h
638F DD 6E F7    0 717 ld l, (ix-9)
6392 DD 66 F8    0 718 ld h, (ix-8)
6395 23          0 719 inc hl
6396 23          0 720 inc hl
6397 DD 75 F7    0 721 ld (ix-9), l
639A DD 74 F8    0 722 ld (ix-8), h
639D DD 6E F7    0 723 ld l, (ix-9)
63A0 DD 66 F8    0 724 ld h, (ix-8)
63A3 DD 75 F5    0 725 ld (ix-11), l
63A6 DD 74 F6    0 726 ld (ix-10), h
63A9             0 727 __LABEL30:
63A9 DD 6E F7    0 728 ld l, (ix-9)
63AC DD 66 F8    0 729 ld h, (ix-8)
63AF E5          0 730 push hl
63B0 21 00 00    0 731 ld hl, 0
63B3 D1          0 732 pop de
63B4 B7          0 733 or a
63B5 ED 52       0 734 sbc hl, de
63B7 D2 E3 63    0 735 jp nc, __LABEL31
63BA DD 6E F9    0 736 ld l, (ix-7)
63BD DD 66 FA    0 737 ld h, (ix-6)
63C0 E5          0 738 push hl
63C1 DD 7E FF    0 739 ld a, (ix-1)
63C4 E1          0 740 pop hl
63C5 77          0 741 ld (hl), a
63C6 DD 6E F7    0 742 ld l, (ix-9)
63C9 DD 66 F8    0 743 ld h, (ix-8)
63CC 2B          0 744 dec hl
63CD DD 75 F7    0 745 ld (ix-9), l
63D0 DD 74 F8    0 746 ld (ix-8), h
63D3 DD 6E F9    0 747 ld l, (ix-7)
63D6 DD 66 FA    0 748 ld h, (ix-6)
63D9 23          0 749 inc hl
63DA DD 75 F9    0 750 ld (ix-7), l
63DD DD 74 FA    0 751 ld (ix-6), h
63E0 C3 A9 63    0 752 jp __LABEL30
63E3             0 753 __LABEL31:
63E3 DD 6E FB    0 754 ld l, (ix-5)
63E6 DD 66 FC    0 755 ld h, (ix-4)
63E9 23          0 756 inc hl
63EA 23          0 757 inc hl
63EB 23          0 758 inc hl
63EC DD 75 FB    0 759 ld (ix-5), l
63EF DD 74 FC    0 760 ld (ix-4), h
63F2 C3 1B 64    0 761 jp __LABEL29
63F5             0 762 __LABEL28:
63F5 DD 6E F9    0 763 ld l, (ix-7)
63F8 DD 66 FA    0 764 ld h, (ix-6)
63FB E5          0 765 push hl
63FC DD 7E FF    0 766 ld a, (ix-1)
63FF E1          0 767 pop hl
6400 77          0 768 ld (hl), a
6401 DD 6E F9    0 769 ld l, (ix-7)
6404 DD 66 FA    0 770 ld h, (ix-6)
6407 23          0 771 inc hl
6408 DD 75 F9    0 772 ld (ix-7), l
640B DD 74 FA    0 773 ld (ix-6), h
640E DD 6E FB    0 774 ld l, (ix-5)
6411 DD 66 FC    0 775 ld h, (ix-4)
6414 23          0 776 inc hl
6415 DD 75 FB    0 777 ld (ix-5), l
6418 DD 74 FC    0 778 ld (ix-4), h
641B             0 779 __LABEL29:
641B C3 44 64    0 780 jp __LABEL27
641E             0 781 __LABEL26:
641E DD 6E F9    0 782 ld l, (ix-7)
6421 DD 66 FA    0 783 ld h, (ix-6)
6424 E5          0 784 push hl
6425 DD 7E FF    0 785 ld a, (ix-1)
6428 E1          0 786 pop hl
6429 77          0 787 ld (hl), a
642A DD 6E F9    0 788 ld l, (ix-7)
642D DD 66 FA    0 789 ld h, (ix-6)
6430 23          0 790 inc hl
6431 DD 75 F9    0 791 ld (ix-7), l
6434 DD 74 FA    0 792 ld (ix-6), h
6437 DD 6E FB    0 793 ld l, (ix-5)
643A DD 66 FC    0 794 ld h, (ix-4)
643D 23          0 795 inc hl
643E DD 75 FB    0 796 ld (ix-5), l
6441 DD 74 FC    0 797 ld (ix-4), h
6444             0 798 __LABEL27:
6444 C3 3F 63    0 799 jp __LABEL24
6447             0 800 __LABEL25:
6447             0 801 _Dibujar__leave:
6447 DD F9       0 802 ld sp, ix
6449 DD E1       0 803 pop ix
644B D9          0 804 exx
644C E1          0 805 pop hl
644D C1          0 806 pop bc
644E E3          0 807 ex (sp), hl
644F D9          0 808 exx
6450 C9          0 809 ret
6451             0 810 _SPPFill:
6451 C3 BB 64    0 812 JP SPPFill_start
6454             0 813 SPGetScrnAddr:
6454 E6 07       0 814 and $07
6456 F6 40       0 815 or $40
6458 57          0 816 ld d,a
6459 7C          0 817 ld a,h
645A 1F          0 818 rra
645B 1F          0 819 rra
645C 1F          0 820 rra
645D E6 18       0 821 and $18
645F B2          0 822 or d
6460 57          0 823 ld d,a
6461 7D          0 824 ld a,l
6462 E6 07       0 825 and $07
6464 47          0 826 ld b,a
6465 3E 80       0 827 ld a,$80
6467 28 03       0 828 jr z, norotate
6469             0 829 rotloop:
6469 1F          0 830 rra
646A 10 FD       0 831 djnz rotloop
646C             0 832 norotate:
646C 47          0 833 ld b,a
646D CB 3D       0 834 srl l
646F CB 3D       0 835 srl l
6471 CB 3D       0 836 srl l
6473 7C          0 837 ld a,h
6474 17          0 838 rla
6475 17          0 839 rla
6476 E6 E0       0 840 and $e0
6478 B5          0 841 or l
6479 5F          0 842 ld e,a
647A C9          0 843 ret
647B             0 844 SPPixelUp:
647B 7C          0 845 ld a,h
647C 25          0 846 dec h
647D E6 07       0 847 and $07
647F C0          0 848 ret nz
6480 3E 08       0 849 ld a,$08
6482 84          0 850 add a,h
6483 67          0 851 ld h,a
6484 7D          0 852 ld a,l
6485 D6 20       0 853 sub $20
6487 6F          0 854 ld l,a
6488 D0          0 855 ret nc
6489 7C          0 856 ld a,h
648A D6 08       0 857 sub $08
648C 67          0 858 ld h,a
648D FE 40       0 859 cp $40
648F C9          0 860 ret
6490             0 861 SPPixelDown:
6490 24          0 862 inc h
6491 7C          0 863 ld a,h
6492 E6 07       0 864 and $07
6494 C0          0 865 ret nz
6495 7C          0 866 ld a,h
6496 D6 08       0 867 sub $08
6498 67          0 868 ld h,a
6499 7D          0 869 ld a,l
649A C6 20       0 870 add a,$20
649C 6F          0 871 ld l,a
649D D0          0 872 ret nc
649E 7C          0 873 ld a,h
649F C6 08       0 874 add a,$08
64A1 67          0 875 ld h,a
64A2 FE 58       0 876 cp $58
64A4 3F          0 877 ccf
64A5 C9          0 878 ret
64A6             0 879 SPCharLeft:
64A6 7D          0 880 ld a,l
64A7 2D          0 881 dec l
64A8 B7          0 882 or a
64A9 C0          0 883 ret nz
64AA 7C          0 884 ld a,h
64AB D6 08       0 885 sub $08
64AD 67          0 886 ld h,a
64AE FE 40       0 887 cp $40
64B0 C9          0 888 ret
64B1             0 889 SPCharRight:
64B1 2C          0 890 inc l
64B2 C0          0 891 ret nz
64B3 3E 08       0 892 ld a,8
64B5 84          0 893 add a,h
64B6 67          0 894 ld h,a
64B7 FE 58       0 895 cp $58
64B9 3F          0 896 ccf
64BA C9          0 897 ret
64BB             0 898 SPPFill_start:
64BB C1          0 899 POP BC
64BC E1          0 900 POP HL
64BD D1          0 901 POP DE
64BE 6F          0 902 LD L,A
64BF C5          0 903 PUSH BC
64C0 DD E5       0 904 PUSH IX
64C2 01 2C 01    0 905 LD BC,300
64C5             0 906 SPPFill:
64C5 D5          0 907 push de
64C6 0B          0 908 dec bc
64C7 C5          0 909 push bc
64C8 7C          0 910 ld a,h
64C9 CD 54 64    0 911 call SPGetScrnAddr
64CC EB          0 912 ex de,hl
64CD CD D8 65    0 913 call bytefill
64D0 38 05       0 914 jr c, viable
64D2 C1          0 915 pop bc
64D3 D1          0 916 pop de
64D4 C3 62 66    0 917 jp SPPFill_end
64D7             0 918 viable:
64D7 EB          0 919 ex de,hl
64D8 21 F9 FF    0 920 ld hl,-7
64DB 39          0 921 add hl,sp
64DC E5          0 922 push hl
64DD E5          0 923 push hl
64DE DD E1       0 924 pop ix
64E0 2B          0 925 dec hl
64E1 2B          0 926 dec hl
64E2 2B          0 927 dec hl
64E3 E5          0 928 push hl
64E4 21 F4 FF    0 929 ld hl,-12
64E7 39          0 930 add hl,sp
64E8 E5          0 931 push hl
64E9 AF          0 932 xor a
64EA F5          0 933 push af
64EB 3B          0 934 dec sp
64EC D5          0 935 push de
64ED C5          0 936 push bc
64EE 33          0 937 inc sp
64EF F5          0 938 push af
64F0 3B          0 939 dec sp
64F1 DD 4E 07    0 940 ld c,(ix+7)
64F4 DD 46 08    0 941 ld b,(ix+8)
64F7 03          0 942 inc bc
64F8 69          0 943 ld l,c
64F9 60          0 944 ld h,b
64FA 09          0 945 add hl,bc
64FB 09          0 946 add hl,bc
64FC 4D          0 947 ld c,l
64FD 44          0 948 ld b,h
64FE 21 00 00    0 949 ld hl,0
6501 ED 42       0 950 sbc hl,bc
6503 39          0 951 add hl,sp
6504 36 00       0 952 ld (hl),0
6506 F9          0 953 ld sp,hl
6507 3E 80       0 954 ld a,$80
6509 F5          0 955 push af
650A 33          0 956 inc sp
650B 5D          0 957 ld e,l
650C 54          0 958 ld d,h
650D 13          0 959 inc de
650E 0B          0 960 dec bc
650F ED B0       0 961 ldir
6511             0 962 pfloop:
6511 DD 6E 03    0 963 ld l,(ix+3)
6514 DD 66 04    0 964 ld h,(ix+4)
6517 DD 5E 01    0 965 ld e,(ix+1)
651A DD 56 02    0 966 ld d,(ix+2)
651D CD 58 65    0 967 call investigate
6520 DD 73 01    0 968 ld (ix+1),e
6523 DD 72 02    0 969 ld (ix+2),d
6526 DD 75 03    0 970 ld (ix+3),l
6529 DD 74 04    0 971 ld (ix+4),h
652C DD 6E 05    0 972 ld l,(ix+5)
652F DD 66 06    0 973 ld h,(ix+6)
6532 DD 4E 07    0 974 ld c,(ix+7)
6535 DD 46 08    0 975 ld b,(ix+8)
6538 CD 33 66    0 976 call applypattern
653B DD 71 07    0 977 ld (ix+7),c
653E DD 70 08    0 978 ld (ix+8),b
6541 DD 75 05    0 979 ld (ix+5),l
6544 DD 74 06    0 980 ld (ix+6),h
6547 7E          0 981 ld a,(hl)
6548 FE 40       0 982 cp 40h
654A D2 11 65    0 983 jp nc, pfloop
654D             0 984 endpfill:
654D 11 0B 00    0 985 ld de,11
6550 DD 19       0 986 add ix,de
6552 DD F9       0 987 ld sp,ix
6554 B7          0 988 or a
6555 DD E1       0 989 pop ix
6557 C9          0 990 ret
6558             0 991 investigate:
6558 7E          0 992 ld a,(hl)
6559 FE 80       0 993 cp 80h
655B DA 62 65    0 994 jp c, inowrap
655E DD E5       0 995 push ix
6560 E1          0 996 pop hl
6561 7E          0 997 ld a,(hl)
6562             0 998 inowrap:
6562 FE 40       0 999 cp 40h
6564 DA C6 65    0 1000 jp c, endinv
6567 47          0 1001 ld b,a
6568 2B          0 1002 dec hl
6569 4E          0 1003 ld c,(hl)
656A 2B          0 1004 dec hl
656B 7E          0 1005 ld a,(hl)
656C 2B          0 1006 dec hl
656D E5          0 1007 push hl
656E 69          0 1008 ld l,c
656F 60          0 1009 ld h,b
6570 47          0 1010 ld b,a
6571             0 1011 goup:
6571 E5          0 1012 push hl
6572 CD 7B 64    0 1013 call SPPixelUp
6575 38 08       0 1014 jr c, updeadend
6577 C5          0 1015 push bc
6578 CD D8 65    0 1016 call bytefill
657B DC EE 65    0 1017 call c, addnew
657E C1          0 1018 pop bc
657F             0 1019 updeadend:
657F E1          0 1020 pop hl
6580             0 1021 godown:
6580 E5          0 1022 push hl
6581 CD 90 64    0 1023 call SPPixelDown
6584 38 08       0 1024 jr c, downdeadend
6586 C5          0 1025 push bc
6587 CD D8 65    0 1026 call bytefill
658A DC EE 65    0 1027 call c, addnew
658D C1          0 1028 pop bc
658E             0 1029 downdeadend:
658E E1          0 1030 pop hl
658F             0 1031 goleft:
658F CB 78       0 1032 bit 7,b
6591 28 18       0 1033 jr z, goright
6593 7D          0 1034 ld a,l
6594 E6 1F       0 1035 and 31
6596 20 04       0 1036 jr nz, okleft
6598 CB 6C       0 1037 bit 5,h
659A 28 0F       0 1038 jr z, goright
659C             0 1039 okleft:
659C E5          0 1040 push hl
659D CD A6 64    0 1041 call SPCharLeft
65A0 C5          0 1042 push bc
65A1 06 01       0 1043 ld b,01h
65A3 CD D8 65    0 1044 call bytefill
65A6 DC EE 65    0 1045 call c, addnew
65A9 C1          0 1046 pop bc
65AA E1          0 1047 pop hl
65AB             0 1048 goright:
65AB CB 40       0 1049 bit 0,b
65AD 28 13       0 1050 jr z, nextinv
65AF B7          0 1051 or a
65B0 CD B1 64    0 1052 call SPCharRight
65B3 38 0D       0 1053 jr c, nextinv
65B5 7D          0 1054 ld a,l
65B6 E6 1F       0 1055 and 31
65B8 28 08       0 1056 jr z, nextinv
65BA 06 80       0 1057 ld b,80h
65BC CD D8 65    0 1058 call bytefill
65BF DC EE 65    0 1059 call c, addnew
65C2             0 1060 nextinv:
65C2 E1          0 1061 pop hl
65C3 C3 58 65    0 1062 jp investigate
65C6             0 1063 endinv:
65C6 2B          0 1064 dec hl
65C7 2B          0 1065 dec hl
65C8 2B          0 1066 dec hl
65C9 1A          0 1067 ld a,(de)
65CA FE 80       0 1068 cp 80h
65CC 38 04       0 1069 jr c, nowrapnew
65CE DD          0 1070 defb $dd
65CF 5D          0 1071 ld e,l
65D0 DD          0 1072 defb $dd
65D1 54          0 1073 ld d,h
65D2             0 1074 nowrapnew:
65D2 AF          0 1075 xor a
65D3 12          0 1076 ld (de),a
65D4 1B          0 1077 dec de
65D5 1B          0 1078 dec de
65D6 1B          0 1079 dec de
65D7 C9          0 1080 ret
65D8             0 1081 bytefill:
65D8 78          0 1082 ld a,b
65D9 AE          0 1083 xor (hl)
65DA A0          0 1084 and b
65DB C8          0 1085 ret z
65DC             0 1086 bfloop:
65DC 47          0 1087 ld b,a
65DD 1F          0 1088 rra
65DE 4F          0 1089 ld c,a
65DF 78          0 1090 ld a,b
65E0 87          0 1091 add a,a
65E1 B1          0 1092 or c
65E2 B0          0 1093 or b
65E3 4F          0 1094 ld c,a
65E4 AE          0 1095 xor (hl)
65E5 A1          0 1096 and c
65E6 B8          0 1097 cp b
65E7 C2 DC 65    0 1098 jp nz, bfloop
65EA B6          0 1099 or (hl)
65EB 77          0 1100 ld (hl),a
65EC 37          0 1101 scf
65ED C9          0 1102 ret
65EE             0 1103 addnew:
65EE E5          0 1104 push hl
65EF DD 6E 07    0 1105 ld l,(ix+7)
65F2 DD 66 08    0 1106 ld h,(ix+8)
65F5 7C          0 1107 ld a,h
65F6 B5          0 1108 or l
65F7 28 1A       0 1109 jr z, bail
65F9 2B          0 1110 dec hl
65FA DD 75 07    0 1111 ld (ix+7),l
65FD DD 74 08    0 1112 ld (ix+8),h
6600 E1          0 1113 pop hl
6601 1A          0 1114 ld a,(de)
6602 FE 80       0 1115 cp 80h
6604 38 04       0 1116 jr c, annowrap
6606 DD          0 1117 defb $dd
6607 5D          0 1118 ld e,l
6608 DD          0 1119 defb $dd
6609 54          0 1120 ld d,h
660A             0 1121 annowrap:
660A EB          0 1122 ex de,hl
660B 72          0 1123 ld (hl),d
660C 2B          0 1124 dec hl
660D 73          0 1125 ld (hl),e
660E 2B          0 1126 dec hl
660F 70          0 1127 ld (hl),b
6610 2B          0 1128 dec hl
6611 EB          0 1129 ex de,hl
6612 C9          0 1130 ret
6613             0 1131 bail:
6613 E1          0 1132 pop hl
6614 78          0 1133 ld a,b
6615 AE          0 1134 xor (hl)
6616 77          0 1135 ld (hl),a
6617 AF          0 1136 xor a
6618 12          0 1137 ld (de),a
6619 DD 6E 05    0 1138 ld l,(ix+5)
661C DD 66 06    0 1139 ld h,(ix+6)
661F CD 33 66    0 1140 call applypattern
6622 CD 33 66    0 1141 call applypattern
6625 CD 33 66    0 1142 call applypattern
6628 11 0B 00    0 1143 ld de,11
662B DD 19       0 1144 add ix,de
662D DD F9       0 1145 ld sp,ix
662F 37          0 1146 scf
6630 C3 62 66    0 1147 jp SPPFill_end
6633             0 1148 applypattern:
6633 7E          0 1149 ld a,(hl)
6634 FE 80       0 1150 cp 80h
6636 DA 3D 66    0 1151 jp c, apnowrap
6639 DD E5       0 1152 push ix
663B E1          0 1153 pop hl
663C 7E          0 1154 ld a,(hl)
663D             0 1155 apnowrap:
663D FE 40       0 1156 cp 40h
663F 38 1D       0 1157 jr c, endapply
6641 E6 07       0 1158 and 07h
6643 DD 86 09    0 1159 add a,(ix+9)
6646 5F          0 1160 ld e,a
6647 3E 00       0 1161 ld a,0
6649 DD 8E 0A    0 1162 adc a,(ix+10)
664C 57          0 1163 ld d,a
664D 1A          0 1164 ld a,(de)
664E 56          0 1165 ld d,(hl)
664F 2B          0 1166 dec hl
6650 5E          0 1167 ld e,(hl)
6651 2B          0 1168 dec hl
6652 A6          0 1169 and (hl)
6653 96          0 1170 sub (hl)
6654 3D          0 1171 dec a
6655 EB          0 1172 ex de,hl
6656 A6          0 1173 and (hl)
6657 77          0 1174 ld (hl),a
6658 EB          0 1175 ex de,hl
6659 2B          0 1176 dec hl
665A 03          0 1177 inc bc
665B C3 33 66    0 1178 jp applypattern
665E             0 1179 endapply:
665E 2B          0 1180 dec hl
665F 2B          0 1181 dec hl
6660 2B          0 1182 dec hl
6661 C9          0 1183 ret
6662             0 1184 SPPFill_end:
6662             0 1186 _SPPFill__leave:
6662 C9          0 1187 ret
6663             0 1190 ; vim: ts=4:et:sw=4:
6663             0 1191 ; Copyleft (K) by Jose M. Rodriguez de la Rosa
6663             0 1192 ;  (a.k.a. Boriel)
6663             0 1193 ;  http://www.boriel.com
6663             0 1194 ; -------------------------------------------------------------------
6663             0 1195 ; Simple array Index routine
6663             0 1196 ; Number of total indexes dimensions - 1 at beginning of memory
6663             0 1197 ; HL = Start of array memory (First two bytes contains N-1 dimensions)
6663             0 1198 ; Dimension values on the stack, (top of the stack, highest dimension)
6663             0 1199 ; E.g. A(2, 4) -> PUSH <4>; PUSH <2>
6663             0 1201 ; For any array of N dimension A(aN-1, ..., a1, a0)
6663             0 1202 ; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
6663             0 1203 ; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
6663             0 1204 ; What I will do here is to calculate the following sequence:
6663             0 1205 ; ((aN-1 * bN-2) + aN-2) * bN-3 + ...
6663             0 1210 __MUL16:	; Mutiplies HL with the last value stored into de stack
6663             0 1211 ; Works for both signed and unsigned
6663 EB          0 1218 ex de, hl
6664 E1          0 1219 pop hl		; Return address
6665 E3          0 1220 ex (sp), hl ; CALLEE caller convention
6666             0 1222 __MUL16_FAST:
6666 06 10       0 1223 ld b, 16
6668 7C          0 1224 ld a, h
6669 4D          0 1225 ld c, l
666A 21 00 00    0 1226 ld hl, 0
666D             0 1228 __MUL16LOOP:
666D 29          0 1229 add hl, hl  ; hl << 1
666E CB 21       0 1230 sla c
6670 17          0 1231 rla         ; a,c << 1
6671 D2 75 66    0 1232 jp nc, __MUL16NOADD
6674 19          0 1233 add hl, de
6675             0 1235 __MUL16NOADD:
6675 10 F6       0 1236 djnz __MUL16LOOP
6677 C9          0 1238 ret	; Result in hl (16 lower bits)
6678             0 1246 __ARRAY_PTR:   ;; computes an array offset from a pointer
6678 4E          0 1247 ld c, (hl)
6679 23          0 1248 inc hl
667A 66          0 1249 ld h, (hl)
667B 69          0 1250 ld l, c
667C             0 1252 __ARRAY:
667C 5E          0 1260 ld e, (hl)
667D 23          0 1261 inc hl
667E 56          0 1262 ld d, (hl)
667F 23          0 1263 inc hl
6680 22 CF 66    0 1264 ld (TMP_ARR_PTR), hl
6683 EB          0 1265 ex de, hl
6684 E3          0 1266 ex (sp), hl	; Return address in HL, array address in the stack
6685 22 BB 66    0 1267 ld (RET_ADDRESS + 1), hl ; Stores it for later
6688 D9          0 1269 exx
6689 E1          0 1270 pop hl		; Will use H'L' as the pointer
668A 4E          0 1271 ld c, (hl)	; Loads Number of dimensions from (hl)
668B 23          0 1272 inc hl
668C 46          0 1273 ld b, (hl)
668D 23          0 1274 inc hl		; Ready
668E D9          0 1275 exx
668F 21 00 00    0 1277 ld hl, 0	; HL = Offset "accumulator"
6692             0 1279 LOOP:
6692 C1          0 1281 pop bc		; Get next index (Ai) from the stack
6693 09          0 1285 add hl, bc	; Adds current index
6694 D9          0 1287 exx			; Checks if B'C' = 0
6695 78          0 1288 ld a, b		; Which means we must exit (last element is not multiplied by anything)
6696 B1          0 1289 or c
6697 28 0E       0 1290 jr z, ARRAY_END		; if B'Ci == 0 we are done
6699 5E          0 1292 ld e, (hl)			; Loads next dimension into D'E'
669A 23          0 1293 inc hl
669B 56          0 1294 ld d, (hl)
669C 23          0 1295 inc hl
669D D5          0 1296 push de
669E 0B          0 1297 dec bc				; Decrements loop counter
669F D9          0 1298 exx
66A0 D1          0 1299 pop de				; DE = Max bound Number (i-th dimension)
66A1 CD BD 66    0 1301 call __FNMUL
66A4 C3 92 66    0 1302 jp LOOP
66A7             0 1304 ARRAY_END:
66A7 7E          0 1305 ld a, (hl)
66A8 D9          0 1306 exx
66A9 EB          0 1311 ex de, hl
66AA 21 00 00    0 1312 ld hl, 0
66AD 47          0 1313 ld b, a
66AE             0 1314 ARRAY_SIZE_LOOP:
66AE 19          0 1315 add hl, de
66AF 10 FD       0 1316 djnz ARRAY_SIZE_LOOP
66B1 EB          0 1320 ex de, hl
66B2 2A CF 66    0 1321 ld hl, (TMP_ARR_PTR)
66B5 7E          0 1322 ld a, (hl)
66B6 23          0 1323 inc hl
66B7 66          0 1324 ld h, (hl)
66B8 6F          0 1325 ld l, a
66B9 19          0 1326 add hl, de  ; Adds element start
66BA             0 1328 RET_ADDRESS:
66BA C3 00 00    0 1329 jp 0
66BD             0 1331 ;; Performs a faster multiply for little 16bit numbs
66BD             0 1334 __FNMUL:
66BD AF          0 1335 xor a
66BE B4          0 1336 or h
66BF C2 66 66    0 1337 jp nz, __MUL16_FAST
66C2 B5          0 1338 or l
66C3 C8          0 1339 ret z
66C4 FE 21       0 1341 cp 33
66C6 D2 66 66    0 1342 jp nc, __MUL16_FAST
66C9 45          0 1344 ld b, l
66CA 6C          0 1345 ld l, h  ; HL = 0
66CB             0 1347 __FNMUL2:
66CB 19          0 1348 add hl, de
66CC 10 FD       0 1349 djnz __FNMUL2
66CE C9          0 1350 ret
66CF             0 1352 TMP_ARR_PTR:
66CF 00 00       0 1353 DW 0  ; temporary storage for pointer to tables
66D1             0 1360 ; vim:ts=4:et:
66D1             0 1361 ; FASTCALL bitwise or 16 version.
66D1             0 1362 ; result in HL
66D1             0 1363 ; __FASTCALL__ version (operands: A, H)
66D1             0 1364 ; Performs 16bit or 16bit and returns the boolean
66D1             0 1365 ; Input: HL, DE
66D1             0 1366 ; Output: HL <- HL OR DE
66D1             0 1368 __BOR16:
66D1 7C          0 1369 ld a, h
66D2 B2          0 1370 or d
66D3 67          0 1371 ld h, a
66D4 7D          0 1373 ld a, l
66D5 B3          0 1374 or e
66D6 6F          0 1375 ld l, a
66D7 C9          0 1377 ret
66D8             0 1382 ; Bresenham's like circle algorithm
66D8             0 1383 ; best known as Middle Point Circle drawing algorithm
66D8             0 1387 ; Simple error control routines
66D8             0 1388 ; vim:ts=4:et:
66D8             0 1390 ERR_NR    EQU    23610    ; Error code system variable
66D8             0 1393 ; Error code definitions (as in ZX spectrum manual)
66D8             0 1395 ; Set error code with:
66D8             0 1396 ;    ld a, ERROR_CODE
66D8             0 1397 ;    ld (ERR_NR), a
66D8             0 1400 ERROR_Ok                EQU    -1
66D8             0 1401 ERROR_SubscriptWrong    EQU     2
66D8             0 1402 ERROR_OutOfMemory       EQU     3
66D8             0 1403 ERROR_OutOfScreen       EQU     4
66D8             0 1404 ERROR_NumberTooBig      EQU     5
66D8             0 1405 ERROR_InvalidArg        EQU     9
66D8             0 1406 ERROR_IntOutOfRange     EQU    10
66D8             0 1407 ERROR_NonsenseInBasic   EQU    11
66D8             0 1408 ERROR_InvalidFileName   EQU    14
66D8             0 1409 ERROR_InvalidColour     EQU    19
66D8             0 1410 ERROR_BreakIntoProgram  EQU    20
66D8             0 1411 ERROR_TapeLoadingErr    EQU    26
66D8             0 1414 ; Raises error using RST #8
66D8             0 1415 __ERROR:
66D8 32 DC 66    0 1416 ld (__ERROR_CODE), a
66DB CF          0 1417 rst 8
66DC             0 1418 __ERROR_CODE:
66DC 00          0 1419 nop
66DD C9          0 1420 ret
66DE             0 1422 ; Sets the error system variable, but keeps running.
66DE             0 1423 ; Usually this instruction if followed by the END intermediate instruction.
66DE             0 1424 __STOP:
66DE 32 3A 5C    0 1425 ld (ERR_NR), a
66E1 C9          0 1426 ret
66E2             0 1430 ; MIXED __FASTCAL__ / __CALLE__ PLOT Function
66E2             0 1431 ; Plots a point into the screen calling the ZX ROM PLOT routine
66E2             0 1433 ; Y in A (accumulator)
66E2             0 1434 ; X in top of the stack
66E2             0 1441 ; Printing positioning library.
66E2             0 1445 __LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
66E2 ED 5B 88 5C 0 1446 ld de, (S_POSN)
66E6 2A 82 5C    0 1447 ld hl, (MAXX)
66E9 B7          0 1448 or a
66EA ED 52       0 1449 sbc hl, de
66EC EB          0 1450 ex de, hl
66ED C9          0 1451 ret
66EE             0 1454 __SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
66EE 2A 82 5C    0 1455 ld hl, (MAXX)
66F1 B7          0 1456 or a
66F2 ED 52       0 1457 sbc hl, de
66F4 22 88 5C    0 1458 ld (S_POSN), hl ; saves it again
66F7 C9          0 1459 ret
66F8             0 1462 ECHO_E	EQU 23682
66F8             0 1463 MAXX	EQU ECHO_E   ; Max X position + 1
66F8             0 1464 MAXY	EQU MAXX + 1 ; Max Y position + 1
66F8             0 1466 S_POSN	EQU 23688
66F8             0 1467 POSX	EQU S_POSN		; Current POS X
66F8             0 1468 POSY	EQU S_POSN + 1	; Current POS Y
66F8             0 1475 __IN_SCREEN:
66F8             0 1476 ; Returns NO carry if current coords (D, E)
66F8             0 1477 ; are OUT of the screen limits (MAXX, MAXY)
66F8 21 82 5C    0 1482 ld hl, MAXX
66FB 7B          0 1483 ld a, e
66FC BE          0 1484 cp (hl)
66FD 30 04       0 1485 jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
66FF 7A          0 1487 ld a, d
6700 23          0 1488 inc hl
6701 BE          0 1489 cp (hl)
6702             0 1490 ;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
6702             0 1491 ;; ret
6702 D8          0 1492 ret c                       ; Return if carry (OK)
6703             0 1494 __IN_SCREEN_ERR:
6703             0 1495 __OUT_OF_SCREEN_ERR:
6703             0 1496 ; Jumps here if out of screen
6703 3E 04       0 1497 ld a, ERROR_OutOfScreen
6705 C3 DE 66    0 1498 jp __STOP   ; Saves error code and exits
6708             0 1504 ; JUMPS directly to spectrum CLS
6708             0 1505 ; This routine does not clear lower screen
6708             0 1507 ;CLS	EQU	0DAFh
6708             0 1509 ; Our faster implementation
6708             0 1513 CLS:
6708 21 00 00    0 1521 ld hl, 0
670B 22 7D 5C    0 1522 ld (COORDS), hl
670E 21 21 18    0 1523 ld hl, 1821h
6711 22 88 5C    0 1524 ld (S_POSN), hl
6714             0 1525 __CLS_SCR:
6714 21 00 40    0 1526 ld hl, SCREEN
6717 36 00       0 1527 ld (hl), 0
6719 54          0 1528 ld d, h
671A 5D          0 1529 ld e, l
671B 13          0 1530 inc de
671C 01 00 18    0 1531 ld bc, 6144
671F ED B0       0 1532 ldir
6721             0 1534 ; Now clear attributes
6721 3A 8D 5C    0 1536 ld a, (ATTR_P)
6724 77          0 1537 ld (hl), a
6725 01 FF 02    0 1538 ld bc, 767
6728 ED B0       0 1539 ldir
672A C9          0 1540 ret
672B             0 1542 COORDS	EQU	23677
672B             0 1543 SCREEN	EQU 16384 ; Default start of the screen (can be changed)
672B             0 1544 ATTR_P	EQU 23693
672B             0 1545 ;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address
672B             0 1547 SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
672B             0 1548 ; to get the start of the screen
672B             0 1554 ; Attribute routines
672B             0 1555 ; vim:ts=4:et:sw:
672B             0 1562 ; Global constants
672B             0 1564 P_FLAG	EQU 23697
672B             0 1565 FLAGS2	EQU 23681
672B             0 1566 ATTR_P	EQU 23693	; permanet ATTRIBUTES
672B             0 1567 ATTR_T	EQU 23695	; temporary ATTRIBUTES
672B             0 1568 CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
672B             0 1569 UDG	EQU 23675 ; Pointer to UDG Charset
672B             0 1570 MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars
672B             0 1575 __ATTR_ADDR:
672B             0 1576 ; calc start address in DE (as (32 * d) + e)
672B             0 1577 ; Contributed by Santiago Romero at http://www.speccy.org
672B 26 00       0 1578 ld h, 0                     ;  7 T-States
672D 7A          0 1579 ld a, d                     ;  4 T-States
672E 87          0 1580 add a, a     ; a * 2        ;  4 T-States
672F 87          0 1581 add a, a     ; a * 4        ;  4 T-States
6730 6F          0 1582 ld l, a      ; HL = A * 4   ;  4 T-States
6731 29          0 1584 add hl, hl   ; HL = A * 8   ; 15 T-States
6732 29          0 1585 add hl, hl   ; HL = A * 16  ; 15 T-States
6733 29          0 1586 add hl, hl   ; HL = A * 32  ; 15 T-States
6734 16 18       0 1588 ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
6736 19          0 1589 add hl, de
6737 ED 5B 15 67 0 1591 ld de, (SCREEN_ADDR)    ; Adds the screen address
673B 19          0 1592 add hl, de
673C             0 1594 ; Return current screen address in HL
673C C9          0 1595 ret
673D             0 1598 ; Sets the attribute at a given screen coordinate (D, E).
673D             0 1599 ; The attribute is taken from the ATTR_T memory variable
673D             0 1600 ; Used by PRINT routines
673D             0 1601 SET_ATTR:
673D             0 1603 ; Checks for valid coords
673D CD F8 66    0 1604 call __IN_SCREEN
6740 D0          0 1605 ret nc
6741             0 1607 __SET_ATTR:
6741             0 1608 ; Internal __FASTCALL__ Entry used by printing routines
6741 CD 2B 67    0 1611 call __ATTR_ADDR
6744             0 1613 __SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
6744 ED 5B 8F 5C 0 1614 ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T
6748 7A          0 1616 ld a, d
6749 A6          0 1617 and (hl)
674A 4F          0 1618 ld c, a    ; C = current screen color, masked
674B 7A          0 1620 ld a, d
674C 2F          0 1621 cpl        ; Negate mask
674D A3          0 1622 and e    ; Mask current attributes
674E B1          0 1623 or c    ; Mix them
674F 77          0 1624 ld (hl), a ; Store result in screen
6750 C9          0 1626 ret
6751             0 1631 ; Sets the attribute at a given screen pixel address in hl
6751             0 1632 ; HL contains the address in RAM for a given pixel (not a coordinate)
6751             0 1633 SET_PIXEL_ADDR_ATTR:
6751             0 1634 ;; gets ATTR position with offset given in SCREEN_ADDR
6751 7C          0 1635 ld a, h
6752 0F          0 1636 rrca
6753 0F          0 1637 rrca
6754 0F          0 1638 rrca
6755 E6 03       0 1639 and 3
6757 F6 18       0 1640 or 18h
6759 67          0 1641 ld h, a
675A ED 5B 15 67 0 1642 ld de, (SCREEN_ADDR)
675E 19          0 1643 add hl, de  ;; Final screen addr
675F C3 44 67    0 1644 jp __SET_ATTR2
6762             0 1647 PLOT:
6762             0 1657 P_FLAG EQU 23697
6762 E1          0 1659 pop hl
6763 E3          0 1660 ex (sp), hl ; Callee
6764 47          0 1662 ld b, a
6765 4C          0 1663 ld c, h
6766 3E BF       0 1665 ld a, 191
6768 B8          0 1666 cp b
6769 38 2C       0 1667 jr c, __PLOT_ERR ; jr is faster here (#1)
676B             0 1669 __PLOT:			; __FASTCALL__ entry (b, c) = pixel coords (y, x)
676B ED 43 7D 5C 0 1670 ld (COORDS), bc	; Saves current point
676F 3E BF       0 1671 ld a, 191 ; Max y coord
6771 CD AC 22    0 1672 call PIXEL_ADDR
6774 CB B4       0 1673 res 6, h    ; Starts from 0
6776 ED 4B 15 67 0 1674 ld bc, (SCREEN_ADDR)
677A 09          0 1675 add hl, bc  ; Now current offset
677B 47          0 1677 ld b, a
677C 04          0 1678 inc b
677D 3E FE       0 1679 ld a, 0FEh
677F             0 1681 __PLOT_LOOP:
677F 0F          0 1682 rrca
6780 10 FD       0 1683 djnz __PLOT_LOOP
6782 47          0 1685 ld b, a
6783 3A 91 5C    0 1686 ld a, (P_FLAG)
6786 4F          0 1687 ld c, a
6787 7E          0 1688 ld a, (hl)
6788 CB 41       0 1689 bit 0, c        ; is it OVER 1
678A 20 01       0 1690 jr nz, __PLOT_OVER1
678C A0          0 1691 and b
678D             0 1693 __PLOT_OVER1:
678D CB 51       0 1694 bit 2, c        ; is it inverse 1
678F 20 02       0 1695 jr nz, __PLOT_END
6791 A8          0 1697 xor b
6792 2F          0 1698 cpl
6793             0 1701 __PLOT_END:
6793 77          0 1702 ld (hl), a
6794 C3 51 67    0 1703 jp SET_PIXEL_ADDR_ATTR
6797             0 1705 __PLOT_ERR:
6797 C3 03 67    0 1706 jp __OUT_OF_SCREEN_ERR ; Spent 3 bytes, but saves 3 T-States at (#1)
679A             0 1708 PLOT_SUB EQU 22ECh
679A             0 1709 PIXEL_ADDR EQU 22ACh
679A             0 1710 COORDS EQU 5C7Dh
679A             0 1715 ; Draws a circle at X, Y of radius R
679A             0 1716 ; X, Y on the Stack, R in accumulator (Byte)
679A             0 1723 __CIRCLE_ERROR:
679A C3 03 67    0 1724 jp __OUT_OF_SCREEN_ERR
679D             0 1725 ;; __CIRCLE_ERROR EQU __OUT_OF_SCREEN_ERR
679D             0 1726 ;; __CIRCLE_ERROR:
679D             0 1727 ;; 		; Jumps here if out of screen
679D             0 1728 ;; 		scf ; Always sets carry Flag
679D             0 1729 ;;
679D             0 1730 ;; 		ld a, ERROR_OutOfScreen
679D             0 1731 ;; 		ld (ERR_NR), a
679D             0 1732 ;; 		ret
679D             0 1733 CIRCLE:
679D             0 1734 ;; Entry point
679D E1          0 1735 pop hl	; Return Address
679E D1          0 1736 pop de	; D = Y
679F E3          0 1737 ex (sp), hl ; __CALLEE__ convention
67A0 5C          0 1738 ld e, h ; E = X
67A1 67          0 1741 ld h, a ; H = R
67A2 82          0 1742 add a, d
67A3 D6 C0       0 1743 sub 192
67A5 30 F3       0 1744 jr nc, __CIRCLE_ERROR
67A7 7A          0 1746 ld a, d
67A8 94          0 1747 sub h
67A9 38 EF       0 1748 jr c, __CIRCLE_ERROR
67AB 7B          0 1750 ld a, e
67AC 94          0 1751 sub h
67AD 38 EB       0 1752 jr c, __CIRCLE_ERROR
67AF 7C          0 1754 ld a, h
67B0 83          0 1755 add a, e
67B1 38 E7       0 1756 jr c, __CIRCLE_ERROR
67B3             0 1759 ; __FASTCALL__ Entry: D, E = Y, X point of the center
67B3             0 1760 ; A = Radious
67B3             0 1761 __CIRCLE:
67B3 D5          0 1762 push de
67B4 7C          0 1763 ld a, h
67B5 D9          0 1764 exx
67B6 D1          0 1765 pop de		; D'E' = x0, y0
67B7 67          0 1766 ld h, a		; H' = r
67B8 4B          0 1768 ld c, e
67B9 7C          0 1769 ld a, h
67BA 82          0 1770 add a, d
67BB 47          0 1771 ld b, a
67BC CD 52 68    0 1772 call __CIRCLE_PLOT	; PLOT (x0, y0 + r)
67BF 42          0 1774 ld b, d
67C0 7C          0 1775 ld a, h
67C1 83          0 1776 add a, e
67C2 4F          0 1777 ld c, a
67C3 CD 52 68    0 1778 call __CIRCLE_PLOT	; PLOT (x0 + r, y0)
67C6 4B          0 1780 ld c, e
67C7 7A          0 1781 ld a, d
67C8 94          0 1782 sub h
67C9 47          0 1783 ld b, a
67CA CD 52 68    0 1784 call __CIRCLE_PLOT ; PLOT (x0, y0 - r)
67CD 42          0 1786 ld b, d
67CE 7B          0 1787 ld a, e
67CF 94          0 1788 sub h
67D0 4F          0 1789 ld c, a
67D1 CD 52 68    0 1790 call __CIRCLE_PLOT ; PLOT (x0 - r, y0)
67D4 D9          0 1792 exx
67D5 06 00       0 1793 ld b, 0		; B = x = 0
67D7 4C          0 1794 ld c, h		; C = y = Radius
67D8 21 01 00    0 1795 ld hl, 1
67DB B7          0 1796 or a
67DC ED 42       0 1797 sbc hl, bc	; HL = f = 1 - radius
67DE EB          0 1799 ex de, hl
67DF 21 00 00    0 1800 ld hl, 0
67E2 B7          0 1801 or a
67E3 ED 42       0 1802 sbc hl, bc  ; HL = -radius
67E5 29          0 1803 add hl, hl	; HL = -2 * radius
67E6 EB          0 1804 ex de, hl	; DE = -2 * radius = ddF_y, HL = f
67E7 AF          0 1806 xor a		; A = ddF_x = 0
67E8 08          0 1807 ex af, af'	; Saves it
67E9             0 1809 __CIRCLE_LOOP:
67E9 78          0 1810 ld a, b
67EA B9          0 1811 cp c
67EB D0          0 1812 ret nc		; Returns when x >= y
67EC CB 7C       0 1814 bit 7, h	; HL >= 0? : if (f >= 0)...
67EE C2 F5 67    0 1815 jp nz, __CIRCLE_NEXT
67F1 0D          0 1817 dec c		; y--
67F2 13          0 1818 inc de
67F3 13          0 1819 inc de		; ddF_y += 2
67F4 19          0 1821 add hl, de	; f += ddF_y
67F5             0 1823 __CIRCLE_NEXT:
67F5 04          0 1824 inc b		; x++
67F6 08          0 1825 ex af, af'
67F7 C6 02       0 1826 add a, 2	; 1 Cycle faster than inc a, inc a
67F9 23          0 1828 inc hl		; f++
67FA F5          0 1829 push af
67FB 85          0 1830 add a, l
67FC 6F          0 1831 ld l, a
67FD 7C          0 1832 ld a, h
67FE CE 00       0 1833 adc a, 0	; f = f + ddF_x
6800 67          0 1834 ld h, a
6801 F1          0 1835 pop af
6802 08          0 1836 ex af, af'
6803 C5          0 1838 push bc
6804 D9          0 1839 exx
6805 E1          0 1840 pop hl		; H'L' = Y, X
6806 7A          0 1842 ld a, d
6807 84          0 1843 add a, h
6808 47          0 1844 ld b, a		; B = y0 + y
6809 7B          0 1845 ld a, e
680A 85          0 1846 add a, l
680B 4F          0 1847 ld c, a		; C = x0 + x
680C CD 52 68    0 1848 call __CIRCLE_PLOT ; plot(x0 + x, y0 + y)
680F 7A          0 1850 ld a, d
6810 84          0 1851 add a, h
6811 47          0 1852 ld b, a		; B = y0 + y
6812 7B          0 1853 ld a, e
6813 95          0 1854 sub l
6814 4F          0 1855 ld c, a		; C = x0 - x
6815 CD 52 68    0 1856 call __CIRCLE_PLOT ; plot(x0 - x, y0 + y)
6818 7A          0 1858 ld a, d
6819 94          0 1859 sub h
681A 47          0 1860 ld b, a		; B = y0 - y
681B 7B          0 1861 ld a, e
681C 85          0 1862 add a, l
681D 4F          0 1863 ld c, a		; C = x0 + x
681E CD 52 68    0 1864 call __CIRCLE_PLOT ; plot(x0 + x, y0 - y)
6821 7A          0 1866 ld a, d
6822 94          0 1867 sub h
6823 47          0 1868 ld b, a		; B = y0 - y
6824 7B          0 1869 ld a, e
6825 95          0 1870 sub l
6826 4F          0 1871 ld c, a		; C = x0 - x
6827 CD 52 68    0 1872 call __CIRCLE_PLOT ; plot(x0 - x, y0 - y)
682A 7A          0 1874 ld a, d
682B 85          0 1875 add a, l
682C 47          0 1876 ld b, a		; B = y0 + x
682D 7B          0 1877 ld a, e
682E 84          0 1878 add a, h
682F 4F          0 1879 ld c, a		; C = x0 + y
6830 CD 52 68    0 1880 call __CIRCLE_PLOT ; plot(x0 + y, y0 + x)
6833 7A          0 1882 ld a, d
6834 85          0 1883 add a, l
6835 47          0 1884 ld b, a		; B = y0 + x
6836 7B          0 1885 ld a, e
6837 94          0 1886 sub h
6838 4F          0 1887 ld c, a		; C = x0 - y
6839 CD 52 68    0 1888 call __CIRCLE_PLOT ; plot(x0 - y, y0 + x)
683C 7A          0 1890 ld a, d
683D 95          0 1891 sub l
683E 47          0 1892 ld b, a		; B = y0 - x
683F 7B          0 1893 ld a, e
6840 84          0 1894 add a, h
6841 4F          0 1895 ld c, a		; C = x0 + y
6842 CD 52 68    0 1896 call __CIRCLE_PLOT ; plot(x0 + y, y0 - x)
6845 7A          0 1898 ld a, d
6846 95          0 1899 sub l
6847 47          0 1900 ld b, a		; B = y0 - x
6848 7B          0 1901 ld a, e
6849 94          0 1902 sub h
684A 4F          0 1903 ld c, a		; C = x0 + y
684B CD 52 68    0 1904 call __CIRCLE_PLOT ; plot(x0 - y, y0 - x)
684E D9          0 1906 exx
684F C3 E9 67    0 1907 jp __CIRCLE_LOOP
6852             0 1911 __CIRCLE_PLOT:
6852             0 1912 ; Plots a point of the circle, preserving HL and DE
6852 E5          0 1913 push hl
6853 D5          0 1914 push de
6854 CD 6B 67    0 1915 call __PLOT
6857 D1          0 1916 pop de
6858 E1          0 1917 pop hl
6859 C9          0 1918 ret
685A             0 1926 ; -------------------------------------------------------------
685A             0 1927 ; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
685A             0 1928 ; -------------------------------------------------------------
685A             0 1931 __FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
685A             0 1932 __FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)
685A             0 1934 __FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
685A             0 1935 ; Second argument to push into the stack calculator is popped out of the stack
685A             0 1936 ; Since the caller routine also receives the parameters into the top of the stack
685A             0 1937 ; four bytes must be removed from SP before pop them out
685A CD B6 2A    0 1939 call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
685D D9          0 1940 exx
685E E1          0 1941 pop hl       ; Caller-Caller return addr
685F D9          0 1942 exx
6860 E1          0 1943 pop hl       ; Caller return addr
6861 F1          0 1945 pop af
6862 D1          0 1946 pop de
6863 C1          0 1947 pop bc
6864 E5          0 1949 push hl      ; Caller return addr
6865 D9          0 1950 exx
6866 E5          0 1951 push hl      ; Caller-Caller return addr
6867 D9          0 1952 exx
6868 C3 B6 2A    0 1954 jp __FPSTACK_PUSH
686B             0 1957 __FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
686B             0 1958 ; This format is specified in the ZX 48K Manual
686B             0 1959 ; You can push a 16 bit signed integer as
686B             0 1960 ; 0 SS LL HH 0, being SS the sign and LL HH the low
686B             0 1961 ; and High byte respectively
686B 7C          0 1962 ld a, h
686C 17          0 1963 rla			; sign to Carry
686D 9F          0 1964 sbc	a, a	; 0 if positive, FF if negative
686E 5F          0 1965 ld e, a
686F 55          0 1966 ld d, l
6870 4C          0 1967 ld c, h
6871 AF          0 1968 xor a
6872 47          0 1969 ld b, a
6873 C3 B6 2A    0 1970 jp __FPSTACK_PUSH
6876             0 1974 ; -------------------------------------------------------------
6876             0 1975 ; Floating point library using the FP ROM Calculator (ZX 48K)
6876             0 1977 ; All of them uses C EDHL registers as 1st paramter.
6876             0 1978 ; For binary operators, the 2n operator must be pushed into the
6876             0 1979 ; stack, in the order BC DE HL (B not used).
6876             0 1980 ;
6876             0 1981 ; Uses CALLEE convention
6876             0 1982 ; -------------------------------------------------------------
6876             0 1984 __DIVF:	; Division
6876             0 1989 TMP         EQU 23629 ;(DEST)
6876             0 1990 ERR_SP      EQU 23613
6876 CD 5A 68    0 1992 call __FPSTACK_PUSH2
6879 2A 3D 5C    0 1994 ld hl, (ERR_SP)
687C 22 4D 5C    0 1995 ld (TMP), hl
687F 21 98 68    0 1996 ld hl, __DIVBYZERO
6882 E5          0 1997 push hl
6883 21 00 00    0 1998 ld hl, 0
6886 39          0 1999 add hl, sp
6887 22 3D 5C    0 2000 ld (ERR_SP), hl
688A             0 2002 ; ------------- ROM DIV
688A EF          0 2003 rst 28h
688B 01          0 2004 defb 01h	; EXCHANGE
688C 05          0 2005 defb 05h	; DIV
688D 38          0 2006 defb 38h;   ; END CALC
688E E1          0 2008 pop hl
688F 2A 4D 5C    0 2009 ld hl, (TMP)
6892 22 3D 5C    0 2010 ld (ERR_SP), hl
6895 C3 F1 2B    0 2012 jp __FPSTACK_POP
6898             0 2014 __DIVBYZERO:
6898 2A 4D 5C    0 2015 ld hl, (TMP)
689B 22 3D 5C    0 2016 ld (ERR_SP), hl
689E 3E 05       0 2018 ld a, ERROR_NumberTooBig
68A0 32 3A 5C    0 2019 ld (ERR_NR), a
68A3             0 2021 ; Returns 0 on DIV BY ZERO error
68A3 AF          0 2022 xor a
68A4 47          0 2023 ld b, a
68A5 4F          0 2024 ld c, a
68A6 57          0 2025 ld d, a
68A7 5F          0 2026 ld e, a
68A8 C9          0 2027 ret
68A9             0 2034 ; DRAW using bresenhams algorithm and screen positioning
68A9             0 2035 ; Copyleft (k) 2010 by J. Rodriguez (a.k.a. Boriel) http://www.boriel.com
68A9             0 2036 ; vim:ts=4:et:sw=4:
68A9             0 2038 ; Y parameter in A
68A9             0 2039 ; X parameter in high byte on top of the stack
68A9             0 2049 ;
68A9             0 2050 ; PixelDown
68A9             0 2051 ; Alvin Albrecht 2002
68A9             0 2052 ;
68A9             0 2054 ; Pixel Down
68A9             0 2055 ;
68A9             0 2056 ; Adjusts screen address HL to move one pixel down in the display.
68A9             0 2057 ; (0,0) is located at the top left corner of the screen.
68A9             0 2058 ;
68A9             0 2059 ; enter: HL = valid screen address
68A9             0 2060 ; exit : Carry = moved off screen
68A9             0 2061 ;        Carry'= moved off current cell (needs ATTR update)
68A9             0 2062 ;        HL = moves one pixel down
68A9             0 2063 ; used : AF, HL
68A9             0 2065 SP.PixelDown:
68A9 24          0 2066 inc h
68AA 7C          0 2067 ld a,h
68AB E6 07       0 2068 and $07
68AD C0          0 2069 ret nz
68AE 08          0 2070 ex af, af'  ; Sets carry on F'
68AF 37          0 2071 scf         ; which flags ATTR must be updated
68B0 08          0 2072 ex af, af'
68B1 7C          0 2073 ld a,h
68B2 D6 08       0 2074 sub $08
68B4 67          0 2075 ld h,a
68B5 7D          0 2076 ld a,l
68B6 C6 20       0 2077 add a,$20
68B8 6F          0 2078 ld l,a
68B9 D0          0 2079 ret nc
68BA 7C          0 2080 ld a,h
68BB C6 08       0 2081 add a,$08
68BD 67          0 2082 ld h,a
68BE             0 2083 ;IF DISP_HIRES
68BE             0 2084 ;   and $18
68BE             0 2085 ;   cp $18
68BE             0 2086 ;ELSE
68BE FE 58       0 2087 cp $58
68C0             0 2088 ;ENDIF
68C0 3F          0 2089 ccf
68C1 C9          0 2090 ret
68C2             0 2094 ;
68C2             0 2095 ; PixelUp
68C2             0 2096 ; Alvin Albrecht 2002
68C2             0 2097 ;
68C2             0 2099 ; Pixel Up
68C2             0 2100 ;
68C2             0 2101 ; Adjusts screen address HL to move one pixel up in the display.
68C2             0 2102 ; (0,0) is located at the top left corner of the screen.
68C2             0 2103 ;
68C2             0 2104 ; enter: HL = valid screen address
68C2             0 2105 ; exit : Carry = moved off screen
68C2             0 2106 ;        HL = moves one pixel up
68C2             0 2107 ; used : AF, HL
68C2             0 2109 SP.PixelUp:
68C2 7C          0 2110 ld a,h
68C3 25          0 2111 dec h
68C4 E6 07       0 2112 and $07
68C6 C0          0 2113 ret nz
68C7 08          0 2114 ex af, af'
68C8 37          0 2115 scf
68C9 08          0 2116 ex af, af'
68CA 3E 08       0 2117 ld a,$08
68CC 84          0 2118 add a,h
68CD 67          0 2119 ld h,a
68CE 7D          0 2120 ld a,l
68CF D6 20       0 2121 sub $20
68D1 6F          0 2122 ld l,a
68D2 D0          0 2123 ret nc
68D3 7C          0 2124 ld a,h
68D4 D6 08       0 2125 sub $08
68D6 67          0 2126 ld h,a
68D7             0 2127 ;IF DISP_HIRES
68D7             0 2128 ;   and $18
68D7             0 2129 ;   cp $18
68D7             0 2130 ;   ccf
68D7             0 2131 ;ELSE
68D7 FE 40       0 2132 cp $40
68D9             0 2133 ;ENDIF
68D9 C9          0 2134 ret
68DA             0 2138 ;
68DA             0 2139 ; PixelLeft
68DA             0 2140 ; Jose Rodriguez 2012
68DA             0 2141 ;
68DA             0 2143 ; PixelLeft
68DA             0 2144 ;
68DA             0 2145 ; Adjusts screen address HL and Pixel bit A to move one pixel to the left
68DA             0 2146 ; on the display.  Start of line set Carry (Out of Screen)
68DA             0 2147 ;
68DA             0 2148 ; enter: HL = valid screen address
68DA             0 2149 ;        A = Bit Set
68DA             0 2150 ; exit : Carry = moved off screen
68DA             0 2151 ;        Carry' Set if moved off current ATTR CELL
68DA             0 2152 ;        HL = moves one character left, if needed
68DA             0 2153 ;        A = Bit Set with new pixel pos.
68DA             0 2154 ; used : AF, HL
68DA             0 2157 SP.PixelLeft:
68DA 07          0 2158 rlca    ; Sets new pixel bit 1 to the right
68DB D0          0 2159 ret nc
68DC 08          0 2160 ex af, af' ; Signal in C' we've moved off current ATTR cell
68DD 7D          0 2161 ld a,l
68DE 3D          0 2162 dec a
68DF 6F          0 2163 ld l,a
68E0 FE 20       0 2164 cp 32      ; Carry if in screen
68E2 3F          0 2165 ccf
68E3 3E 01       0 2166 ld a, 1
68E5 C9          0 2167 ret
68E6             0 2172 ;
68E6             0 2173 ; PixelRight
68E6             0 2174 ; Jose Rodriguez 2012
68E6             0 2175 ;
68E6             0 2178 ; PixelRight
68E6             0 2179 ;
68E6             0 2180 ; Adjusts screen address HL and Pixel bit A to move one pixel to the left
68E6             0 2181 ; on the display.  Start of line set Carry (Out of Screen)
68E6             0 2182 ;
68E6             0 2183 ; enter: HL = valid screen address
68E6             0 2184 ;        A = Bit Set
68E6             0 2185 ; exit : Carry = moved off screen
68E6             0 2186 ;        Carry' Set if moved off current ATTR CELL
68E6             0 2187 ;        HL = moves one character left, if needed
68E6             0 2188 ;        A = Bit Set with new pixel pos.
68E6             0 2189 ; used : AF, HL
68E6             0 2192 SP.PixelRight:
68E6 0F          0 2193 rrca    ; Sets new pixel bit 1 to the right
68E7 D0          0 2194 ret nc
68E8 08          0 2195 ex af, af' ; Signal in C' we've moved off current ATTR cell
68E9 7D          0 2196 ld a, l
68EA 3C          0 2197 inc a
68EB 6F          0 2198 ld l, a
68EC FE 20       0 2199 cp 32      ; Carry if IN screen
68EE 3F          0 2200 ccf
68EF 3E 80       0 2201 ld a, 80h
68F1 C9          0 2202 ret
68F2             0 2206 ;; DRAW PROCEDURE
68F2             0 2219 P_FLAG EQU 23697
68F2             0 2221 __DRAW_ERROR:
68F2 C3 03 67    0 2222 jp __OUT_OF_SCREEN_ERR
68F5             0 2224 DRAW:
68F5             0 2225 ;; ENTRY POINT
68F5 EB          0 2230 ex de, hl ; DE = Y OFFSET
68F6 E1          0 2231 pop hl	; return addr
68F7 E3          0 2232 ex (sp), hl ; CALLEE => HL = X OFFSET
68F8 ED 4B 7D 5C 0 2233 ld bc, (COORDS)
68FC 79          0 2235 ld a, c
68FD 85          0 2236 add a, l
68FE 6F          0 2237 ld l, a
68FF 7C          0 2238 ld a, h
6900 CE 00       0 2239 adc a, 0 ; HL = HL + C
6902 67          0 2240 ld h, a
6903 20 ED       0 2241 jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen
6905 78          0 2243 ld a, b
6906 83          0 2244 add a, e
6907 5F          0 2245 ld e, a
6908 7A          0 2246 ld a, d
6909 CE 00       0 2247 adc a, 0 ; DE = DE + B
690B 57          0 2248 ld d, a
690C 20 E4       0 2249 jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen
690E 3E BF       0 2251 ld a, 191
6910 93          0 2252 sub e
6911 38 DF       0 2253 jr c, __DRAW_ERROR	; Out of screen
6913 63          0 2255 ld h, e			; now H,L = y2, x2
6914             0 2257 __DRAW:
6914             0 2258 ; __FASTCALL__ Entry. Plots from (COORDS) to coord H, L
6914 E5          0 2259 push hl
6915 EB          0 2260 ex de, hl		; D,E = y2, x2;
6916 3A 91 5C    0 2262 ld a, (P_FLAG)
6919 4F          0 2263 ld c, a
691A CB 57       0 2264 bit 2, a        ; Test for INVERSE1
691C 28 0A       0 2265 jr z, __DRAW_SETUP1
691E 3E 2F       0 2266 ld a, 2Fh       ; CPL
6920 32 FE 69    0 2267 ld (__PLOTINVERSE), a
6923 3E A6       0 2268 ld a, 0A6h      ; and (hl)
6925 C3 34 69    0 2269 jp __DRAW_START
6928             0 2271 __DRAW_SETUP1:
6928 AF          0 2272 xor a           ; nop
6929 32 FE 69    0 2273 ld (__PLOTINVERSE), a
692C 3E B6       0 2274 ld a, 0B6h      ; or (hl)
692E CB 41       0 2275 bit 0, c        ; Test for OVER
6930 28 02       0 2276 jr z, __DRAW_START
6932 3E AE       0 2277 ld a, 0AEh      ; xor (hl)
6934             0 2279 __DRAW_START:
6934 32 FF 69    0 2280 ld (__PLOTOVER), a ; "Pokes" last operation
6937 D9          0 2281 exx
6938 ED 4B 7D 5C 0 2282 ld bc, (COORDS) ; B'C' = y1, x1
693C 50          0 2283 ld d, b         ; Saves B' in D'
693D 3E BF       0 2284 ld a, 191
693F             0 2286 __PIXEL_ADDR EQU 22ACh
693F CD AC 22    0 2287 call __PIXEL_ADDR
6942             0 2289 ;; Now gets pixel mask in A register
6942 47          0 2290 ld b, a
6943 04          0 2291 inc b
6944 AF          0 2292 xor a
6945 37          0 2293 scf
6946             0 2295 __PIXEL_MASK:
6946 1F          0 2296 rra
6947 10 FD       0 2297 djnz __PIXEL_MASK
6949 42          0 2299 ld b, d         ; Restores B' from D'
694A D1          0 2300 pop de			; D'E' = y2, x2
694B D9          0 2301 exx             ; At this point: D'E' = y2,x2 coords
694C             0 2302 ; B'C' = y1, y1  coords
694C 08          0 2303 ex af, af'      ; Saves A reg for later
694D             0 2304 ; A' = Pixel mask
694D             0 2305 ; H'L' = Screen Address of pixel
694D ED 4B 7D 5C 0 2307 ld bc, (COORDS) ; B,C = y1, x1
6951 7B          0 2309 ld a, e
6952 91          0 2310 sub c			; dx = X2 - X1
6953 4F          0 2311 ld c, a			; Saves dx in c
6954 3E 0C       0 2313 ld a, 0Ch       ; INC C opcode
6956 21 E6 68    0 2314 ld hl, __INCX   ; xi = 1
6959 30 09       0 2315 jr nc, __DRAW1
695B 79          0 2317 ld a, c
695C ED 44       0 2318 neg		 		; dx = X1 - X2
695E 4F          0 2319 ld c, a
695F 3E 0D       0 2320 ld a, 0Dh       ; DEC C opcode
6961 21 DA 68    0 2321 ld hl, __DECX   ; xi = -1
6964             0 2323 __DRAW1:
6964 32 B1 69    0 2324 ld (DX1), a
6967 22 B3 69    0 2325 ld (DX1 + 2), hl ; Updates DX1 call address
696A 32 EA 69    0 2326 ld (DX2), a
696D 22 EC 69    0 2327 ld (DX2 + 2), hl ; Updates DX2 call address
6970 7A          0 2329 ld a, d
6971 90          0 2330 sub b			; dy = Y2 - Y1
6972 47          0 2331 ld b, a			; Saves dy in b
6973 3E 04       0 2333 ld a, 4         ; INC B opcode
6975 21 C2 68    0 2334 ld hl, __INCY   ; y1 = 1
6978 30 09       0 2335 jr nc, __DRAW2
697A 78          0 2337 ld a, b
697B ED 44       0 2338 neg
697D 47          0 2339 ld b, a         ; dy = Y2 - Y1
697E 3E 05       0 2340 ld a, 5         ; DEC B opcode
6980 21 A9 68    0 2341 ld hl, __DECY   ; y1 = -1
6983             0 2343 __DRAW2:
6983 32 B6 69    0 2344 ld (DY1), a
6986 22 B8 69    0 2345 ld (DY1 + 2), hl ; Updates DX1 call address
6989 32 E5 69    0 2346 ld (DY2), a
698C 22 E7 69    0 2347 ld (DY2 + 2), hl ; Updates DX2 call address
698F 78          0 2349 ld a, b
6990 91          0 2350 sub c			; dy - dx
6991 38 35       0 2351 jr c, __DRAW_DX_GT_DY	; DX > DY
6993             0 2353 ; At this point DY >= DX
6993             0 2354 ; --------------------------
6993             0 2355 ; HL = error = dY / 2
6993 26 00       0 2356 ld h, 0
6995 68          0 2357 ld l, b
6996 CB 3D       0 2358 srl l
6998             0 2360 ; DE = -dX
6998 AF          0 2361 xor a
6999 91          0 2362 sub c
699A 5F          0 2363 ld e, a
699B 9F          0 2364 sbc a, a
699C 57          0 2365 ld d, a
699D             0 2367 ; BC = DY
699D 48          0 2368 ld c, b
699E 44          0 2369 ld b, h
699F D9          0 2371 exx
69A0 37          0 2372 scf             ; Sets Carry to signal update ATTR
69A1 08          0 2373 ex af, af'      ; Brings back pixel mask
69A2 5F          0 2374 ld e, a         ; Saves it in free E register
69A3 C3 BE 69    0 2375 jp __DRAW4_LOOP
69A6             0 2377 __DRAW3:			; While c != e => while y != y2
69A6 D9          0 2378 exx
69A7 19          0 2379 add hl, de		; error -= dX
69A8 CB 7C       0 2380 bit 7, h		;
69AA D9          0 2381 exx				; recover coordinates
69AB 28 09       0 2382 jr z, __DRAW4	; if error < 0
69AD D9          0 2384 exx
69AE 09          0 2385 add hl, bc		; error += dY
69AF D9          0 2386 exx
69B0 7B          0 2388 ld a, e
69B1             0 2389 DX1:                ; x += xi
69B1 0C          0 2390 inc c
69B2 CD E6 68    0 2391 call __INCX     ; This address will be dynamically updated
69B5 5F          0 2392 ld e, a
69B6             0 2394 __DRAW4:
69B6             0 2396 DY1:                ; y += yi
69B6 04          0 2397 inc b
69B7 CD C2 68    0 2398 call __INCY     ; This address will be dynamically updated
69BA 7B          0 2399 ld a, e         ; Restores A reg.
69BB CD FE 69    0 2400 call __FASTPLOT
69BE             0 2402 __DRAW4_LOOP:
69BE 78          0 2403 ld a, b
69BF BA          0 2404 cp d
69C0 C2 A6 69    0 2405 jp nz, __DRAW3
69C3 ED 43 7D 5C 0 2406 ld (COORDS), bc
69C7 C9          0 2407 ret
69C8             0 2409 __DRAW_DX_GT_DY:	; DX > DY
69C8             0 2410 ; --------------------------
69C8             0 2411 ; HL = error = dX / 2
69C8 26 00       0 2412 ld h, 0
69CA 69          0 2413 ld l, c
69CB CB 3D       0 2414 srl l			; HL = error = DX / 2
69CD             0 2416 ; DE = -dY
69CD AF          0 2417 xor a
69CE 90          0 2418 sub b
69CF 5F          0 2419 ld e, a
69D0 9F          0 2420 sbc a, a
69D1 57          0 2421 ld d, a
69D2             0 2423 ; BC = dX
69D2 44          0 2424 ld b, h
69D3 D9          0 2426 exx
69D4 53          0 2427 ld d, e
69D5 37          0 2428 scf             ; Sets Carry to signal update ATTR
69D6 08          0 2429 ex af, af'      ; Brings back pixel mask
69D7 5F          0 2430 ld e, a         ; Saves it in free E register
69D8 C3 F2 69    0 2431 jp __DRAW6_LOOP
69DB             0 2433 __DRAW5:			; While loop
69DB D9          0 2434 exx
69DC 19          0 2435 add hl, de		; error -= dY
69DD CB 7C       0 2436 bit 7, h		; if (error < 0)
69DF D9          0 2437 exx				; Restore coords
69E0 28 07       0 2438 jr z, __DRAW6	;
69E2 D9          0 2439 exx
69E3 09          0 2440 add hl, bc		; error += dX
69E4 D9          0 2441 exx
69E5             0 2443 DY2:                ; y += yi
69E5 04          0 2444 inc b
69E6 CD C2 68    0 2445 call __INCY     ; This address will be dynamically updated
69E9             0 2447 __DRAW6:
69E9 7B          0 2448 ld a, e
69EA             0 2449 DX2:                ; x += xi
69EA 0C          0 2450 inc c
69EB CD E6 68    0 2451 call __INCX     ; This address will be dynamically updated
69EE 5F          0 2452 ld e, a
69EF CD FE 69    0 2453 call __FASTPLOT
69F2             0 2455 __DRAW6_LOOP:
69F2 79          0 2456 ld a, c			; Current X coord
69F3 BA          0 2457 cp d
69F4 C2 DB 69    0 2458 jp nz, __DRAW5
69F7 ED 43 7D 5C 0 2459 ld (COORDS), bc
69FB C9          0 2460 ret
69FC             0 2462 COORDS   EQU 5C7Dh
69FC             0 2464 __DRAW_END:
69FC D9          0 2465 exx
69FD C9          0 2466 ret
69FE             0 2468 ;; Given a A mask and an HL screen position
69FE             0 2469 ;; return the next left position
69FE             0 2470 ;; Also updates BC coords
69FE             0 2471 __DECX EQU SP.PixelLeft
69FE             0 2473 ;; Like the above, but to the RIGHT
69FE             0 2474 ;; Also updates BC coords
69FE             0 2475 __INCX EQU SP.PixelRight
69FE             0 2477 ;; Given an HL screen position, calculates
69FE             0 2478 ;; the above position
69FE             0 2479 ;; Also updates BC coords
69FE             0 2480 __INCY EQU SP.PixelUp
69FE             0 2482 ;; Given an HL screen position, calculates
69FE             0 2483 ;; the above position
69FE             0 2484 ;; Also updates BC coords
69FE             0 2485 __DECY EQU SP.PixelDown
69FE             0 2487 ;; Puts the A register MASK in (HL)
69FE             0 2488 __FASTPLOT:
69FE             0 2489 __PLOTINVERSE:
69FE 00          0 2490 nop         ; Replace with CPL if INVERSE 1
69FF             0 2491 __PLOTOVER:
69FF B6          0 2492 or (hl)     ; Replace with XOR (hl) if OVER 1 AND INVERSE 0
6A00             0 2493 ; Replace with AND (hl) if INVERSE 1
6A00 77          0 2495 ld (hl), a
6A01 08          0 2496 ex af, af'  ; Recovers flag. If Carry set => update ATTR
6A02 7B          0 2497 ld a, e     ; Recovers A reg
6A03 D0          0 2498 ret nc
6A04 E5          0 2500 push hl
6A05 D5          0 2501 push de
6A06 C5          0 2502 push bc
6A07 CD 51 67    0 2503 call SET_PIXEL_ADDR_ATTR
6A0A C1          0 2504 pop bc
6A0B D1          0 2505 pop de
6A0C E1          0 2506 pop hl
6A0D             0 2509 __FASTPLOTEND:
6A0D B7          0 2510 or a        ; Resets carry flag
6A0E 08          0 2511 ex af, af'  ; Recovers A reg
6A0F 7B          0 2512 ld a, e
6A10 C9          0 2513 ret
6A11             0 2520 ; -----------------------------------------------------------
6A11             0 2521 ; vim: et:ts=4:sw=4:ruler:
6A11             0 2522 ;
6A11             0 2523 ; DRAW an arc using ZX ROM algorithm.
6A11             0 2524 ; DRAW x, y, r => r = Arc in radians
6A11             0 2526 ; r parameter in A ED BC register
6A11             0 2527 ; X, and Y parameter in high byte on top of the stack
6A11             0 2534 ; Ripped from the ZX Spectrum ROM
6A11             0 2536 DRAW3:
6A11             0 2549 L2D28   EQU 02D28h
6A11             0 2550 COORDS  EQU 5C7Dh
6A11             0 2551 STACK_TO_BC EQU 2307h
6A11             0 2552 STACK_TO_A  EQU 2314h
6A11 D9          0 2554 exx
6A12 08          0 2555 ex af, af'              ;; Preserves ARC
6A13 E1          0 2556 pop hl
6A14 D1          0 2557 pop de
6A15 E3          0 2558 ex (sp), hl             ;; CALLEE
6A16 D5          0 2559 push de
6A17 CD 6B 68    0 2560 call __FPSTACK_I16      ;; X Offset
6A1A E1          0 2561 pop hl
6A1B CD 6B 68    0 2562 call __FPSTACK_I16      ;; Y Offset
6A1E D9          0 2563 exx
6A1F 08          0 2564 ex af, af'
6A20 CD B6 2A    0 2565 call __FPSTACK_PUSH     ;; R Arc
6A23             0 2567 ;   Now enter the calculator and store the complete rotation angle in mem-5
6A23 EF          0 2569 RST     28H             ;; FP-CALC      x, y, A.
6A24 C5          0 2570 DEFB    $C5             ;;st-mem-5      x, y, A.
6A25             0 2572 ;   Test the angle for the special case of 360 degrees.
6A25 A2          0 2574 DEFB    $A2             ;;stk-half      x, y, A, 1/2.
6A26 04          0 2575 DEFB    $04             ;;multiply      x, y, A/2.
6A27 1F          0 2576 DEFB    $1F             ;;sin           x, y, sin(A/2).
6A28 31          0 2577 DEFB    $31             ;;duplicate     x, y, sin(A/2),sin(A/2)
6A29 30          0 2578 DEFB    $30             ;;not           x, y, sin(A/2), (0/1).
6A2A 30          0 2579 DEFB    $30             ;;not           x, y, sin(A/2), (1/0).
6A2B 00          0 2580 DEFB    $00             ;;jump-true     x, y, sin(A/2).
6A2C 06          0 2582 DEFB    $06             ;;forward to L23A3, DR-SIN-NZ
6A2D             0 2583 ;;if sin(r/2) is not zero.
6A2D             0 2585 ;   The third parameter is 2*PI (or a multiple of 2*PI) so a 360 degrees turn
6A2D             0 2586 ;   would just be a straight line.  Eliminating this case here prevents
6A2D             0 2587 ;   division by zero at later stage.
6A2D 02          0 2589 DEFB    $02             ;;delete        x, y.
6A2E 38          0 2590 DEFB    $38             ;;end-calc      x, y.
6A2F C3 04 6B    0 2591 JP      L2477
6A32             0 2593 ; ---
6A32             0 2595 ;   An arc can be drawn.
6A32             0 2597 ;; DR-SIN-NZ
6A32 C0          0 2598 DEFB    $C0             ;;st-mem-0      x, y, sin(A/2).   store mem-0
6A33 02          0 2599 DEFB    $02             ;;delete        x, y.
6A34             0 2601 ;   The next step calculates (roughly) the diameter of the circle of which the
6A34             0 2602 ;   arc will form part.  This value does not have to be too accurate as it is
6A34             0 2603 ;   only used to evaluate the number of straight lines and then discarded.
6A34             0 2604 ;   After all for a circle, the radius is used. Consequently, a circle of
6A34             0 2605 ;   radius 50 will have 24 straight lines but an arc of radius 50 will have 20
6A34             0 2606 ;   straight lines - when drawn in any direction.
6A34             0 2607 ;   So that simple arithmetic can be used, the length of the chord can be
6A34             0 2608 ;   calculated as X+Y rather than by Pythagoras Theorem and the sine of the
6A34             0 2609 ;   nearest angle within reach is used.
6A34 C1          0 2611 DEFB    $C1             ;;st-mem-1      x, y.             store mem-1
6A35 02          0 2612 DEFB    $02             ;;delete        x.
6A36 31          0 2614 DEFB    $31             ;;duplicate     x, x.
6A37 2A          0 2615 DEFB    $2A             ;;abs           x, x (+ve).
6A38 E1          0 2616 DEFB    $E1             ;;get-mem-1     x, X, y.
6A39 01          0 2617 DEFB    $01             ;;exchange      x, y, X.
6A3A E1          0 2618 DEFB    $E1             ;;get-mem-1     x, y, X, y.
6A3B 2A          0 2619 DEFB    $2A             ;;abs           x, y, X, Y (+ve).
6A3C 0F          0 2620 DEFB    $0F             ;;addition      x, y, X+Y.
6A3D E0          0 2621 DEFB    $E0             ;;get-mem-0     x, y, X+Y, sin(A/2).
6A3E 05          0 2622 DEFB    $05             ;;division      x, y, X+Y/sin(A/2).
6A3F 2A          0 2623 DEFB    $2A             ;;abs           x, y, X+Y/sin(A/2) = D.
6A40             0 2625 ;    Bring back sin(A/2) from mem-0 which will shortly get trashed.
6A40             0 2626 ;    Then bring D to the top of the stack again.
6A40 E0          0 2628 DEFB    $E0             ;;get-mem-0     x, y, D, sin(A/2).
6A41 01          0 2629 DEFB    $01             ;;exchange      x, y, sin(A/2), D.
6A42             0 2631 ;   Note. that since the value at the top of the stack has arisen as a result
6A42             0 2632 ;   of division then it can no longer be in integer form and the next re-stack
6A42             0 2633 ;   is unnecessary. Only the Sinclair ZX80 had integer division.
6A42             0 2635 ;;DEFB    $3D             ;;re-stack      (unnecessary)
6A42 38          0 2637 DEFB    $38             ;;end-calc      x, y, sin(A/2), D.
6A43             0 2639 ;   The next test avoids drawing 4 straight lines when the start and end pixels
6A43             0 2640 ;   are adjacent (or the same) but is probably best dispensed with.
6A43 7E          0 2642 LD      A,(HL)          ; fetch exponent byte of D.
6A44 FE 81       0 2643 CP      $81             ; compare to 1
6A46 30 07       0 2644 JR      NC,L23C1        ; forward, if > 1,  to DR-PRMS
6A48             0 2646 ;   else delete the top two stack values and draw a simple straight line.
6A48 EF          0 2648 RST     28H             ;; FP-CALC
6A49 02          0 2649 DEFB    $02             ;;delete
6A4A 02          0 2650 DEFB    $02             ;;delete
6A4B 38          0 2651 DEFB    $38             ;;end-calc      x, y.
6A4C C3 04 6B    0 2653 JP      L2477           ; to LINE-DRAW
6A4F             0 2655 ; ---
6A4F             0 2657 ;   The ARC will consist of multiple straight lines so call the CIRCLE-DRAW
6A4F             0 2658 ;   PARAMETERS ROUTINE to pre-calculate sine values from the angle (in mem-5)
6A4F             0 2659 ;   and determine also the number of straight lines from that value and the
6A4F             0 2660 ;   'diameter' which is at the top of the calculator stack.
6A4F             0 2662 ;; DR-PRMS
6A4F CD 7D 24    0 2663 L23C1:  CALL    247Dh           ; routine CD-PRMS1
6A52             0 2665 ; mem-0 ; (A)/No. of lines (=a) (step angle)
6A52             0 2666 ; mem-1 ; sin(a/2)
6A52             0 2667 ; mem-2 ; -
6A52             0 2668 ; mem-3 ; cos(a)                        const
6A52             0 2669 ; mem-4 ; sin(a)                        const
6A52             0 2670 ; mem-5 ; Angle of rotation (A)         in
6A52             0 2671 ; B     ; Count of straight lines - max 252.
6A52 C5          0 2673 PUSH    BC              ; Save the line count on the machine stack.
6A53             0 2675 ;   Remove the now redundant diameter value D.
6A53 EF          0 2677 RST     28H             ;; FP-CALC      x, y, sin(A/2), D.
6A54 02          0 2678 DEFB    $02             ;;delete        x, y, sin(A/2).
6A55             0 2680 ;   Dividing the sine of the step angle by the sine of the total angle gives
6A55             0 2681 ;   the length of the initial chord on a unary circle. This factor f is used
6A55             0 2682 ;   to scale the coordinates of the first line which still points in the
6A55             0 2683 ;   direction of the end point and may be larger.
6A55 E1          0 2685 DEFB    $E1             ;;get-mem-1     x, y, sin(A/2), sin(a/2)
6A56 01          0 2686 DEFB    $01             ;;exchange      x, y, sin(a/2), sin(A/2)
6A57 05          0 2687 DEFB    $05             ;;division      x, y, sin(a/2)/sin(A/2)
6A58 C1          0 2688 DEFB    $C1             ;;st-mem-1      x, y. f.
6A59 02          0 2689 DEFB    $02             ;;delete        x, y.
6A5A             0 2691 ;   With the factor stored, scale the x coordinate first.
6A5A 01          0 2693 DEFB    $01             ;;exchange      y, x.
6A5B 31          0 2694 DEFB    $31             ;;duplicate     y, x, x.
6A5C E1          0 2695 DEFB    $E1             ;;get-mem-1     y, x, x, f.
6A5D 04          0 2696 DEFB    $04             ;;multiply      y, x, x*f    (=xx)
6A5E C2          0 2697 DEFB    $C2             ;;st-mem-2      y, x, xx.
6A5F 02          0 2698 DEFB    $02             ;;delete        y. x.
6A60             0 2700 ;   Now scale the y coordinate.
6A60 01          0 2702 DEFB    $01             ;;exchange      x, y.
6A61 31          0 2703 DEFB    $31             ;;duplicate     x, y, y.
6A62 E1          0 2704 DEFB    $E1             ;;get-mem-1     x, y, y, f
6A63 04          0 2705 DEFB    $04             ;;multiply      x, y, y*f    (=yy)
6A64             0 2707 ;   Note. 'sin' and 'cos' trash locations mem-0 to mem-2 so fetch mem-2 to the
6A64             0 2708 ;   calculator stack for safe keeping.
6A64 E2          0 2710 DEFB    $E2             ;;get-mem-2     x, y, yy, xx.
6A65             0 2712 ;   Once we get the coordinates of the first straight line then the 'ROTATION
6A65             0 2713 ;   FORMULA' used in the arc loop will take care of all other points, but we
6A65             0 2714 ;   now use a variation of that formula to rotate the first arc through (A-a)/2
6A65             0 2715 ;   radians.
6A65             0 2716 ;
6A65             0 2717 ;       xRotated = y * sin(angle) + x * cos(angle)
6A65             0 2718 ;       yRotated = y * cos(angle) - x * sin(angle)
6A65             0 2719 ;
6A65 E5          0 2721 DEFB    $E5             ;;get-mem-5     x, y, yy, xx, A.
6A66 E0          0 2722 DEFB    $E0             ;;get-mem-0     x, y, yy, xx, A, a.
6A67 03          0 2723 DEFB    $03             ;;subtract      x, y, yy, xx, A-a.
6A68 A2          0 2724 DEFB    $A2             ;;stk-half      x, y, yy, xx, A-a, 1/2.
6A69 04          0 2725 DEFB    $04             ;;multiply      x, y, yy, xx, (A-a)/2. (=angle)
6A6A 31          0 2726 DEFB    $31             ;;duplicate     x, y, yy, xx, angle, angle.
6A6B 1F          0 2727 DEFB    $1F             ;;sin           x, y, yy, xx, angle, sin(angle)
6A6C C5          0 2728 DEFB    $C5             ;;st-mem-5      x, y, yy, xx, angle, sin(angle)
6A6D 02          0 2729 DEFB    $02             ;;delete        x, y, yy, xx, angle
6A6E 20          0 2731 DEFB    $20             ;;cos           x, y, yy, xx, cos(angle).
6A6F             0 2733 ;   Note. mem-0, mem-1 and mem-2 can be used again now...
6A6F C0          0 2735 DEFB    $C0             ;;st-mem-0      x, y, yy, xx, cos(angle).
6A70 02          0 2736 DEFB    $02             ;;delete        x, y, yy, xx.
6A71 C2          0 2738 DEFB    $C2             ;;st-mem-2      x, y, yy, xx.
6A72 02          0 2739 DEFB    $02             ;;delete        x, y, yy.
6A73 C1          0 2741 DEFB    $C1             ;;st-mem-1      x, y, yy.
6A74 E5          0 2742 DEFB    $E5             ;;get-mem-5     x, y, yy, sin(angle)
6A75 04          0 2743 DEFB    $04             ;;multiply      x, y, yy*sin(angle).
6A76 E0          0 2744 DEFB    $E0             ;;get-mem-0     x, y, yy*sin(angle), cos(angle)
6A77 E2          0 2745 DEFB    $E2             ;;get-mem-2     x, y, yy*sin(angle), cos(angle), xx.
6A78 04          0 2746 DEFB    $04             ;;multiply      x, y, yy*sin(angle), xx*cos(angle).
6A79 0F          0 2747 DEFB    $0F             ;;addition      x, y, xRotated.
6A7A E1          0 2748 DEFB    $E1             ;;get-mem-1     x, y, xRotated, yy.
6A7B 01          0 2749 DEFB    $01             ;;exchange      x, y, yy, xRotated.
6A7C C1          0 2750 DEFB    $C1             ;;st-mem-1      x, y, yy, xRotated.
6A7D 02          0 2751 DEFB    $02             ;;delete        x, y, yy.
6A7E E0          0 2753 DEFB    $E0             ;;get-mem-0     x, y, yy, cos(angle).
6A7F 04          0 2754 DEFB    $04             ;;multiply      x, y, yy*cos(angle).
6A80 E2          0 2755 DEFB    $E2             ;;get-mem-2     x, y, yy*cos(angle), xx.
6A81 E5          0 2756 DEFB    $E5             ;;get-mem-5     x, y, yy*cos(angle), xx, sin(angle).
6A82 04          0 2757 DEFB    $04             ;;multiply      x, y, yy*cos(angle), xx*sin(angle).
6A83 03          0 2758 DEFB    $03             ;;subtract      x, y, yRotated.
6A84 C2          0 2759 DEFB    $C2             ;;st-mem-2      x, y, yRotated.
6A85             0 2761 ;   Now the initial x and y coordinates are made positive and summed to see
6A85             0 2762 ;   if they measure up to anything significant.
6A85 2A          0 2764 DEFB    $2A             ;;abs           x, y, yRotated'.
6A86 E1          0 2765 DEFB    $E1             ;;get-mem-1     x, y, yRotated', xRotated.
6A87 2A          0 2766 DEFB    $2A             ;;abs           x, y, yRotated', xRotated'.
6A88 0F          0 2767 DEFB    $0F             ;;addition      x, y, yRotated+xRotated.
6A89 02          0 2768 DEFB    $02             ;;delete        x, y.
6A8A 38          0 2770 DEFB    $38             ;;end-calc      x, y.
6A8B             0 2772 ;   Although the test value has been deleted it is still above the calculator
6A8B             0 2773 ;   stack in memory and conveniently DE which points to the first free byte
6A8B             0 2774 ;   addresses the exponent of the test value.
6A8B 1A          0 2776 LD      A,(DE)          ; Fetch exponent of the length indicator.
6A8C FE 81       0 2777 CP      $81             ; Compare to that for 1
6A8E C1          0 2779 POP     BC              ; Balance the machine stack
6A8F DA 04 6B    0 2781 JP      C,L2477         ; forward, if the coordinates of first line
6A92             0 2782 ; don't add up to more than 1, to LINE-DRAW
6A92             0 2784 ;   Continue when the arc will have a discernable shape.
6A92 C5          0 2786 PUSH    BC              ; Restore line counter to the machine stack.
6A93             0 2788 ;   The parameters of the DRAW command were relative and they are now converted
6A93             0 2789 ;   to absolute coordinates by adding to the coordinates of the last point
6A93             0 2790 ;   plotted. The first two values on the stack are the terminal tx and ty
6A93             0 2791 ;   coordinates.  The x-coordinate is converted first but first the last point
6A93             0 2792 ;   plotted is saved as it will initialize the moving ax, value.
6A93 EF          0 2794 RST     28H             ;; FP-CALC      x, y.
6A94 01          0 2795 DEFB    $01             ;;exchange      y, x.
6A95 38          0 2796 DEFB    $38             ;;end-calc      y, x.
6A96 3A 7D 5C    0 2798 LD      A,(COORDS)      ;; Fetch System Variable COORDS-x
6A99 CD 28 2D    0 2799 CALL    L2D28           ;; routine STACK-A
6A9C EF          0 2801 RST     28H             ;; FP-CALC      y, x, last-x.
6A9D             0 2803 ;   Store the last point plotted to initialize the moving ax value.
6A9D C0          0 2805 DEFB    $C0             ;;st-mem-0      y, x, last-x.
6A9E 0F          0 2806 DEFB    $0F             ;;addition      y, absolute x.
6A9F 01          0 2807 DEFB    $01             ;;exchange      tx, y.
6AA0 38          0 2808 DEFB    $38             ;;end-calc      tx, y.
6AA1 3A 7E 5C    0 2810 LD      A,(COORDS + 1)  ; Fetch System Variable COORDS-y
6AA4 CD 28 2D    0 2811 CALL    L2D28           ; routine STACK-A
6AA7 EF          0 2813 RST     28H             ;; FP-CALC      tx, y, last-y.
6AA8             0 2815 ;   Store the last point plotted to initialize the moving ay value.
6AA8 C5          0 2817 DEFB    $C5             ;;st-mem-5      tx, y, last-y.
6AA9 0F          0 2818 DEFB    $0F             ;;addition      tx, ty.
6AAA             0 2820 ;   Fetch the moving ax and ay to the calculator stack.
6AAA E0          0 2822 DEFB    $E0             ;;get-mem-0     tx, ty, ax.
6AAB E5          0 2823 DEFB    $E5             ;;get-mem-5     tx, ty, ax, ay.
6AAC 38          0 2824 DEFB    $38             ;;end-calc      tx, ty, ax, ay.
6AAD C1          0 2826 POP     BC              ; Restore the straight line count.
6AAE             0 2828 ; -----------------------------------
6AAE             0 2829 ; THE 'CIRCLE/DRAW CONVERGENCE POINT'
6AAE             0 2830 ; -----------------------------------
6AAE             0 2831 ;   The CIRCLE and ARC-DRAW commands converge here.
6AAE             0 2832 ;
6AAE             0 2833 ;   Note. for both the CIRCLE and ARC commands the minimum initial line count
6AAE             0 2834 ;   is 4 (as set up by the CD_PARAMS routine) and so the zero flag will never
6AAE             0 2835 ;   be set and the loop is always entered.  The first test is superfluous and
6AAE             0 2836 ;   the jump will always be made to ARC-START.
6AAE             0 2838 ;; DRW-STEPS
6AAE 05          0 2839 L2420:  DEC     B               ; decrement the arc count (4,8,12,16...).
6AAF             0 2841 ;JR      Z,L245F         ; forward, if zero (not possible), to ARC-END
6AAF C3 C6 6A    0 2843 JP      L2439           ; forward to ARC-START
6AB2             0 2845 ; --------------
6AB2             0 2846 ; THE 'ARC LOOP'
6AB2             0 2847 ; --------------
6AB2             0 2848 ;
6AB2             0 2849 ;   The arc drawing loop will draw up to 31 straight lines for a circle and up
6AB2             0 2850 ;   251 straight lines for an arc between two points. In both cases the final
6AB2             0 2851 ;   closing straight line is drawn at ARC_END, but it otherwise loops back to
6AB2             0 2852 ;   here to calculate the next coordinate using the ROTATION FORMULA where (a)
6AB2             0 2853 ;   is the previously calculated, constant CENTRAL ANGLE of the arcs.
6AB2             0 2854 ;
6AB2             0 2855 ;       Xrotated = x * cos(a) - y * sin(a)
6AB2             0 2856 ;       Yrotated = x * sin(a) + y * cos(a)
6AB2             0 2857 ;
6AB2             0 2858 ;   The values cos(a) and sin(a) are pre-calculated and held in mem-3 and mem-4
6AB2             0 2859 ;   for the duration of the routine.
6AB2             0 2860 ;   Memory location mem-1 holds the last relative x value (rx) and mem-2 holds
6AB2             0 2861 ;   the last relative y value (ry) used by DRAW.
6AB2             0 2862 ;
6AB2             0 2863 ;   Note. that this is a very clever twist on what is after all a very clever,
6AB2             0 2864 ;   well-used formula.  Normally the rotation formula is used with the x and y
6AB2             0 2865 ;   coordinates from the centre of the circle (or arc) and a supplied angle to
6AB2             0 2866 ;   produce two new x and y coordinates in an anticlockwise direction on the
6AB2             0 2867 ;   circumference of the circle.
6AB2             0 2868 ;   What is being used here, instead, is the relative X and Y parameters from
6AB2             0 2869 ;   the last point plotted that are required to get to the current point and
6AB2             0 2870 ;   the formula returns the next relative coordinates to use.
6AB2             0 2872 ;; ARC-LOOP
6AB2 EF          0 2873 L2425:  RST     28H             ;; FP-CALC
6AB3 E1          0 2874 DEFB    $E1             ;;get-mem-1     rx.
6AB4 31          0 2875 DEFB    $31             ;;duplicate     rx, rx.
6AB5 E3          0 2876 DEFB    $E3             ;;get-mem-3     cos(a)
6AB6 04          0 2877 DEFB    $04             ;;multiply      rx, rx*cos(a).
6AB7 E2          0 2878 DEFB    $E2             ;;get-mem-2     rx, rx*cos(a), ry.
6AB8 E4          0 2879 DEFB    $E4             ;;get-mem-4     rx, rx*cos(a), ry, sin(a).
6AB9 04          0 2880 DEFB    $04             ;;multiply      rx, rx*cos(a), ry*sin(a).
6ABA 03          0 2881 DEFB    $03             ;;subtract      rx, rx*cos(a) - ry*sin(a)
6ABB C1          0 2882 DEFB    $C1             ;;st-mem-1      rx, new relative x rotated.
6ABC 02          0 2883 DEFB    $02             ;;delete        rx.
6ABD E4          0 2885 DEFB    $E4             ;;get-mem-4     rx, sin(a).
6ABE 04          0 2886 DEFB    $04             ;;multiply      rx*sin(a)
6ABF E2          0 2887 DEFB    $E2             ;;get-mem-2     rx*sin(a), ry.
6AC0 E3          0 2888 DEFB    $E3             ;;get-mem-3     rx*sin(a), ry, cos(a).
6AC1 04          0 2889 DEFB    $04             ;;multiply      rx*sin(a), ry*cos(a).
6AC2 0F          0 2890 DEFB    $0F             ;;addition      rx*sin(a) + ry*cos(a).
6AC3 C2          0 2891 DEFB    $C2             ;;st-mem-2      new relative y rotated.
6AC4 02          0 2892 DEFB    $02             ;;delete        .
6AC5 38          0 2893 DEFB    $38             ;;end-calc      .
6AC6             0 2895 ;   Note. the calculator stack actually holds   tx, ty, ax, ay
6AC6             0 2896 ;   and the last absolute values of x and y
6AC6             0 2897 ;   are now brought into play.
6AC6             0 2898 ;
6AC6             0 2899 ;   Magically, the two new rotated coordinates rx and ry are all that we would
6AC6             0 2900 ;   require to draw a circle or arc - on paper!
6AC6             0 2901 ;   The Spectrum DRAW routine draws to the rounded x and y coordinate and so
6AC6             0 2902 ;   repetitions of values like 3.49 would mean that the fractional parts
6AC6             0 2903 ;   would be lost until eventually the draw coordinates might differ from the
6AC6             0 2904 ;   floating point values used above by several pixels.
6AC6             0 2905 ;   For this reason the accurate offsets calculated above are added to the
6AC6             0 2906 ;   accurate, absolute coordinates maintained in ax and ay and these new
6AC6             0 2907 ;   coordinates have the integer coordinates of the last plot position
6AC6             0 2908 ;   ( from System Variable COORDS ) subtracted from them to give the relative
6AC6             0 2909 ;   coordinates required by the DRAW routine.
6AC6             0 2911 ;   The mid entry point.
6AC6             0 2913 ;; ARC-START
6AC6 C5          0 2914 L2439:  PUSH    BC              ; Preserve the arc counter on the machine stack.
6AC7             0 2916 ;   Store the absolute ay in temporary variable mem-0 for the moment.
6AC7 EF          0 2918 RST     28H             ;; FP-CALC      ax, ay.
6AC8 C0          0 2919 DEFB    $C0             ;;st-mem-0      ax, ay.
6AC9 02          0 2920 DEFB    $02             ;;delete        ax.
6ACA             0 2922 ;   Now add the fractional relative x coordinate to the fractional absolute
6ACA             0 2923 ;   x coordinate to obtain a new fractional x-coordinate.
6ACA E1          0 2925 DEFB    $E1             ;;get-mem-1     ax, xr.
6ACB 0F          0 2926 DEFB    $0F             ;;addition      ax+xr (= new ax).
6ACC 31          0 2927 DEFB    $31             ;;duplicate     ax, ax.
6ACD 38          0 2928 DEFB    $38             ;;end-calc      ax, ax.
6ACE 3A 7D 5C    0 2930 LD      A,(COORDS)       ; COORDS-x      last x    (integer ix 0-255)
6AD1 CD 28 2D    0 2931 CALL    L2D28           ; routine STACK-A
6AD4 EF          0 2933 RST     28H             ;; FP-CALC      ax, ax, ix.
6AD5 03          0 2934 DEFB    $03             ;;subtract      ax, ax-ix  = relative DRAW Dx.
6AD6             0 2936 ;   Having calculated the x value for DRAW do the same for the y value.
6AD6 E0          0 2938 DEFB    $E0             ;;get-mem-0     ax, Dx, ay.
6AD7 E2          0 2939 DEFB    $E2             ;;get-mem-2     ax, Dx, ay, ry.
6AD8 0F          0 2940 DEFB    $0F             ;;addition      ax, Dx, ay+ry (= new ay).
6AD9 C0          0 2941 DEFB    $C0             ;;st-mem-0      ax, Dx, ay.
6ADA 01          0 2942 DEFB    $01             ;;exchange      ax, ay, Dx,
6ADB E0          0 2943 DEFB    $E0             ;;get-mem-0     ax, ay, Dx, ay.
6ADC 38          0 2944 DEFB    $38             ;;end-calc      ax, ay, Dx, ay.
6ADD 3A 7E 5C    0 2946 LD      A,(COORDS + 1)  ; COORDS-y      last y (integer iy 0-175)
6AE0 CD 28 2D    0 2947 CALL    L2D28           ; routine STACK-A
6AE3 EF          0 2949 RST     28H             ;; FP-CALC      ax, ay, Dx, ay, iy.
6AE4 03          0 2950 DEFB    $03             ;;subtract      ax, ay, Dx, ay-iy ( = Dy).
6AE5 38          0 2951 DEFB    $38             ;;end-calc      ax, ay, Dx, Dy.
6AE6 CD 04 6B    0 2953 CALL    L2477           ; Routine DRAW-LINE draws (Dx,Dy) relative to
6AE9             0 2954 ; the last pixel plotted leaving absolute x
6AE9             0 2955 ; and y on the calculator stack.
6AE9             0 2956 ;               ax, ay.
6AE9 C1          0 2958 POP     BC              ; Restore the arc counter from the machine stack.
6AEA 10 C6       0 2960 DJNZ    L2425           ; Decrement and loop while > 0 to ARC-LOOP
6AEC             0 2962 ; -------------
6AEC             0 2963 ; THE 'ARC END'
6AEC             0 2964 ; -------------
6AEC             0 2966 ;   To recap the full calculator stack is       tx, ty, ax, ay.
6AEC             0 2968 ;   Just as one would do if drawing the curve on paper, the final line would
6AEC             0 2969 ;   be drawn by joining the last point plotted to the initial start point
6AEC             0 2970 ;   in the case of a CIRCLE or to the calculated end point in the case of
6AEC             0 2971 ;   an ARC.
6AEC             0 2972 ;   The moving absolute values of x and y are no longer required and they
6AEC             0 2973 ;   can be deleted to expose the closing coordinates.
6AEC             0 2975 ;; ARC-END
6AEC EF          0 2976 L245F:  RST     28H             ;; FP-CALC      tx, ty, ax, ay.
6AED 02          0 2977 DEFB    $02             ;;delete        tx, ty, ax.
6AEE 02          0 2978 DEFB    $02             ;;delete        tx, ty.
6AEF 01          0 2979 DEFB    $01             ;;exchange      ty, tx.
6AF0 38          0 2980 DEFB    $38             ;;end-calc      ty, tx.
6AF1             0 2982 ;   First calculate the relative x coordinate to the end-point.
6AF1 3A 7D 5C    0 2984 LD      A,($5C7D)       ; COORDS-x
6AF4 CD 28 2D    0 2985 CALL    L2D28           ; routine STACK-A
6AF7 EF          0 2987 RST     28H             ;; FP-CALC      ty, tx, coords_x.
6AF8 03          0 2988 DEFB    $03             ;;subtract      ty, rx.
6AF9             0 2990 ;   Next calculate the relative y coordinate to the end-point.
6AF9 01          0 2992 DEFB    $01             ;;exchange      rx, ty.
6AFA 38          0 2993 DEFB    $38             ;;end-calc      rx, ty.
6AFB 3A 7E 5C    0 2995 LD      A,($5C7E)       ; COORDS-y
6AFE CD 28 2D    0 2996 CALL    L2D28           ; routine STACK-A
6B01 EF          0 2998 RST     28H             ;; FP-CALC      rx, ty, coords_y
6B02 03          0 2999 DEFB    $03             ;;subtract      rx, ry.
6B03 38          0 3000 DEFB    $38             ;;end-calc      rx, ry.
6B04             0 3001 ;   Finally draw the last straight line.
6B04             0 3002 L2477:
6B04 CD 07 23    0 3003 call    STACK_TO_BC     ;;Pops x, and y, and stores it in B, C
6B07 2A 7D 5C    0 3004 ld      hl, (COORDS)    ;;Calculates x2 and y2 in L, H
6B0A CB 13       0 3006 rl      e               ;; Rotate left to carry
6B0C 79          0 3007 ld      a, c
6B0D 30 02       0 3008 jr      nc, SUM_C
6B0F ED 44       0 3009 neg
6B11             0 3010 SUM_C:
6B11 85          0 3011 add     a, l
6B12 6F          0 3012 ld      l, a            ;; X2
6B13 CB 12       0 3014 rl      d               ;; Low sign to carry
6B15 78          0 3015 ld      a, b
6B16 30 02       0 3016 jr      nc, SUM_B
6B18 ED 44       0 3017 neg
6B1A             0 3018 SUM_B:
6B1A 84          0 3019 add     a, h
6B1B 67          0 3020 ld      h, a
6B1C C3 14 69    0 3021 jp      __DRAW          ;;forward to LINE-DRAW (Fastcalled)
6B1F             0 3029 __LEI8: ; Signed <= comparison for 8bit int
6B1F             0 3030 ; A <= H (registers)
6B1F 94          0 3033 sub h
6B20 20 03       0 3034 jr nz, __LTI
6B22 3C          0 3035 inc a
6B23 C9          0 3036 ret
6B24             0 3038 __LTI8:  ; Test 8 bit values A < H
6B24 94          0 3039 sub h
6B25             0 3041 __LTI:   ; Generic signed comparison
6B25 E2 2A 6B    0 3042 jp po, checkParity
6B28 EE 80       0 3043 xor 0x80
6B2A             0 3044 checkParity:
6B2A 3E 00       0 3045 ld a, 0     ; False
6B2C F0          0 3046 ret p
6B2D 3C          0 3047 inc a       ; True
6B2E C9          0 3048 ret
6B2F             0 3052 __LTI16: ; Test 8 bit values HL < DE
6B2F             0 3053 ; Returns result in A: 0 = False, !0 = True
6B2F B7          0 3056 or a
6B30 ED 52       0 3057 sbc hl, de
6B32 E2 38 6B    0 3058 jp po, checkParity
6B35 7C          0 3059 ld a, h
6B36 EE 80       0 3060 xor 0x80
6B38             0 3061 checkParity:
6B38 3E 00       0 3062 ld a, 0     ; False
6B3A F0          0 3063 ret p
6B3B 3C          0 3064 inc a       ; True
6B3C C9          0 3065 ret
6B3D             0 3072 ; -------------------------------------------------------------
6B3D             0 3073 ; Floating point library using the FP ROM Calculator (ZX 48K)
6B3D             0 3074 ; All of them uses A EDCB registers as 1st paramter.
6B3D             0 3075 ; For binary operators, the 2n operator must be pushed into the
6B3D             0 3076 ; stack, in the order A DE BC.
6B3D             0 3077 ;
6B3D             0 3078 ; Uses CALLEE convention
6B3D             0 3079 ; -------------------------------------------------------------
6B3D             0 3081 __MULF:	; Multiplication
6B3D CD 5A 68    0 3082 call __FPSTACK_PUSH2
6B40             0 3084 ; ------------- ROM MUL
6B40 EF          0 3085 rst 28h
6B41 04          0 3086 defb 04h	;
6B42 38          0 3087 defb 38h;   ; END CALC
6B43 C3 F1 2B    0 3089 jp __FPSTACK_POP
6B46             0 3094 ; Parameter / Local var load
6B46             0 3095 ; A => Offset
6B46             0 3096 ; IX = Stack Frame
6B46             0 3097 ; RESULT: HL => IX + DE
6B46             0 3101 ; __FASTCALL__ routine which
6B46             0 3102 ; loads a 40 bits floating point into A ED CB
6B46             0 3103 ; stored at position pointed by POINTER HL
6B46             0 3104 ;A DE, BC <-- ((HL))
6B46             0 3106 __ILOADF:
6B46 7E          0 3107 ld a, (hl)
6B47 23          0 3108 inc hl
6B48 66          0 3109 ld h, (hl)
6B49 6F          0 3110 ld l, a
6B4A             0 3112 ; __FASTCALL__ routine which
6B4A             0 3113 ; loads a 40 bits floating point into A ED CB
6B4A             0 3114 ; stored at position pointed by POINTER HL
6B4A             0 3115 ;A DE, BC <-- (HL)
6B4A             0 3117 __LOADF:    ; Loads a 40 bits FP number from address pointed by HL
6B4A 7E          0 3118 ld a, (hl)
6B4B 23          0 3119 inc hl
6B4C 5E          0 3120 ld e, (hl)
6B4D 23          0 3121 inc hl
6B4E 56          0 3122 ld d, (hl)
6B4F 23          0 3123 inc hl
6B50 4E          0 3124 ld c, (hl)
6B51 23          0 3125 inc hl
6B52 46          0 3126 ld b, (hl)
6B53 C9          0 3127 ret
6B54             0 3131 __PLOADF:
6B54 DD E5       0 3132 push ix
6B56 E1          0 3133 pop hl
6B57 19          0 3134 add hl, de
6B58 C3 4A 6B    0 3135 jp __LOADF
6B5B             0 3141 ; Stores FP number in A ED CB at location HL+IX
6B5B             0 3142 ; HL = Offset
6B5B             0 3143 ; IX = Stack Frame
6B5B             0 3144 ; A ED CB = FP Number
6B5B             0 3148 __PISTOREF:	; Indect Stores a float (A, E, D, C, B) at location stored in memory, pointed by (IX + HL)
6B5B D5          0 3149 push de
6B5C EB          0 3150 ex de, hl	; DE <- HL
6B5D DD E5       0 3151 push ix
6B5F E1          0 3152 pop hl		; HL <- IX
6B60 19          0 3153 add hl, de  ; HL <- IX + HL
6B61 D1          0 3154 pop de
6B62             0 3156 __ISTOREF:  ; Load address at hl, and stores A,E,D,C,B registers at that address. Modifies A' register
6B62 08          0 3157 ex af, af'
6B63 7E          0 3158 ld a, (hl)
6B64 23          0 3159 inc hl
6B65 66          0 3160 ld h, (hl)
6B66 6F          0 3161 ld l, a     ; HL = (HL)
6B67 08          0 3162 ex af, af'
6B68             0 3164 __STOREF:	; Stores the given FP number in A EDCB at address HL
6B68 77          0 3165 ld (hl), a
6B69 23          0 3166 inc hl
6B6A 73          0 3167 ld (hl), e
6B6B 23          0 3168 inc hl
6B6C 72          0 3169 ld (hl), d
6B6D 23          0 3170 inc hl
6B6E 71          0 3171 ld (hl), c
6B6F 23          0 3172 inc hl
6B70 70          0 3173 ld (hl), b
6B71 C9          0 3174 ret
6B72             0 3178 ; Stored a float number in A ED CB into the address pointed by IX + HL
6B72             0 3179 __PSTOREF:
6B72 D5          0 3180 push de
6B73 EB          0 3181 ex de, hl  ; DE <- HL
6B74 DD E5       0 3182 push ix
6B76 E1          0 3183 pop hl	   ; HL <- IX
6B77 19          0 3184 add hl, de ; HL <- IX + DE
6B78 D1          0 3185 pop de
6B79 C3 68 6B    0 3186 jp __STOREF
6B7C             0 3193 __ABS32:
6B7C CB 7A       0 3194 bit 7, d
6B7E C8          0 3195 ret z
6B7F             0 3197 __NEG32: ; Negates DEHL (Two's complement)
6B7F 7D          0 3198 ld a, l
6B80 2F          0 3199 cpl
6B81 6F          0 3200 ld l, a
6B82 7C          0 3202 ld a, h
6B83 2F          0 3203 cpl
6B84 67          0 3204 ld h, a
6B85 7B          0 3206 ld a, e
6B86 2F          0 3207 cpl
6B87 5F          0 3208 ld e, a
6B88 7A          0 3210 ld a, d
6B89 2F          0 3211 cpl
6B8A 57          0 3212 ld d, a
6B8B 2C          0 3214 inc l
6B8C C0          0 3215 ret nz
6B8D 24          0 3217 inc h
6B8E C0          0 3218 ret nz
6B8F 13          0 3220 inc de
6B90 C9          0 3221 ret
6B91             0 3224 __I8TOFREG:
6B91 6F          0 3225 ld l, a
6B92 07          0 3226 rlca
6B93 9F          0 3227 sbc a, a	; A = SGN(A)
6B94 67          0 3228 ld h, a
6B95 5F          0 3229 ld e, a
6B96 57          0 3230 ld d, a
6B97             0 3232 __I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
6B97             0 3233 ; to a Floating Point Number returned in (A ED CB)
6B97 7A          0 3235 ld a, d
6B98 B7          0 3236 or a		; Test sign
6B99 F2 AA 6B    0 3238 jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned
6B9C CD 7F 6B    0 3240 call __NEG32		; Convert it to positive
6B9F CD AA 6B    0 3241 call __U32TOFREG	; Convert it to Floating point
6BA2 CB FB       0 3243 set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
6BA4 C9          0 3244 ret
6BA5             0 3246 __U8TOFREG:
6BA5             0 3247 ; Converts an unsigned 8 bit (A) to Floating point
6BA5 6F          0 3248 ld l, a
6BA6 26 00       0 3249 ld h, 0
6BA8 5C          0 3250 ld e, h
6BA9 54          0 3251 ld d, h
6BAA             0 3253 __U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
6BAA             0 3254 ; to a Floating point number returned in A ED CB
6BAA 7A          0 3260 ld a, d
6BAB B3          0 3261 or e
6BAC B4          0 3262 or h
6BAD B5          0 3263 or l
6BAE 42          0 3264 ld b, d
6BAF 4B          0 3265 ld c, e		; Returns 00 0000 0000 if ZERO
6BB0 C8          0 3266 ret z
6BB1 D5          0 3268 push de
6BB2 E5          0 3269 push hl
6BB3 D9          0 3271 exx
6BB4 D1          0 3272 pop de  ; Loads integer into B'C' D'E'
6BB5 C1          0 3273 pop bc
6BB6 D9          0 3274 exx
6BB7 2E 80       0 3276 ld l, 128	; Exponent
6BB9 01 00 00    0 3277 ld bc, 0	; DEBC = 0
6BBC 50          0 3278 ld d, b
6BBD 59          0 3279 ld e, c
6BBE             0 3281 __U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
6BBE D9          0 3282 exx
6BBF 7A          0 3283 ld a, d 	; B'C'D'E' == 0 ?
6BC0 B3          0 3284 or e
6BC1 B0          0 3285 or b
6BC2 B1          0 3286 or c
6BC3 CA DB 6B    0 3287 jp z, __U32TOFREG_END	; We are done
6BC6 CB 38       0 3289 srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
6BC8 CB 19       0 3290 rr c
6BCA CB 1A       0 3291 rr d
6BCC CB 1B       0 3292 rr e
6BCE D9          0 3293 exx
6BCF CB 1B       0 3295 rr e ; Shift EDCB >> 1, inserting the carry on the left
6BD1 CB 1A       0 3296 rr d
6BD3 CB 19       0 3297 rr c
6BD5 CB 18       0 3298 rr b
6BD7 2C          0 3300 inc l	; Increment exponent
6BD8 C3 BE 6B    0 3301 jp __U32TOFREG_LOOP
6BDB             0 3304 __U32TOFREG_END:
6BDB D9          0 3305 exx
6BDC 7D          0 3306 ld a, l     ; Puts the exponent in a
6BDD CB BB       0 3307 res 7, e	; Sets the sign bit to 0 (positive)
6BDF C9          0 3309 ret
6BE0             0 3314 ZXBASIC_USER_DATA:
6BE0             0 3315 _testPatterns:
6BE0 50 6C       0 3316 DEFW __LABEL34
6BE2             0 3317 _testPatterns.__DATA__.__PTR__:
6BE2 E4 6B       0 3318 DEFW _testPatterns.__DATA__
6BE4             0 3319 _testPatterns.__DATA__:
6BE4 CA          0 3320 DEFB 0CAh
6BE5 90          0 3321 DEFB 90h
6BE6 5A          0 3322 DEFB 5Ah
6BE7 18          0 3323 DEFB 18h
6BE8 CD          0 3324 DEFB 0CDh
6BE9 32          0 3325 DEFB 32h
6BEA 57          0 3326 DEFB 57h
6BEB 00          0 3327 DEFB 00h
6BEC C9          0 3328 DEFB 0C9h
6BED 7D          0 3329 DEFB 7Dh
6BEE AF          0 3330 DEFB 0AFh
6BEF 4A          0 3331 DEFB 4Ah
6BF0 D3          0 3332 DEFB 0D3h
6BF1 CD          0 3333 DEFB 0CDh
6BF2 51          0 3334 DEFB 51h
6BF3 C2          0 3335 DEFB 0C2h
6BF4 01          0 3336 DEFB 01h
6BF5 FF          0 3337 DEFB 0FFh
6BF6 78          0 3338 DEFB 78h
6BF7 78          0 3339 DEFB 78h
6BF8 47          0 3340 DEFB 47h
6BF9 7E          0 3341 DEFB 7Eh
6BFA 7E          0 3342 DEFB 7Eh
6BFB 01          0 3343 DEFB 01h
6BFC 78          0 3344 DEFB 78h
6BFD 78          0 3345 DEFB 78h
6BFE 1A          0 3346 DEFB 1Ah
6BFF 7E          0 3347 DEFB 7Eh
6C00 7E          0 3348 DEFB 7Eh
6C01 04          0 3349 DEFB 04h
6C02 78          0 3350 DEFB 78h
6C03 78          0 3351 DEFB 78h
6C04 18          0 3352 DEFB 18h
6C05 7E          0 3353 DEFB 7Eh
6C06 7E          0 3354 DEFB 7Eh
6C07 05          0 3355 DEFB 05h
6C08 78          0 3356 DEFB 78h
6C09 78          0 3357 DEFB 78h
6C0A 17          0 3358 DEFB 17h
6C0B 7E          0 3359 DEFB 7Eh
6C0C 7E          0 3360 DEFB 7Eh
6C0D 05          0 3361 DEFB 05h
6C0E 78          0 3362 DEFB 78h
6C0F 78          0 3363 DEFB 78h
6C10 17          0 3364 DEFB 17h
6C11 7E          0 3365 DEFB 7Eh
6C12 7E          0 3366 DEFB 7Eh
6C13 05          0 3367 DEFB 05h
6C14 78          0 3368 DEFB 78h
6C15 78          0 3369 DEFB 78h
6C16 17          0 3370 DEFB 17h
6C17 7E          0 3371 DEFB 7Eh
6C18 7E          0 3372 DEFB 7Eh
6C19 05          0 3373 DEFB 05h
6C1A 78          0 3374 DEFB 78h
6C1B 78          0 3375 DEFB 78h
6C1C 18          0 3376 DEFB 18h
6C1D 7E          0 3377 DEFB 7Eh
6C1E 7E          0 3378 DEFB 7Eh
6C1F 03          0 3379 DEFB 03h
6C20 78          0 3380 DEFB 78h
6C21 78          0 3381 DEFB 78h
6C22 05          0 3382 DEFB 05h
6C23 7D          0 3383 DEFB 7Dh
6C24 7D          0 3384 DEFB 7Dh
6C25 04          0 3385 DEFB 04h
6C26 78          0 3386 DEFB 78h
6C27 78          0 3387 DEFB 78h
6C28 18          0 3388 DEFB 18h
6C29 7D          0 3389 DEFB 7Dh
6C2A 7D          0 3390 DEFB 7Dh
6C2B 04          0 3391 DEFB 04h
6C2C 78          0 3392 DEFB 78h
6C2D 78          0 3393 DEFB 78h
6C2E 18          0 3394 DEFB 18h
6C2F 7D          0 3395 DEFB 7Dh
6C30 7D          0 3396 DEFB 7Dh
6C31 04          0 3397 DEFB 04h
6C32 78          0 3398 DEFB 78h
6C33 78          0 3399 DEFB 78h
6C34 18          0 3400 DEFB 18h
6C35 7D          0 3401 DEFB 7Dh
6C36 7D          0 3402 DEFB 7Dh
6C37 04          0 3403 DEFB 04h
6C38 78          0 3404 DEFB 78h
6C39 78          0 3405 DEFB 78h
6C3A 18          0 3406 DEFB 18h
6C3B 7D          0 3407 DEFB 7Dh
6C3C 7D          0 3408 DEFB 7Dh
6C3D 04          0 3409 DEFB 04h
6C3E 78          0 3410 DEFB 78h
6C3F 78          0 3411 DEFB 78h
6C40 18          0 3412 DEFB 18h
6C41 7D          0 3413 DEFB 7Dh
6C42 7D          0 3414 DEFB 7Dh
6C43 04          0 3415 DEFB 04h
6C44 78          0 3416 DEFB 78h
6C45 78          0 3417 DEFB 78h
6C46 18          0 3418 DEFB 18h
6C47 7D          0 3419 DEFB 7Dh
6C48 7D          0 3420 DEFB 7Dh
6C49 04          0 3421 DEFB 04h
6C4A 78          0 3422 DEFB 78h
6C4B 78          0 3423 DEFB 78h
6C4C FF          0 3424 DEFB 0FFh
6C4D 78          0 3425 DEFB 78h
6C4E 78          0 3426 DEFB 78h
6C4F 22          0 3427 DEFB 22h
6C50             0 3428 __LABEL34:
6C50 00 00       0 3429 DEFW 0000h
6C52 01          0 3430 DEFB 01h
6C53             0 3431 _patterns:
6C53 67 6C       0 3432 DEFW __LABEL35
6C55             0 3433 _patterns.__DATA__.__PTR__:
6C55 57 6C       0 3434 DEFW _patterns.__DATA__
6C57             0 3435 _patterns.__DATA__:
6C57 FF          0 3436 DEFB 0FFh
6C58 50          0 3437 DEFB 50h
6C59 0A          0 3438 DEFB 0Ah
6C5A 41          0 3439 DEFB 41h
6C5B 28          0 3440 DEFB 28h
6C5C 04          0 3441 DEFB 04h
6C5D 01          0 3442 DEFB 01h
6C5E FF          0 3443 DEFB 0FFh
6C5F 00          0 3444 DEFB 00h
6C60 18          0 3445 DEFB 18h
6C61 00          0 3446 DEFB 00h
6C62 24          0 3447 DEFB 24h
6C63 00          0 3448 DEFB 00h
6C64 18          0 3449 DEFB 18h
6C65 00          0 3450 DEFB 00h
6C66 24          0 3451 DEFB 24h
6C67             0 3452 __LABEL35:
6C67 00 00       0 3453 DEFW 0000h
6C69 01          0 3454 DEFB 01h
6C6A             0 3455 _ptrnSolido:
6C6A 76 6C       0 3456 DEFW __LABEL36
6C6C             0 3457 _ptrnSolido.__DATA__.__PTR__:
6C6C 6E 6C       0 3458 DEFW _ptrnSolido.__DATA__
6C6E             0 3459 _ptrnSolido.__DATA__:
6C6E FF          0 3460 DEFB 0FFh
6C6F FF          0 3461 DEFB 0FFh
6C70 FF          0 3462 DEFB 0FFh
6C71 FF          0 3463 DEFB 0FFh
6C72 FF          0 3464 DEFB 0FFh
6C73 FF          0 3465 DEFB 0FFh
6C74 FF          0 3466 DEFB 0FFh
6C75 FF          0 3467 DEFB 0FFh
6C76             0 3468 __LABEL36:
6C76 00 00       0 3469 DEFW 0000h
6C78 01          0 3470 DEFB 01h
6C79             0 3471 __LABEL32:
6C79 00          0 3472 DEFB 00h
6C7A 58          0 3473 DEFB 58h
6C7B             0 3474 ; Defines DATA END --> HEAP size is 0
6C7B             0 3475 ZXBASIC_USER_DATA_END:
6C7B             0 3476 ; Defines USER DATA Length in bytes
6C7B             0 3477 ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
6C7B             0 3478 END
