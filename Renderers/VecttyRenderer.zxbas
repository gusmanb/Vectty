#define ATTRSTART 22528
#define ATTREND 23296

#define LINETOOL 200
#define RECTTOOL 201
#define CIRCLETOOL 202
#define ARCTOOL 203
#define FILLTOOL 204
#define ERASETOOL 205
#define POLYTOOL 250
#define ENDOPS 255

sub Dibujar(ImageSource as uinteger, Length as uinteger)

    dim imgAddr as uinteger = ImageSource
    dim attrAddr as uInteger = ATTRSTART

    Dim current as uByte
    Dim nxt as uByte
    Dim runLen as uInteger
    Dim runLenPrev as uInteger

    'Recreamos las operaciones de dibujo
    
    dim op as ubyte
    dim x0 as integer
    dim y0 as integer
    dim x1 as integer
    dim y1 as integer
    dim dist as uinteger

    dim deg as float

    while op <> ENDOPS

        current = peek(imgAddr)
        
        if current > 191 then 
            op = current
            imgAddr = imgAddr + 1
        end if

        if op = LINETOOL or op = POLYTOOL then

            y0 = peek(imgAddr)
            x0 = peek(imgAddr + 1)
            y1 = peek(imgAddr + 2)
            x1 = peek(imgAddr + 3)
            imgAddr = imgAddr + 4

            plot x0, y0
            draw x1 - x0, y1 - y0

            if op = POLYTOOL then 'Si es una poli linea

                while y1 < 200 'Mientras no haya un cambio de herramienta

                    x0 = x1 'Guardamos las ultimas coordenadas
                    y0 = y1

                    y1 = peek(imgAddr) 'Leemos el siguiente byte

                    if y1 < 200 then 'Si sigue siendo la poli linea...

                        x1 = peek(imgAddr + 1) 'Acabamos de leer las coordenadas
                        imgAddr = imgAddr + 2  'Actualizamos la direccion

                        draw x1 - x0, y1 - y0  'Dibujamos el nuevo segmento

                    end if                                            

                end while

            end if

        else if op = RECTTOOL then
    
            y0 = peek(imgAddr)
            x0 = peek(imgAddr + 1)
            y1 = peek(imgAddr + 2)
            x1 = peek(imgAddr + 3)
            imgAddr = imgAddr + 4

            plot x0, y0
            draw x1 - x0, 0
            draw 0, y1 - y0
            draw x0 - x1, 0
            draw 0, y0 - y1

        else if op = CIRCLETOOL then

            y0 = peek(imgAddr)
            x0 = peek(imgAddr + 1)
            dist = peek(imgAddr + 2)
            imgAddr = imgAddr + 3

            circle x0, y0, dist

        else if op = ARCTOOL then

            y0 = peek(imgAddr)
            x0 = peek(imgAddr + 1)
            y1 = peek(imgAddr + 2)
            x1 = peek(imgAddr + 3)

            dist = peek(imgAddr + 4)
            dist = dist << 8
            dist = dist bor peek(imgAddr + 5)

            imgAddr = imgAddr + 6

            if dist >= 32768 then
                deg = dist - 32768
                deg = deg / 10.0
            else
                deg = dist
                deg = deg / 10.0
                deg = deg * -1
            end if

            deg = (PI / 180.0) * deg

            plot x0, y0
            draw x1 - x0, y1 - y0, deg

        else if op = FILLTOOL then

			y0 = peek(imgAddr)
            x0 = peek(imgAddr + 1)
			imgAddr = imgAddr + 2

            FloodFill(x0, y0)

        else if op = ERASETOOL

			y0 = peek(imgAddr)
            x0 = peek(imgAddr + 1)
			imgAddr = imgAddr + 2

			print at y0, x0 ; " ";

        end if

    end while



    'Descomprimimos los atributos
    while attrAddr < ATTREND

        current = PEEK(imgAddr)

        if attrAddr + 1 < SCREND then

            nxt = PEEK(imgAddr + 1)

            if nxt = current then

                runLen = PEEK(imgAddr + 2)
                runLen = runLen + 2

                runLenPrev = runLen

                while runLen > 0

                    POKE attrAddr, current
                    runLen = runLen - 1
                    attrAddr = attrAddr + 1

                end while

                imgAddr = imgAddr + 3

            else

                POKE attrAddr, current
                attrAddr = attrAddr + 1
                imgAddr = imgAddr + 1

            end if

        else

            POKE attrAddr, current
            attrAddr = attrAddr + 1
            imgAddr = imgAddr + 1

        end if

    end while

end sub

sub fastcall FloodFill(x as ubyte, y as ubyte)

asm

ld d, a ;d = x

pop hl  ;pop ret address

pop bc  ;pop y

ld e, b ;e = y

push hl ;push ret address again

; scanline fill by John Metcalf
; call with d=x-coord, e=y-coord

; set end marker

fill:
  ld l,255
  push hl

; calculate bit position of pixel

nextrun:
  ld a,d
  and 7
  inc a
  ld b,a
  ld a,1
bitpos:
  rrca
  djnz bitpos
  ld c,b
  ld b,a

; move left until hitting a set pixel or the screen edge

seekleft:
  ld a,d
  or a
  jr z,goright
  dec d
  rlc b
  call scrpos
  jr nz,seekleft

; move right until hitting a set pixel or the screen edge,
; setting pixels as we go. Check rows above and below and
; save their coordinates to fill later if necessary

seekright:  
  rrc b
  inc d
  jr z,rightedge
goright:
  call scrpos
  jr z,rightedge
  ld (hl),a
  inc e
  call checkadj
  dec e
  dec e
  call checkadj
  inc e
  jr seekright

; check to see if there's another row waiting to be filled

rightedge:
  pop de
  ld a,e
  inc a
  jr nz,nextrun
  ret  

; calculate the pixel address and whether or not it's set

scrpos:
  ld a,e
  and 248
  rra
  scf
  rra
  rra
  ld l,a
  xor e
  and 248
  xor e
  ld h,a
  ld a,l
  xor d
  and 7
  xor d
  rrca
  rrca
  rrca
  ld l,a
  ld a,b
  or (hl)
  cp (hl)
  ret

; check and save the coordinates of an adjacent row

checkadj:
  sla c
  ld a,e
  cp 192
  ret nc
  call scrpos+1
  ret z
  inc c
  bit 2,c
  ret nz
  pop hl
  push de
  jp (hl)


end asm

end sub